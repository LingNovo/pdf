// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Wed, 07 Mar 2018 17:31:54 CST.
// By https://git.io/c-for-go. DO NOT EDIT.

package mupdf

/*
#include "mupdf/pdf.h"
#include "mupdf/fitz.h"
#include <stdlib.h>
#include "cgo_helpers.h"
#cgo LDFLAGS: -lm -lmupdf -lmupdfthird
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// FzVarImp function as declared in fitz/context.h:53
func FzVarImp(arg0 unsafe.Pointer) {
	carg0, _ := arg0, cgoAllocsUnknown
	C.fz_var_imp(carg0)
}

// FzPushTry function as declared in fitz/context.h:79
func FzPushTry(ctx *FzContext) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_push_try(cctx)
	__v := (int32)(__ret)
	return __v
}

// FzRethrow function as declared in fitz/context.h:82
func FzRethrow(ctx *FzContext) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.fz_rethrow(cctx)
}

// FzCaughtMessage function as declared in fitz/context.h:85
func FzCaughtMessage(ctx *FzContext) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_caught_message(cctx)
	__v := packPCharString(__ret)
	return __v
}

// FzCaught function as declared in fitz/context.h:86
func FzCaught(ctx *FzContext) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_caught(cctx)
	__v := (int32)(__ret)
	return __v
}

// FzRethrowIf function as declared in fitz/context.h:87
func FzRethrowIf(ctx *FzContext, errcode int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cerrcode, _ := (C.int)(errcode), cgoAllocsUnknown
	C.fz_rethrow_if(cctx, cerrcode)
}

// FzFlushWarnings function as declared in fitz/context.h:109
func FzFlushWarnings(ctx *FzContext) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.fz_flush_warnings(cctx)
}

// FzNewContextImp function as declared in fitz/context.h:208
func FzNewContextImp(alloc *FzAllocContext, locks *FzLocksContext, maxStore uint, version string) *FzContext {
	calloc, _ := (*C.fz_alloc_context)(unsafe.Pointer(alloc)), cgoAllocsUnknown
	clocks, _ := (*C.fz_locks_context)(unsafe.Pointer(locks)), cgoAllocsUnknown
	cmaxStore, _ := (C.size_t)(maxStore), cgoAllocsUnknown
	version = safeString(version)
	cversion, _ := unpackPCharString(version)
	__ret := C.fz_new_context_imp(calloc, clocks, cmaxStore, cversion)
	runtime.KeepAlive(version)
	__v := *(**FzContext)(unsafe.Pointer(&__ret))
	return __v
}

// FzCloneContext function as declared in fitz/context.h:227
func FzCloneContext(ctx *FzContext) *FzContext {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_clone_context(cctx)
	__v := *(**FzContext)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropContext function as declared in fitz/context.h:236
func FzDropContext(ctx *FzContext) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.fz_drop_context(cctx)
}

// FzSetUserContext function as declared in fitz/context.h:244
func FzSetUserContext(ctx *FzContext, user unsafe.Pointer) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cuser, _ := user, cgoAllocsUnknown
	C.fz_set_user_context(cctx, cuser)
}

// FzUserContext function as declared in fitz/context.h:249
func FzUserContext(ctx *FzContext) unsafe.Pointer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_user_context(cctx)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// FzAaLevel function as declared in fitz/context.h:314
func FzAaLevel(ctx *FzContext) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_aa_level(cctx)
	__v := (int32)(__ret)
	return __v
}

// FzSetAaLevel function as declared in fitz/context.h:323
func FzSetAaLevel(ctx *FzContext, bits int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbits, _ := (C.int)(bits), cgoAllocsUnknown
	C.fz_set_aa_level(cctx, cbits)
}

// FzTextAaLevel function as declared in fitz/context.h:329
func FzTextAaLevel(ctx *FzContext) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_text_aa_level(cctx)
	__v := (int32)(__ret)
	return __v
}

// FzSetTextAaLevel function as declared in fitz/context.h:338
func FzSetTextAaLevel(ctx *FzContext, bits int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbits, _ := (C.int)(bits), cgoAllocsUnknown
	C.fz_set_text_aa_level(cctx, cbits)
}

// FzGraphicsAaLevel function as declared in fitz/context.h:344
func FzGraphicsAaLevel(ctx *FzContext) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_graphics_aa_level(cctx)
	__v := (int32)(__ret)
	return __v
}

// FzSetGraphicsAaLevel function as declared in fitz/context.h:353
func FzSetGraphicsAaLevel(ctx *FzContext, bits int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbits, _ := (C.int)(bits), cgoAllocsUnknown
	C.fz_set_graphics_aa_level(cctx, cbits)
}

// FzGraphicsMinLineWidth function as declared in fitz/context.h:361
func FzGraphicsMinLineWidth(ctx *FzContext) float32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_graphics_min_line_width(cctx)
	__v := (float32)(__ret)
	return __v
}

// FzSetGraphicsMinLineWidth function as declared in fitz/context.h:369
func FzSetGraphicsMinLineWidth(ctx *FzContext, minLineWidth float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cminLineWidth, _ := (C.float)(minLineWidth), cgoAllocsUnknown
	C.fz_set_graphics_min_line_width(cctx, cminLineWidth)
}

// FzUserCss function as declared in fitz/context.h:374
func FzUserCss(ctx *FzContext) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_user_css(cctx)
	__v := packPCharString(__ret)
	return __v
}

// FzSetUserCss function as declared in fitz/context.h:379
func FzSetUserCss(ctx *FzContext, text string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	C.fz_set_user_css(cctx, ctext)
	runtime.KeepAlive(text)
}

// FzUseDocumentCss function as declared in fitz/context.h:384
func FzUseDocumentCss(ctx *FzContext) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_use_document_css(cctx)
	__v := (int32)(__ret)
	return __v
}

// FzSetUseDocumentCss function as declared in fitz/context.h:389
func FzSetUseDocumentCss(ctx *FzContext, use int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cuse, _ := (C.int)(use), cgoAllocsUnknown
	C.fz_set_use_document_css(cctx, cuse)
}

// FzMalloc function as declared in fitz/context.h:415
func FzMalloc(ctx *FzContext, size uint) unsafe.Pointer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fz_malloc(cctx, csize)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// FzCalloc function as declared in fitz/context.h:427
func FzCalloc(ctx *FzContext, count uint, size uint) unsafe.Pointer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccount, _ := (C.size_t)(count), cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fz_calloc(cctx, ccount, csize)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// FzMallocArray function as declared in fitz/context.h:455
func FzMallocArray(ctx *FzContext, count uint, size uint) unsafe.Pointer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccount, _ := (C.size_t)(count), cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fz_malloc_array(cctx, ccount, csize)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// FzResizeArray function as declared in fitz/context.h:470
func FzResizeArray(ctx *FzContext, p unsafe.Pointer, count uint, size uint) unsafe.Pointer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cp, _ := p, cgoAllocsUnknown
	ccount, _ := (C.size_t)(count), cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fz_resize_array(cctx, cp, ccount, csize)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// FzStrdup function as declared in fitz/context.h:480
func FzStrdup(ctx *FzContext, s string) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	s = safeString(s)
	cs, _ := unpackPCharString(s)
	__ret := C.fz_strdup(cctx, cs)
	runtime.KeepAlive(s)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// FzFree function as declared in fitz/context.h:485
func FzFree(ctx *FzContext, p unsafe.Pointer) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cp, _ := p, cgoAllocsUnknown
	C.fz_free(cctx, cp)
}

// FzMallocNoThrow function as declared in fitz/context.h:495
func FzMallocNoThrow(ctx *FzContext, size uint) unsafe.Pointer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fz_malloc_no_throw(cctx, csize)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// FzCallocNoThrow function as declared in fitz/context.h:507
func FzCallocNoThrow(ctx *FzContext, count uint, size uint) unsafe.Pointer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccount, _ := (C.size_t)(count), cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fz_calloc_no_throw(cctx, ccount, csize)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// FzMallocArrayNoThrow function as declared in fitz/context.h:521
func FzMallocArrayNoThrow(ctx *FzContext, count uint, size uint) unsafe.Pointer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccount, _ := (C.size_t)(count), cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fz_malloc_array_no_throw(cctx, ccount, csize)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// FzResizeArrayNoThrow function as declared in fitz/context.h:536
func FzResizeArrayNoThrow(ctx *FzContext, p unsafe.Pointer, count uint, size uint) unsafe.Pointer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cp, _ := p, cgoAllocsUnknown
	ccount, _ := (C.size_t)(count), cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fz_resize_array_no_throw(cctx, cp, ccount, csize)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// FzStrdupNoThrow function as declared in fitz/context.h:546
func FzStrdupNoThrow(ctx *FzContext, s string) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	s = safeString(s)
	cs, _ := unpackPCharString(s)
	__ret := C.fz_strdup_no_throw(cctx, cs)
	runtime.KeepAlive(s)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// FzGenId function as declared in fitz/context.h:552
func FzGenId(ctx *FzContext) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_gen_id(cctx)
	__v := (int32)(__ret)
	return __v
}

var FzAllocDefault FzAllocContext
var FzLocksDefault FzLocksContext

// FzMul255 function as declared in fitz/geometry.h:9
func FzMul255(a int32, b int32) int32 {
	ca, _ := (C.int)(a), cgoAllocsUnknown
	cb, _ := (C.int)(b), cgoAllocsUnknown
	__ret := C.fz_mul255(ca, cb)
	__v := (int32)(__ret)
	return __v
}

// FzAtof function as declared in fitz/geometry.h:44
func FzAtof(s string) float32 {
	s = safeString(s)
	cs, _ := unpackPCharString(s)
	__ret := C.fz_atof(cs)
	runtime.KeepAlive(s)
	__v := (float32)(__ret)
	return __v
}

// FzAtoi function as declared in fitz/geometry.h:49
func FzAtoi(s string) int32 {
	s = safeString(s)
	cs, _ := unpackPCharString(s)
	__ret := C.fz_atoi(cs)
	runtime.KeepAlive(s)
	__v := (int32)(__ret)
	return __v
}

// FzAtoi64 function as declared in fitz/geometry.h:50
func FzAtoi64(s string) int {
	s = safeString(s)
	cs, _ := unpackPCharString(s)
	__ret := C.fz_atoi64(cs)
	runtime.KeepAlive(s)
	__v := (int)(__ret)
	return __v
}

// FzAbs function as declared in fitz/geometry.h:57
func FzAbs(f float32) float32 {
	cf, _ := (C.float)(f), cgoAllocsUnknown
	__ret := C.fz_abs(cf)
	__v := (float32)(__ret)
	return __v
}

// FzAbsi function as declared in fitz/geometry.h:62
func FzAbsi(i int32) int32 {
	ci, _ := (C.int)(i), cgoAllocsUnknown
	__ret := C.fz_absi(ci)
	__v := (int32)(__ret)
	return __v
}

// FzMin function as declared in fitz/geometry.h:67
func FzMin(a float32, b float32) float32 {
	ca, _ := (C.float)(a), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	__ret := C.fz_min(ca, cb)
	__v := (float32)(__ret)
	return __v
}

// FzMini function as declared in fitz/geometry.h:72
func FzMini(a int32, b int32) int32 {
	ca, _ := (C.int)(a), cgoAllocsUnknown
	cb, _ := (C.int)(b), cgoAllocsUnknown
	__ret := C.fz_mini(ca, cb)
	__v := (int32)(__ret)
	return __v
}

// FzMinz function as declared in fitz/geometry.h:77
func FzMinz(a uint, b uint) uint {
	ca, _ := (C.size_t)(a), cgoAllocsUnknown
	cb, _ := (C.size_t)(b), cgoAllocsUnknown
	__ret := C.fz_minz(ca, cb)
	__v := (uint)(__ret)
	return __v
}

// FzMax function as declared in fitz/geometry.h:82
func FzMax(a float32, b float32) float32 {
	ca, _ := (C.float)(a), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	__ret := C.fz_max(ca, cb)
	__v := (float32)(__ret)
	return __v
}

// FzMaxi function as declared in fitz/geometry.h:87
func FzMaxi(a int32, b int32) int32 {
	ca, _ := (C.int)(a), cgoAllocsUnknown
	cb, _ := (C.int)(b), cgoAllocsUnknown
	__ret := C.fz_maxi(ca, cb)
	__v := (int32)(__ret)
	return __v
}

// FzMaxi64 function as declared in fitz/geometry.h:92
func FzMaxi64(a int, b int) int {
	ca, _ := (C.int64_t)(a), cgoAllocsUnknown
	cb, _ := (C.int64_t)(b), cgoAllocsUnknown
	__ret := C.fz_maxi64(ca, cb)
	__v := (int)(__ret)
	return __v
}

// FzClamp function as declared in fitz/geometry.h:97
func FzClamp(f float32, min float32, max float32) float32 {
	cf, _ := (C.float)(f), cgoAllocsUnknown
	cmin, _ := (C.float)(min), cgoAllocsUnknown
	cmax, _ := (C.float)(max), cgoAllocsUnknown
	__ret := C.fz_clamp(cf, cmin, cmax)
	__v := (float32)(__ret)
	return __v
}

// FzClampi function as declared in fitz/geometry.h:102
func FzClampi(i int32, min int32, max int32) int32 {
	ci, _ := (C.int)(i), cgoAllocsUnknown
	cmin, _ := (C.int)(min), cgoAllocsUnknown
	cmax, _ := (C.int)(max), cgoAllocsUnknown
	__ret := C.fz_clampi(ci, cmin, cmax)
	__v := (int32)(__ret)
	return __v
}

// FzClampd function as declared in fitz/geometry.h:107
func FzClampd(d float64, min float64, max float64) float64 {
	cd, _ := (C.double)(d), cgoAllocsUnknown
	cmin, _ := (C.double)(min), cgoAllocsUnknown
	cmax, _ := (C.double)(max), cgoAllocsUnknown
	__ret := C.fz_clampd(cd, cmin, cmax)
	__v := (float64)(__ret)
	return __v
}

// FzClampp function as declared in fitz/geometry.h:112
func FzClampp(p unsafe.Pointer, min unsafe.Pointer, max unsafe.Pointer) unsafe.Pointer {
	cp, _ := p, cgoAllocsUnknown
	cmin, _ := min, cgoAllocsUnknown
	cmax, _ := max, cgoAllocsUnknown
	__ret := C.fz_clampp(cp, cmin, cmax)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// FzRectMin function as declared in fitz/geometry.h:156
func FzRectMin(f *FzRect) *FzPoint {
	cf, _ := (*C.fz_rect)(unsafe.Pointer(f)), cgoAllocsUnknown
	__ret := C.fz_rect_min(cf)
	__v := *(**FzPoint)(unsafe.Pointer(&__ret))
	return __v
}

// FzRectMax function as declared in fitz/geometry.h:164
func FzRectMax(f *FzRect) *FzPoint {
	cf, _ := (*C.fz_rect)(unsafe.Pointer(f)), cgoAllocsUnknown
	__ret := C.fz_rect_max(cf)
	__v := *(**FzPoint)(unsafe.Pointer(&__ret))
	return __v
}

var FzUnitRect FzRect
var FzEmptyRect FzRect
var FzEmptyIrect FzIrect
var FzInfiniteRect FzRect
var FzInfiniteIrect FzIrect

// FzIsEmptyRect function as declared in fitz/geometry.h:212
func FzIsEmptyRect(r *FzRect) int32 {
	cr, _ := (*C.fz_rect)(unsafe.Pointer(r)), cgoAllocsUnknown
	__ret := C.fz_is_empty_rect(cr)
	__v := (int32)(__ret)
	return __v
}

// FzIsEmptyIrect function as declared in fitz/geometry.h:218
func FzIsEmptyIrect(r *FzIrect) int32 {
	cr, _ := (*C.fz_irect)(unsafe.Pointer(r)), cgoAllocsUnknown
	__ret := C.fz_is_empty_irect(cr)
	__v := (int32)(__ret)
	return __v
}

// FzIsInfiniteRect function as declared in fitz/geometry.h:230
func FzIsInfiniteRect(r *FzRect) int32 {
	cr, _ := (*C.fz_rect)(unsafe.Pointer(r)), cgoAllocsUnknown
	__ret := C.fz_is_infinite_rect(cr)
	__v := (int32)(__ret)
	return __v
}

// FzIsInfiniteIrect function as declared in fitz/geometry.h:243
func FzIsInfiniteIrect(r *FzIrect) int32 {
	cr, _ := (*C.fz_irect)(unsafe.Pointer(r)), cgoAllocsUnknown
	__ret := C.fz_is_infinite_irect(cr)
	__v := (int32)(__ret)
	return __v
}

var FzIdentity FzMatrix

// FzCopyMatrix function as declared in fitz/geometry.h:272
func FzCopyMatrix(m *FzMatrix, s *FzMatrix) *FzMatrix {
	cm, _ := (*C.fz_matrix)(unsafe.Pointer(m)), cgoAllocsUnknown
	cs, _ := (*C.fz_matrix)(unsafe.Pointer(s)), cgoAllocsUnknown
	__ret := C.fz_copy_matrix(cm, cs)
	__v := *(**FzMatrix)(unsafe.Pointer(&__ret))
	return __v
}

// FzConcat function as declared in fitz/geometry.h:286
func FzConcat(result *FzMatrix, left *FzMatrix, right []FzMatrix) *FzMatrix {
	cresult, _ := (*C.fz_matrix)(unsafe.Pointer(result)), cgoAllocsUnknown
	cleft, _ := (*C.fz_matrix)(unsafe.Pointer(left)), cgoAllocsUnknown
	cright, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&right)).Data)), cgoAllocsUnknown
	__ret := C.fz_concat(cresult, cleft, cright)
	__v := *(**FzMatrix)(unsafe.Pointer(&__ret))
	return __v
}

// FzScale function as declared in fitz/geometry.h:301
func FzScale(m *FzMatrix, sx float32, sy float32) *FzMatrix {
	cm, _ := (*C.fz_matrix)(unsafe.Pointer(m)), cgoAllocsUnknown
	csx, _ := (C.float)(sx), cgoAllocsUnknown
	csy, _ := (C.float)(sy), cgoAllocsUnknown
	__ret := C.fz_scale(cm, csx, csy)
	__v := *(**FzMatrix)(unsafe.Pointer(&__ret))
	return __v
}

// FzPreScale function as declared in fitz/geometry.h:314
func FzPreScale(m *FzMatrix, sx float32, sy float32) *FzMatrix {
	cm, _ := (*C.fz_matrix)(unsafe.Pointer(m)), cgoAllocsUnknown
	csx, _ := (C.float)(sx), cgoAllocsUnknown
	csy, _ := (C.float)(sy), cgoAllocsUnknown
	__ret := C.fz_pre_scale(cm, csx, csy)
	__v := *(**FzMatrix)(unsafe.Pointer(&__ret))
	return __v
}

// FzPostScale function as declared in fitz/geometry.h:327
func FzPostScale(m *FzMatrix, sx float32, sy float32) *FzMatrix {
	cm, _ := (*C.fz_matrix)(unsafe.Pointer(m)), cgoAllocsUnknown
	csx, _ := (C.float)(sx), cgoAllocsUnknown
	csy, _ := (C.float)(sy), cgoAllocsUnknown
	__ret := C.fz_post_scale(cm, csx, csy)
	__v := *(**FzMatrix)(unsafe.Pointer(&__ret))
	return __v
}

// FzShear function as declared in fitz/geometry.h:341
func FzShear(m *FzMatrix, sx float32, sy float32) *FzMatrix {
	cm, _ := (*C.fz_matrix)(unsafe.Pointer(m)), cgoAllocsUnknown
	csx, _ := (C.float)(sx), cgoAllocsUnknown
	csy, _ := (C.float)(sy), cgoAllocsUnknown
	__ret := C.fz_shear(cm, csx, csy)
	__v := *(**FzMatrix)(unsafe.Pointer(&__ret))
	return __v
}

// FzPreShear function as declared in fitz/geometry.h:355
func FzPreShear(m *FzMatrix, sx float32, sy float32) *FzMatrix {
	cm, _ := (*C.fz_matrix)(unsafe.Pointer(m)), cgoAllocsUnknown
	csx, _ := (C.float)(sx), cgoAllocsUnknown
	csy, _ := (C.float)(sy), cgoAllocsUnknown
	__ret := C.fz_pre_shear(cm, csx, csy)
	__v := *(**FzMatrix)(unsafe.Pointer(&__ret))
	return __v
}

// FzRotate function as declared in fitz/geometry.h:370
func FzRotate(m *FzMatrix, degrees float32) *FzMatrix {
	cm, _ := (*C.fz_matrix)(unsafe.Pointer(m)), cgoAllocsUnknown
	cdegrees, _ := (C.float)(degrees), cgoAllocsUnknown
	__ret := C.fz_rotate(cm, cdegrees)
	__v := *(**FzMatrix)(unsafe.Pointer(&__ret))
	return __v
}

// FzPreRotate function as declared in fitz/geometry.h:385
func FzPreRotate(m *FzMatrix, degrees float32) *FzMatrix {
	cm, _ := (*C.fz_matrix)(unsafe.Pointer(m)), cgoAllocsUnknown
	cdegrees, _ := (C.float)(degrees), cgoAllocsUnknown
	__ret := C.fz_pre_rotate(cm, cdegrees)
	__v := *(**FzMatrix)(unsafe.Pointer(&__ret))
	return __v
}

// FzTranslate function as declared in fitz/geometry.h:400
func FzTranslate(m *FzMatrix, tx float32, ty float32) *FzMatrix {
	cm, _ := (*C.fz_matrix)(unsafe.Pointer(m)), cgoAllocsUnknown
	ctx, _ := (C.float)(tx), cgoAllocsUnknown
	cty, _ := (C.float)(ty), cgoAllocsUnknown
	__ret := C.fz_translate(cm, ctx, cty)
	__v := *(**FzMatrix)(unsafe.Pointer(&__ret))
	return __v
}

// FzPreTranslate function as declared in fitz/geometry.h:413
func FzPreTranslate(m *FzMatrix, tx float32, ty float32) *FzMatrix {
	cm, _ := (*C.fz_matrix)(unsafe.Pointer(m)), cgoAllocsUnknown
	ctx, _ := (C.float)(tx), cgoAllocsUnknown
	cty, _ := (C.float)(ty), cgoAllocsUnknown
	__ret := C.fz_pre_translate(cm, ctx, cty)
	__v := *(**FzMatrix)(unsafe.Pointer(&__ret))
	return __v
}

// FzInvertMatrix function as declared in fitz/geometry.h:426
func FzInvertMatrix(inverse *FzMatrix, matrix *FzMatrix) *FzMatrix {
	cinverse, _ := (*C.fz_matrix)(unsafe.Pointer(inverse)), cgoAllocsUnknown
	cmatrix, _ := (*C.fz_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	__ret := C.fz_invert_matrix(cinverse, cmatrix)
	__v := *(**FzMatrix)(unsafe.Pointer(&__ret))
	return __v
}

// FzTryInvertMatrix function as declared in fitz/geometry.h:438
func FzTryInvertMatrix(inverse *FzMatrix, matrix *FzMatrix) int32 {
	cinverse, _ := (*C.fz_matrix)(unsafe.Pointer(inverse)), cgoAllocsUnknown
	cmatrix, _ := (*C.fz_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	__ret := C.fz_try_invert_matrix(cinverse, cmatrix)
	__v := (int32)(__ret)
	return __v
}

// FzIsRectilinear function as declared in fitz/geometry.h:448
func FzIsRectilinear(m *FzMatrix) int32 {
	cm, _ := (*C.fz_matrix)(unsafe.Pointer(m)), cgoAllocsUnknown
	__ret := C.fz_is_rectilinear(cm)
	__v := (int32)(__ret)
	return __v
}

// FzMatrixExpansion function as declared in fitz/geometry.h:453
func FzMatrixExpansion(m *FzMatrix) float32 {
	cm, _ := (*C.fz_matrix)(unsafe.Pointer(m)), cgoAllocsUnknown
	__ret := C.fz_matrix_expansion(cm)
	__v := (float32)(__ret)
	return __v
}

// FzIntersectRect function as declared in fitz/geometry.h:466
func FzIntersectRect(a *FzRect, b *FzRect) *FzRect {
	ca, _ := (*C.fz_rect)(unsafe.Pointer(a)), cgoAllocsUnknown
	cb, _ := (*C.fz_rect)(unsafe.Pointer(b)), cgoAllocsUnknown
	__ret := C.fz_intersect_rect(ca, cb)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

// FzIntersectIrect function as declared in fitz/geometry.h:474
func FzIntersectIrect(a *FzIrect, b *FzIrect) *FzIrect {
	ca, _ := (*C.fz_irect)(unsafe.Pointer(a)), cgoAllocsUnknown
	cb, _ := (*C.fz_irect)(unsafe.Pointer(b)), cgoAllocsUnknown
	__ret := C.fz_intersect_irect(ca, cb)
	__v := *(**FzIrect)(unsafe.Pointer(&__ret))
	return __v
}

// FzUnionRect function as declared in fitz/geometry.h:486
func FzUnionRect(a *FzRect, b *FzRect) *FzRect {
	ca, _ := (*C.fz_rect)(unsafe.Pointer(a)), cgoAllocsUnknown
	cb, _ := (*C.fz_rect)(unsafe.Pointer(b)), cgoAllocsUnknown
	__ret := C.fz_union_rect(ca, cb)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

// FzIrectFromRect function as declared in fitz/geometry.h:504
func FzIrectFromRect(bbox *FzIrect, rect *FzRect) *FzIrect {
	cbbox, _ := (*C.fz_irect)(unsafe.Pointer(bbox)), cgoAllocsUnknown
	crect, _ := (*C.fz_rect)(unsafe.Pointer(rect)), cgoAllocsUnknown
	__ret := C.fz_irect_from_rect(cbbox, crect)
	__v := *(**FzIrect)(unsafe.Pointer(&__ret))
	return __v
}

// FzRoundRect function as declared in fitz/geometry.h:520
func FzRoundRect(bbox *FzIrect, rect *FzRect) *FzIrect {
	cbbox, _ := (*C.fz_irect)(unsafe.Pointer(bbox)), cgoAllocsUnknown
	crect, _ := (*C.fz_rect)(unsafe.Pointer(rect)), cgoAllocsUnknown
	__ret := C.fz_round_rect(cbbox, crect)
	__v := *(**FzIrect)(unsafe.Pointer(&__ret))
	return __v
}

// FzRectFromIrect function as declared in fitz/geometry.h:534
func FzRectFromIrect(rect *FzRect, bbox *FzIrect) *FzRect {
	crect, _ := (*C.fz_rect)(unsafe.Pointer(rect)), cgoAllocsUnknown
	cbbox, _ := (*C.fz_irect)(unsafe.Pointer(bbox)), cgoAllocsUnknown
	__ret := C.fz_rect_from_irect(crect, cbbox)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

// FzExpandRect function as declared in fitz/geometry.h:539
func FzExpandRect(b *FzRect, expand float32) *FzRect {
	cb, _ := (*C.fz_rect)(unsafe.Pointer(b)), cgoAllocsUnknown
	cexpand, _ := (C.float)(expand), cgoAllocsUnknown
	__ret := C.fz_expand_rect(cb, cexpand)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

// FzIncludePointInRect function as declared in fitz/geometry.h:547
func FzIncludePointInRect(r *FzRect, p *FzPoint) *FzRect {
	cr, _ := (*C.fz_rect)(unsafe.Pointer(r)), cgoAllocsUnknown
	cp, _ := (*C.fz_point)(unsafe.Pointer(p)), cgoAllocsUnknown
	__ret := C.fz_include_point_in_rect(cr, cp)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

// FzTranslateIrect function as declared in fitz/geometry.h:554
func FzTranslateIrect(a *FzIrect, xoff int32, yoff int32) *FzIrect {
	ca, _ := (*C.fz_irect)(unsafe.Pointer(a)), cgoAllocsUnknown
	cxoff, _ := (C.int)(xoff), cgoAllocsUnknown
	cyoff, _ := (C.int)(yoff), cgoAllocsUnknown
	__ret := C.fz_translate_irect(ca, cxoff, cyoff)
	__v := *(**FzIrect)(unsafe.Pointer(&__ret))
	return __v
}

// FzContainsRect function as declared in fitz/geometry.h:561
func FzContainsRect(a *FzRect, b *FzRect) int32 {
	ca, _ := (*C.fz_rect)(unsafe.Pointer(a)), cgoAllocsUnknown
	cb, _ := (*C.fz_rect)(unsafe.Pointer(b)), cgoAllocsUnknown
	__ret := C.fz_contains_rect(ca, cb)
	__v := (int32)(__ret)
	return __v
}

// FzTransformPoint function as declared in fitz/geometry.h:574
func FzTransformPoint(point *FzPoint, transform *FzMatrix) *FzPoint {
	cpoint, _ := (*C.fz_point)(unsafe.Pointer(point)), cgoAllocsUnknown
	ctransform, _ := (*C.fz_matrix)(unsafe.Pointer(transform)), cgoAllocsUnknown
	__ret := C.fz_transform_point(cpoint, ctransform)
	__v := *(**FzPoint)(unsafe.Pointer(&__ret))
	return __v
}

// FzTransformPointXy function as declared in fitz/geometry.h:575
func FzTransformPointXy(point *FzPoint, transform *FzMatrix, x float32, y float32) *FzPoint {
	cpoint, _ := (*C.fz_point)(unsafe.Pointer(point)), cgoAllocsUnknown
	ctransform, _ := (*C.fz_matrix)(unsafe.Pointer(transform)), cgoAllocsUnknown
	cx, _ := (C.float)(x), cgoAllocsUnknown
	cy, _ := (C.float)(y), cgoAllocsUnknown
	__ret := C.fz_transform_point_xy(cpoint, ctransform, cx, cy)
	__v := *(**FzPoint)(unsafe.Pointer(&__ret))
	return __v
}

// FzTransformVector function as declared in fitz/geometry.h:586
func FzTransformVector(vector *FzPoint, transform *FzMatrix) *FzPoint {
	cvector, _ := (*C.fz_point)(unsafe.Pointer(vector)), cgoAllocsUnknown
	ctransform, _ := (*C.fz_matrix)(unsafe.Pointer(transform)), cgoAllocsUnknown
	__ret := C.fz_transform_vector(cvector, ctransform)
	__v := *(**FzPoint)(unsafe.Pointer(&__ret))
	return __v
}

// FzTransformRect function as declared in fitz/geometry.h:603
func FzTransformRect(rect *FzRect, transform *FzMatrix) *FzRect {
	crect, _ := (*C.fz_rect)(unsafe.Pointer(rect)), cgoAllocsUnknown
	ctransform, _ := (*C.fz_matrix)(unsafe.Pointer(transform)), cgoAllocsUnknown
	__ret := C.fz_transform_rect(crect, ctransform)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

// FzNormalizeVector function as declared in fitz/geometry.h:608
func FzNormalizeVector(p *FzPoint) {
	cp, _ := (*C.fz_point)(unsafe.Pointer(p)), cgoAllocsUnknown
	C.fz_normalize_vector(cp)
}

// FzGridfitMatrix function as declared in fitz/geometry.h:610
func FzGridfitMatrix(asTiled int32, m *FzMatrix) {
	casTiled, _ := (C.int)(asTiled), cgoAllocsUnknown
	cm, _ := (*C.fz_matrix)(unsafe.Pointer(m)), cgoAllocsUnknown
	C.fz_gridfit_matrix(casTiled, cm)
}

// FzMatrixMaxExpansion function as declared in fitz/geometry.h:612
func FzMatrixMaxExpansion(m *FzMatrix) float32 {
	cm, _ := (*C.fz_matrix)(unsafe.Pointer(m)), cgoAllocsUnknown
	__ret := C.fz_matrix_max_expansion(cm)
	__v := (float32)(__ret)
	return __v
}

// FzMd5Init function as declared in fitz/crypt.h:27
func FzMd5Init(state *FzMd5) {
	cstate, _ := (*C.fz_md5)(unsafe.Pointer(state)), cgoAllocsUnknown
	C.fz_md5_init(cstate)
}

// FzMd5Update function as declared in fitz/crypt.h:28
func FzMd5Update(state *FzMd5, input string, inlen uint) {
	cstate, _ := (*C.fz_md5)(unsafe.Pointer(state)), cgoAllocsUnknown
	input = safeString(input)
	cinput, _ := unpackPUcharString(input)
	cinlen, _ := (C.size_t)(inlen), cgoAllocsUnknown
	C.fz_md5_update(cstate, cinput, cinlen)
	runtime.KeepAlive(input)
}

// FzMd5Final function as declared in fitz/crypt.h:29
func FzMd5Final(state *FzMd5, digest *[16]byte) {
	cstate, _ := (*C.fz_md5)(unsafe.Pointer(state)), cgoAllocsUnknown
	cdigest, _ := *(**C.uchar)(unsafe.Pointer(&digest)), cgoAllocsUnknown
	C.fz_md5_final(cstate, cdigest)
}

// FzSha256Init function as declared in fitz/crypt.h:49
func FzSha256Init(state *FzSha256) {
	cstate, _ := (*C.fz_sha256)(unsafe.Pointer(state)), cgoAllocsUnknown
	C.fz_sha256_init(cstate)
}

// FzSha256Update function as declared in fitz/crypt.h:50
func FzSha256Update(state *FzSha256, input string, inlen uint) {
	cstate, _ := (*C.fz_sha256)(unsafe.Pointer(state)), cgoAllocsUnknown
	input = safeString(input)
	cinput, _ := unpackPUcharString(input)
	cinlen, _ := (C.size_t)(inlen), cgoAllocsUnknown
	C.fz_sha256_update(cstate, cinput, cinlen)
	runtime.KeepAlive(input)
}

// FzSha256Final function as declared in fitz/crypt.h:51
func FzSha256Final(state *FzSha256, digest *[32]byte) {
	cstate, _ := (*C.fz_sha256)(unsafe.Pointer(state)), cgoAllocsUnknown
	cdigest, _ := *(**C.uchar)(unsafe.Pointer(&digest)), cgoAllocsUnknown
	C.fz_sha256_final(cstate, cdigest)
}

// FzSha512Init function as declared in fitz/crypt.h:71
func FzSha512Init(state *FzSha512) {
	cstate, _ := (*C.fz_sha512)(unsafe.Pointer(state)), cgoAllocsUnknown
	C.fz_sha512_init(cstate)
}

// FzSha512Update function as declared in fitz/crypt.h:72
func FzSha512Update(state *FzSha512, input string, inlen uint) {
	cstate, _ := (*C.fz_sha512)(unsafe.Pointer(state)), cgoAllocsUnknown
	input = safeString(input)
	cinput, _ := unpackPUcharString(input)
	cinlen, _ := (C.size_t)(inlen), cgoAllocsUnknown
	C.fz_sha512_update(cstate, cinput, cinlen)
	runtime.KeepAlive(input)
}

// FzSha512Final function as declared in fitz/crypt.h:73
func FzSha512Final(state *FzSha512, digest *[64]byte) {
	cstate, _ := (*C.fz_sha512)(unsafe.Pointer(state)), cgoAllocsUnknown
	cdigest, _ := *(**C.uchar)(unsafe.Pointer(&digest)), cgoAllocsUnknown
	C.fz_sha512_final(cstate, cdigest)
}

// FzSha384Init function as declared in fitz/crypt.h:79
func FzSha384Init(state *FzSha384) {
	cstate, _ := (*C.fz_sha384)(unsafe.Pointer(state)), cgoAllocsUnknown
	C.fz_sha384_init(cstate)
}

// FzSha384Update function as declared in fitz/crypt.h:80
func FzSha384Update(state *FzSha384, input string, inlen uint) {
	cstate, _ := (*C.fz_sha384)(unsafe.Pointer(state)), cgoAllocsUnknown
	input = safeString(input)
	cinput, _ := unpackPUcharString(input)
	cinlen, _ := (C.size_t)(inlen), cgoAllocsUnknown
	C.fz_sha384_update(cstate, cinput, cinlen)
	runtime.KeepAlive(input)
}

// FzSha384Final function as declared in fitz/crypt.h:81
func FzSha384Final(state *FzSha384, digest *[64]byte) {
	cstate, _ := (*C.fz_sha384)(unsafe.Pointer(state)), cgoAllocsUnknown
	cdigest, _ := *(**C.uchar)(unsafe.Pointer(&digest)), cgoAllocsUnknown
	C.fz_sha384_final(cstate, cdigest)
}

// FzArc4Init function as declared in fitz/crypt.h:98
func FzArc4Init(state *FzArc4, key string, len uint) {
	cstate, _ := (*C.fz_arc4)(unsafe.Pointer(state)), cgoAllocsUnknown
	key = safeString(key)
	ckey, _ := unpackPUcharString(key)
	clen, _ := (C.size_t)(len), cgoAllocsUnknown
	C.fz_arc4_init(cstate, ckey, clen)
	runtime.KeepAlive(key)
}

// FzArc4Encrypt function as declared in fitz/crypt.h:99
func FzArc4Encrypt(state *FzArc4, dest *byte, src string, len uint) {
	cstate, _ := (*C.fz_arc4)(unsafe.Pointer(state)), cgoAllocsUnknown
	cdest, _ := (*C.uchar)(unsafe.Pointer(dest)), cgoAllocsUnknown
	src = safeString(src)
	csrc, _ := unpackPUcharString(src)
	clen, _ := (C.size_t)(len), cgoAllocsUnknown
	C.fz_arc4_encrypt(cstate, cdest, csrc, clen)
	runtime.KeepAlive(src)
}

// FzAesSetkeyEnc function as declared in fitz/crypt.h:119
func FzAesSetkeyEnc(ctx *FzAes, key string, keysize int32) int32 {
	cctx, _ := (*C.fz_aes)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	key = safeString(key)
	ckey, _ := unpackPUcharString(key)
	ckeysize, _ := (C.int)(keysize), cgoAllocsUnknown
	__ret := C.fz_aes_setkey_enc(cctx, ckey, ckeysize)
	runtime.KeepAlive(key)
	__v := (int32)(__ret)
	return __v
}

// FzAesSetkeyDec function as declared in fitz/crypt.h:120
func FzAesSetkeyDec(ctx *FzAes, key string, keysize int32) int32 {
	cctx, _ := (*C.fz_aes)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	key = safeString(key)
	ckey, _ := unpackPUcharString(key)
	ckeysize, _ := (C.int)(keysize), cgoAllocsUnknown
	__ret := C.fz_aes_setkey_dec(cctx, ckey, ckeysize)
	runtime.KeepAlive(key)
	__v := (int32)(__ret)
	return __v
}

// FzAesCryptCbc function as declared in fitz/crypt.h:121
func FzAesCryptCbc(ctx *FzAes, mode int32, length uint, iv *[16]byte, input string, output []byte) {
	cctx, _ := (*C.fz_aes)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cmode, _ := (C.int)(mode), cgoAllocsUnknown
	clength, _ := (C.size_t)(length), cgoAllocsUnknown
	civ, _ := *(**C.uchar)(unsafe.Pointer(&iv)), cgoAllocsUnknown
	input = safeString(input)
	cinput, _ := unpackPUcharString(input)
	coutput, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&output)).Data)), cgoAllocsUnknown
	C.fz_aes_crypt_cbc(cctx, cmode, clength, civ, cinput, coutput)
	runtime.KeepAlive(input)
}

// FzGetopt function as declared in fitz/getopt.h:7
func FzGetopt(nargc int32, nargv **byte, ostr string) int32 {
	cnargc, _ := (C.int)(nargc), cgoAllocsUnknown
	cnargv, _ := (**C.char)(unsafe.Pointer(nargv)), cgoAllocsUnknown
	ostr = safeString(ostr)
	costr, _ := unpackPCharString(ostr)
	__ret := C.fz_getopt(cnargc, cnargv, costr)
	runtime.KeepAlive(ostr)
	__v := (int32)(__ret)
	return __v
}

// FzHashFind function as declared in fitz/hash.h:27
func FzHashFind(ctx *FzContext, table *FzHashTable, key unsafe.Pointer) unsafe.Pointer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctable, _ := (*C.fz_hash_table)(unsafe.Pointer(table)), cgoAllocsUnknown
	ckey, _ := key, cgoAllocsUnknown
	__ret := C.fz_hash_find(cctx, ctable, ckey)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// FzHashInsert function as declared in fitz/hash.h:28
func FzHashInsert(ctx *FzContext, table *FzHashTable, key unsafe.Pointer, val unsafe.Pointer) unsafe.Pointer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctable, _ := (*C.fz_hash_table)(unsafe.Pointer(table)), cgoAllocsUnknown
	ckey, _ := key, cgoAllocsUnknown
	cval, _ := val, cgoAllocsUnknown
	__ret := C.fz_hash_insert(cctx, ctable, ckey, cval)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// FzHashRemove function as declared in fitz/hash.h:29
func FzHashRemove(ctx *FzContext, table *FzHashTable, key unsafe.Pointer) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctable, _ := (*C.fz_hash_table)(unsafe.Pointer(table)), cgoAllocsUnknown
	ckey, _ := key, cgoAllocsUnknown
	C.fz_hash_remove(cctx, ctable, ckey)
}

// FzStdout function as declared in fitz/output.h:113
func FzStdout(ctx *FzContext) *FzOutput {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_stdout(cctx)
	__v := *(**FzOutput)(unsafe.Pointer(&__ret))
	return __v
}

// FzStderr function as declared in fitz/output.h:120
func FzStderr(ctx *FzContext) *FzOutput {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_stderr(cctx)
	__v := *(**FzOutput)(unsafe.Pointer(&__ret))
	return __v
}

// FzSetStdout function as declared in fitz/output.h:128
func FzSetStdout(ctx *FzContext, out *FzOutput) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	C.fz_set_stdout(cctx, cout)
}

// FzSetStderr function as declared in fitz/output.h:136
func FzSetStderr(ctx *FzContext, err *FzOutput) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cerr, _ := (*C.fz_output)(unsafe.Pointer(err)), cgoAllocsUnknown
	C.fz_set_stderr(cctx, cerr)
}

// FzSeekOutput function as declared in fitz/output.h:155
func FzSeekOutput(ctx *FzContext, out *FzOutput, off int, whence int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	coff, _ := (C.int64_t)(off), cgoAllocsUnknown
	cwhence, _ := (C.int)(whence), cgoAllocsUnknown
	C.fz_seek_output(cctx, cout, coff, cwhence)
}

// FzTellOutput function as declared in fitz/output.h:162
func FzTellOutput(ctx *FzContext, out *FzOutput) int {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	__ret := C.fz_tell_output(cctx, cout)
	__v := (int)(__ret)
	return __v
}

// FzCloseOutput function as declared in fitz/output.h:167
func FzCloseOutput(arg0 *FzContext, arg1 *FzOutput) {
	carg0, _ := (*C.fz_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, _ := (*C.fz_output)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	C.fz_close_output(carg0, carg1)
}

// FzDropOutput function as declared in fitz/output.h:172
func FzDropOutput(arg0 *FzContext, arg1 *FzOutput) {
	carg0, _ := (*C.fz_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, _ := (*C.fz_output)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	C.fz_drop_output(carg0, carg1)
}

// FzWriteData function as declared in fitz/output.h:180
func FzWriteData(ctx *FzContext, out *FzOutput, data unsafe.Pointer, size uint) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cdata, _ := data, cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	C.fz_write_data(cctx, cout, cdata, csize)
}

// FzWriteString function as declared in fitz/output.h:185
func FzWriteString(ctx *FzContext, out *FzOutput, s string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	s = safeString(s)
	cs, _ := unpackPCharString(s)
	C.fz_write_string(cctx, cout, cs)
	runtime.KeepAlive(s)
}

// FzWriteInt32Be function as declared in fitz/output.h:190
func FzWriteInt32Be(ctx *FzContext, out *FzOutput, x int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cx, _ := (C.int)(x), cgoAllocsUnknown
	C.fz_write_int32_be(cctx, cout, cx)
}

// FzWriteInt32Le function as declared in fitz/output.h:195
func FzWriteInt32Le(ctx *FzContext, out *FzOutput, x int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cx, _ := (C.int)(x), cgoAllocsUnknown
	C.fz_write_int32_le(cctx, cout, cx)
}

// FzWriteInt16Be function as declared in fitz/output.h:200
func FzWriteInt16Be(ctx *FzContext, out *FzOutput, x int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cx, _ := (C.int)(x), cgoAllocsUnknown
	C.fz_write_int16_be(cctx, cout, cx)
}

// FzWriteInt16Le function as declared in fitz/output.h:205
func FzWriteInt16Le(ctx *FzContext, out *FzOutput, x int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cx, _ := (C.int)(x), cgoAllocsUnknown
	C.fz_write_int16_le(cctx, cout, cx)
}

// FzWriteByte function as declared in fitz/output.h:210
func FzWriteByte(ctx *FzContext, out *FzOutput, x byte) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cx, _ := (C.uchar)(x), cgoAllocsUnknown
	C.fz_write_byte(cctx, cout, cx)
}

// FzWriteRune function as declared in fitz/output.h:215
func FzWriteRune(ctx *FzContext, out *FzOutput, rune int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	crune, _ := (C.int)(rune), cgoAllocsUnknown
	C.fz_write_rune(cctx, cout, crune)
}

// FzWriteBase64 function as declared in fitz/output.h:220
func FzWriteBase64(ctx *FzContext, out *FzOutput, data string, size int32, newline int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.int)(size), cgoAllocsUnknown
	cnewline, _ := (C.int)(newline), cgoAllocsUnknown
	C.fz_write_base64(cctx, cout, cdata, csize, cnewline)
	runtime.KeepAlive(data)
}

// FzWriteBase64Buffer function as declared in fitz/output.h:221
func FzWriteBase64Buffer(ctx *FzContext, out *FzOutput, data []FzBuffer, newline int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cdata, _ := (*C.fz_buffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&data)).Data)), cgoAllocsUnknown
	cnewline, _ := (C.int)(newline), cgoAllocsUnknown
	C.fz_write_base64_buffer(cctx, cout, cdata, cnewline)
}

// FzTempfilename function as declared in fitz/output.h:266
func FzTempfilename(ctx *FzContext, base string, hint string) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	base = safeString(base)
	cbase, _ := unpackPCharString(base)
	hint = safeString(hint)
	chint, _ := unpackPCharString(hint)
	__ret := C.fz_tempfilename(cctx, cbase, chint)
	runtime.KeepAlive(hint)
	runtime.KeepAlive(base)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// FzSaveBuffer function as declared in fitz/output.h:271
func FzSaveBuffer(ctx *FzContext, buf *FzBuffer, filename string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	C.fz_save_buffer(cctx, cbuf, cfilename)
	runtime.KeepAlive(filename)
}

// FzKeepBuffer function as declared in fitz/buffer.h:20
func FzKeepBuffer(ctx *FzContext, buf *FzBuffer) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	__ret := C.fz_keep_buffer(cctx, cbuf)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropBuffer function as declared in fitz/buffer.h:25
func FzDropBuffer(ctx *FzContext, buf *FzBuffer) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	C.fz_drop_buffer(cctx, cbuf)
}

// FzBufferStorage function as declared in fitz/buffer.h:34
func FzBufferStorage(ctx *FzContext, buf *FzBuffer, datap [][]byte) uint {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	cdatap, _ := unpackArgSSByte(datap)
	__ret := C.fz_buffer_storage(cctx, cbuf, cdatap)
	packSSByte(datap, cdatap)
	__v := (uint)(__ret)
	return __v
}

// FzStringFromBuffer function as declared in fitz/buffer.h:40
func FzStringFromBuffer(ctx *FzContext, buf *FzBuffer) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	__ret := C.fz_string_from_buffer(cctx, cbuf)
	__v := packPCharString(__ret)
	return __v
}

// FzNewBuffer function as declared in fitz/buffer.h:49
func FzNewBuffer(ctx *FzContext, capacity uint) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccapacity, _ := (C.size_t)(capacity), cgoAllocsUnknown
	__ret := C.fz_new_buffer(cctx, ccapacity)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewBufferFromData function as declared in fitz/buffer.h:64
func FzNewBufferFromData(ctx *FzContext, data *byte, size uint) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdata, _ := (*C.uchar)(unsafe.Pointer(data)), cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fz_new_buffer_from_data(cctx, cdata, csize)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewBufferFromSharedData function as declared in fitz/buffer.h:69
func FzNewBufferFromSharedData(ctx *FzContext, data string, size uint) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fz_new_buffer_from_shared_data(cctx, cdata, csize)
	runtime.KeepAlive(data)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewBufferFromCopiedData function as declared in fitz/buffer.h:74
func FzNewBufferFromCopiedData(ctx *FzContext, data string, size uint) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fz_new_buffer_from_copied_data(cctx, cdata, csize)
	runtime.KeepAlive(data)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewBufferFromBase64 function as declared in fitz/buffer.h:80
func FzNewBufferFromBase64(ctx *FzContext, data string, size uint) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPCharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fz_new_buffer_from_base64(cctx, cdata, csize)
	runtime.KeepAlive(data)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// FzResizeBuffer function as declared in fitz/buffer.h:89
func FzResizeBuffer(ctx *FzContext, buf *FzBuffer, capacity uint) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	ccapacity, _ := (C.size_t)(capacity), cgoAllocsUnknown
	C.fz_resize_buffer(cctx, cbuf, ccapacity)
}

// FzGrowBuffer function as declared in fitz/buffer.h:95
func FzGrowBuffer(ctx *FzContext, buf *FzBuffer) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	C.fz_grow_buffer(cctx, cbuf)
}

// FzTrimBuffer function as declared in fitz/buffer.h:100
func FzTrimBuffer(ctx *FzContext, buf *FzBuffer) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	C.fz_trim_buffer(cctx, cbuf)
}

// FzAppendBuffer function as declared in fitz/buffer.h:105
func FzAppendBuffer(ctx *FzContext, destination *FzBuffer, source []FzBuffer) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdestination, _ := (*C.fz_buffer)(unsafe.Pointer(destination)), cgoAllocsUnknown
	csource, _ := (*C.fz_buffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&source)).Data)), cgoAllocsUnknown
	C.fz_append_buffer(cctx, cdestination, csource)
}

// FzAppendData function as declared in fitz/buffer.h:113
func FzAppendData(ctx *FzContext, buf *FzBuffer, data unsafe.Pointer, len uint) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	cdata, _ := data, cgoAllocsUnknown
	clen, _ := (C.size_t)(len), cgoAllocsUnknown
	C.fz_append_data(cctx, cbuf, cdata, clen)
}

// FzAppendString function as declared in fitz/buffer.h:114
func FzAppendString(ctx *FzContext, buf *FzBuffer, data string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPCharString(data)
	C.fz_append_string(cctx, cbuf, cdata)
	runtime.KeepAlive(data)
}

// FzAppendByte function as declared in fitz/buffer.h:115
func FzAppendByte(ctx *FzContext, buf *FzBuffer, c int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	cc, _ := (C.int)(c), cgoAllocsUnknown
	C.fz_append_byte(cctx, cbuf, cc)
}

// FzAppendRune function as declared in fitz/buffer.h:116
func FzAppendRune(ctx *FzContext, buf *FzBuffer, c int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	cc, _ := (C.int)(c), cgoAllocsUnknown
	C.fz_append_rune(cctx, cbuf, cc)
}

// FzAppendInt32Le function as declared in fitz/buffer.h:117
func FzAppendInt32Le(ctx *FzContext, buf *FzBuffer, x int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	cx, _ := (C.int)(x), cgoAllocsUnknown
	C.fz_append_int32_le(cctx, cbuf, cx)
}

// FzAppendInt16Le function as declared in fitz/buffer.h:118
func FzAppendInt16Le(ctx *FzContext, buf *FzBuffer, x int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	cx, _ := (C.int)(x), cgoAllocsUnknown
	C.fz_append_int16_le(cctx, cbuf, cx)
}

// FzAppendInt32Be function as declared in fitz/buffer.h:119
func FzAppendInt32Be(ctx *FzContext, buf *FzBuffer, x int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	cx, _ := (C.int)(x), cgoAllocsUnknown
	C.fz_append_int32_be(cctx, cbuf, cx)
}

// FzAppendInt16Be function as declared in fitz/buffer.h:120
func FzAppendInt16Be(ctx *FzContext, buf *FzBuffer, x int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	cx, _ := (C.int)(x), cgoAllocsUnknown
	C.fz_append_int16_be(cctx, cbuf, cx)
}

// FzAppendBits function as declared in fitz/buffer.h:121
func FzAppendBits(ctx *FzContext, buf *FzBuffer, value int32, count int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	cvalue, _ := (C.int)(value), cgoAllocsUnknown
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	C.fz_append_bits(cctx, cbuf, cvalue, ccount)
}

// FzAppendBitsPad function as declared in fitz/buffer.h:122
func FzAppendBitsPad(ctx *FzContext, buf *FzBuffer) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	C.fz_append_bits_pad(cctx, cbuf)
}

// FzAppendPDFString function as declared in fitz/buffer.h:125
func FzAppendPDFString(ctx *FzContext, buffer *FzBuffer, text string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuffer, _ := (*C.fz_buffer)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	C.fz_append_pdf_string(cctx, cbuffer, ctext)
	runtime.KeepAlive(text)
}

// FzTerminateBuffer function as declared in fitz/buffer.h:133
func FzTerminateBuffer(ctx *FzContext, buf *FzBuffer) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	C.fz_terminate_buffer(cctx, cbuf)
}

// FzMd5Buffer function as declared in fitz/buffer.h:138
func FzMd5Buffer(ctx *FzContext, buffer *FzBuffer, digest *[16]byte) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuffer, _ := (*C.fz_buffer)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	cdigest, _ := *(**C.uchar)(unsafe.Pointer(&digest)), cgoAllocsUnknown
	C.fz_md5_buffer(cctx, cbuffer, cdigest)
}

// FzBufferExtract function as declared in fitz/buffer.h:153
func FzBufferExtract(ctx *FzContext, buf *FzBuffer, data [][]byte) uint {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	cdata, _ := unpackArgSSByte(data)
	__ret := C.fz_buffer_extract(cctx, cbuf, cdata)
	packSSByte(data, cdata)
	__v := (uint)(__ret)
	return __v
}

// FzStrsep function as declared in fitz/string-util.h:27
func FzStrsep(stringp **byte, delim string) *byte {
	cstringp, _ := (**C.char)(unsafe.Pointer(stringp)), cgoAllocsUnknown
	delim = safeString(delim)
	cdelim, _ := unpackPCharString(delim)
	__ret := C.fz_strsep(cstringp, cdelim)
	runtime.KeepAlive(delim)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// FzStrlcpy function as declared in fitz/string-util.h:42
func FzStrlcpy(dst *byte, src string, n uint) uint {
	cdst, _ := (*C.char)(unsafe.Pointer(dst)), cgoAllocsUnknown
	src = safeString(src)
	csrc, _ := unpackPCharString(src)
	cn, _ := (C.size_t)(n), cgoAllocsUnknown
	__ret := C.fz_strlcpy(cdst, csrc, cn)
	runtime.KeepAlive(src)
	__v := (uint)(__ret)
	return __v
}

// FzStrlcat function as declared in fitz/string-util.h:56
func FzStrlcat(dst *byte, src string, n uint) uint {
	cdst, _ := (*C.char)(unsafe.Pointer(dst)), cgoAllocsUnknown
	src = safeString(src)
	csrc, _ := unpackPCharString(src)
	cn, _ := (C.size_t)(n), cgoAllocsUnknown
	__ret := C.fz_strlcat(cdst, csrc, cn)
	runtime.KeepAlive(src)
	__v := (uint)(__ret)
	return __v
}

// FzDirname function as declared in fitz/string-util.h:61
func FzDirname(dir *byte, path string, dirsize uint) {
	cdir, _ := (*C.char)(unsafe.Pointer(dir)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	cdirsize, _ := (C.size_t)(dirsize), cgoAllocsUnknown
	C.fz_dirname(cdir, cpath, cdirsize)
	runtime.KeepAlive(path)
}

// FzUrldecode function as declared in fitz/string-util.h:66
func FzUrldecode(url *byte) *byte {
	curl, _ := (*C.char)(unsafe.Pointer(url)), cgoAllocsUnknown
	__ret := C.fz_urldecode(curl)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// FzFormatOutputPath function as declared in fitz/string-util.h:75
func FzFormatOutputPath(ctx *FzContext, path *byte, size uint, fmt string, page int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpath, _ := (*C.char)(unsafe.Pointer(path)), cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	fmt = safeString(fmt)
	cfmt, _ := unpackPCharString(fmt)
	cpage, _ := (C.int)(page), cgoAllocsUnknown
	C.fz_format_output_path(cctx, cpath, csize, cfmt, cpage)
	runtime.KeepAlive(fmt)
}

// FzCleanname function as declared in fitz/string-util.h:83
func FzCleanname(name *byte) *byte {
	cname, _ := (*C.char)(unsafe.Pointer(name)), cgoAllocsUnknown
	__ret := C.fz_cleanname(cname)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// FzStrcasecmp function as declared in fitz/string-util.h:88
func FzStrcasecmp(a string, b string) int32 {
	a = safeString(a)
	ca, _ := unpackPCharString(a)
	b = safeString(b)
	cb, _ := unpackPCharString(b)
	__ret := C.fz_strcasecmp(ca, cb)
	runtime.KeepAlive(b)
	runtime.KeepAlive(a)
	__v := (int32)(__ret)
	return __v
}

// FzChartorune function as declared in fitz/string-util.h:104
func FzChartorune(rune *int32, str string) int32 {
	crune, _ := (*C.int)(unsafe.Pointer(rune)), cgoAllocsUnknown
	str = safeString(str)
	cstr, _ := unpackPCharString(str)
	__ret := C.fz_chartorune(crune, cstr)
	runtime.KeepAlive(str)
	__v := (int32)(__ret)
	return __v
}

// FzRunetochar function as declared in fitz/string-util.h:115
func FzRunetochar(str *byte, rune int32) int32 {
	cstr, _ := (*C.char)(unsafe.Pointer(str)), cgoAllocsUnknown
	crune, _ := (C.int)(rune), cgoAllocsUnknown
	__ret := C.fz_runetochar(cstr, crune)
	__v := (int32)(__ret)
	return __v
}

// FzRunelen function as declared in fitz/string-util.h:124
func FzRunelen(rune int32) int32 {
	crune, _ := (C.int)(rune), cgoAllocsUnknown
	__ret := C.fz_runelen(crune)
	__v := (int32)(__ret)
	return __v
}

// FzUtflen function as declared in fitz/string-util.h:134
func FzUtflen(s string) int32 {
	s = safeString(s)
	cs, _ := unpackPCharString(s)
	__ret := C.fz_utflen(cs)
	runtime.KeepAlive(s)
	__v := (int32)(__ret)
	return __v
}

// FzStrtof function as declared in fitz/string-util.h:142
func FzStrtof(s string, es **byte) float32 {
	s = safeString(s)
	cs, _ := unpackPCharString(s)
	ces, _ := (**C.char)(unsafe.Pointer(es)), cgoAllocsUnknown
	__ret := C.fz_strtof(cs, ces)
	runtime.KeepAlive(s)
	__v := (float32)(__ret)
	return __v
}

// FzStrtofNoExp function as declared in fitz/string-util.h:150
func FzStrtofNoExp(string string, tailptr **byte) float32 {
	string = safeString(string)
	cstring, _ := unpackPCharString(string)
	ctailptr, _ := (**C.char)(unsafe.Pointer(tailptr)), cgoAllocsUnknown
	__ret := C.fz_strtof_no_exp(cstring, ctailptr)
	runtime.KeepAlive(string)
	__v := (float32)(__ret)
	return __v
}

// FzGrisu function as declared in fitz/string-util.h:157
func FzGrisu(f float32, s *byte, exp []int32) int32 {
	cf, _ := (C.float)(f), cgoAllocsUnknown
	cs, _ := (*C.char)(unsafe.Pointer(s)), cgoAllocsUnknown
	cexp, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&exp)).Data)), cgoAllocsUnknown
	__ret := C.fz_grisu(cf, cs, cexp)
	__v := (int32)(__ret)
	return __v
}

// FzIsPageRange function as declared in fitz/string-util.h:163
func FzIsPageRange(ctx *FzContext, s string) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	s = safeString(s)
	cs, _ := unpackPCharString(s)
	__ret := C.fz_is_page_range(cctx, cs)
	runtime.KeepAlive(s)
	__v := (int32)(__ret)
	return __v
}

// FzParsePageRange function as declared in fitz/string-util.h:164
func FzParsePageRange(ctx *FzContext, s string, a []int32, b []int32, n int32) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	s = safeString(s)
	cs, _ := unpackPCharString(s)
	ca, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&a)).Data)), cgoAllocsUnknown
	cb, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&b)).Data)), cgoAllocsUnknown
	cn, _ := (C.int)(n), cgoAllocsUnknown
	__ret := C.fz_parse_page_range(cctx, cs, ca, cb, cn)
	runtime.KeepAlive(s)
	__v := packPCharString(__ret)
	return __v
}

// FzNewPool function as declared in fitz/pool.h:9
func FzNewPool(ctx *FzContext) *FzPool {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_new_pool(cctx)
	__v := *(**FzPool)(unsafe.Pointer(&__ret))
	return __v
}

// FzPoolAlloc function as declared in fitz/pool.h:10
func FzPoolAlloc(ctx *FzContext, pool *FzPool, size uint) unsafe.Pointer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpool, _ := (*C.fz_pool)(unsafe.Pointer(pool)), cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fz_pool_alloc(cctx, cpool, csize)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// FzPoolStrdup function as declared in fitz/pool.h:11
func FzPoolStrdup(ctx *FzContext, pool *FzPool, s string) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpool, _ := (*C.fz_pool)(unsafe.Pointer(pool)), cgoAllocsUnknown
	s = safeString(s)
	cs, _ := unpackPCharString(s)
	__ret := C.fz_pool_strdup(cctx, cpool, cs)
	runtime.KeepAlive(s)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropPool function as declared in fitz/pool.h:12
func FzDropPool(ctx *FzContext, pool *FzPool) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpool, _ := (*C.fz_pool)(unsafe.Pointer(pool)), cgoAllocsUnknown
	C.fz_drop_pool(cctx, cpool)
}

// FzTreeLookup function as declared in fitz/tree.h:13
func FzTreeLookup(ctx *FzContext, node *FzTree, key string) unsafe.Pointer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cnode, _ := (*C.fz_tree)(unsafe.Pointer(node)), cgoAllocsUnknown
	key = safeString(key)
	ckey, _ := unpackPCharString(key)
	__ret := C.fz_tree_lookup(cctx, cnode, ckey)
	runtime.KeepAlive(key)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// FzTreeInsert function as declared in fitz/tree.h:20
func FzTreeInsert(ctx *FzContext, root *FzTree, key string, value unsafe.Pointer) *FzTree {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	croot, _ := (*C.fz_tree)(unsafe.Pointer(root)), cgoAllocsUnknown
	key = safeString(key)
	ckey, _ := unpackPCharString(key)
	cvalue, _ := value, cgoAllocsUnknown
	__ret := C.fz_tree_insert(cctx, croot, ckey, cvalue)
	runtime.KeepAlive(key)
	__v := *(**FzTree)(unsafe.Pointer(&__ret))
	return __v
}

// FzParseXml function as declared in fitz/xml.h:18
func FzParseXml(ctx *FzContext, buf *FzBuffer, preserveWhite int32) *FzXml {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	cpreserveWhite, _ := (C.int)(preserveWhite), cgoAllocsUnknown
	__ret := C.fz_parse_xml(cctx, cbuf, cpreserveWhite)
	__v := *(**FzXml)(unsafe.Pointer(&__ret))
	return __v
}

// FzXmlPrev function as declared in fitz/xml.h:23
func FzXmlPrev(item *FzXml) *FzXml {
	citem, _ := (*C.fz_xml)(unsafe.Pointer(item)), cgoAllocsUnknown
	__ret := C.fz_xml_prev(citem)
	__v := *(**FzXml)(unsafe.Pointer(&__ret))
	return __v
}

// FzXmlNext function as declared in fitz/xml.h:28
func FzXmlNext(item *FzXml) *FzXml {
	citem, _ := (*C.fz_xml)(unsafe.Pointer(item)), cgoAllocsUnknown
	__ret := C.fz_xml_next(citem)
	__v := *(**FzXml)(unsafe.Pointer(&__ret))
	return __v
}

// FzXmlUp function as declared in fitz/xml.h:33
func FzXmlUp(item *FzXml) *FzXml {
	citem, _ := (*C.fz_xml)(unsafe.Pointer(item)), cgoAllocsUnknown
	__ret := C.fz_xml_up(citem)
	__v := *(**FzXml)(unsafe.Pointer(&__ret))
	return __v
}

// FzXmlDown function as declared in fitz/xml.h:38
func FzXmlDown(item *FzXml) *FzXml {
	citem, _ := (*C.fz_xml)(unsafe.Pointer(item)), cgoAllocsUnknown
	__ret := C.fz_xml_down(citem)
	__v := *(**FzXml)(unsafe.Pointer(&__ret))
	return __v
}

// FzXmlIsTag function as declared in fitz/xml.h:43
func FzXmlIsTag(item *FzXml, name string) int32 {
	citem, _ := (*C.fz_xml)(unsafe.Pointer(item)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	__ret := C.fz_xml_is_tag(citem, cname)
	runtime.KeepAlive(name)
	__v := (int32)(__ret)
	return __v
}

// FzXmlTag function as declared in fitz/xml.h:48
func FzXmlTag(item *FzXml) *byte {
	citem, _ := (*C.fz_xml)(unsafe.Pointer(item)), cgoAllocsUnknown
	__ret := C.fz_xml_tag(citem)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// FzXmlAtt function as declared in fitz/xml.h:54
func FzXmlAtt(item *FzXml, att string) *byte {
	citem, _ := (*C.fz_xml)(unsafe.Pointer(item)), cgoAllocsUnknown
	att = safeString(att)
	catt, _ := unpackPCharString(att)
	__ret := C.fz_xml_att(citem, catt)
	runtime.KeepAlive(att)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// FzXmlText function as declared in fitz/xml.h:60
func FzXmlText(item *FzXml) *byte {
	citem, _ := (*C.fz_xml)(unsafe.Pointer(item)), cgoAllocsUnknown
	__ret := C.fz_xml_text(citem)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropXml function as declared in fitz/xml.h:65
func FzDropXml(doc *FzContext, item *FzXml) {
	cdoc, _ := (*C.fz_context)(unsafe.Pointer(doc)), cgoAllocsUnknown
	citem, _ := (*C.fz_xml)(unsafe.Pointer(item)), cgoAllocsUnknown
	C.fz_drop_xml(cdoc, citem)
}

// FzDetachXml function as declared in fitz/xml.h:70
func FzDetachXml(node *FzXml) {
	cnode, _ := (*C.fz_xml)(unsafe.Pointer(node)), cgoAllocsUnknown
	C.fz_detach_xml(cnode)
}

// FzDebugXml function as declared in fitz/xml.h:75
//func FzDebugXml(item *FzXml, level int32) {
//	citem, _ := (*C.fz_xml)(unsafe.Pointer(item)), cgoAllocsUnknown
//	clevel, _ := (C.int)(level), cgoAllocsUnknown
//	C.fz_debug_xml(citem, clevel)
//}

// FzXmlFind function as declared in fitz/xml.h:77
func FzXmlFind(item *FzXml, tag string) *FzXml {
	citem, _ := (*C.fz_xml)(unsafe.Pointer(item)), cgoAllocsUnknown
	tag = safeString(tag)
	ctag, _ := unpackPCharString(tag)
	__ret := C.fz_xml_find(citem, ctag)
	runtime.KeepAlive(tag)
	__v := *(**FzXml)(unsafe.Pointer(&__ret))
	return __v
}

// FzXmlFindNext function as declared in fitz/xml.h:78
func FzXmlFindNext(item *FzXml, tag string) *FzXml {
	citem, _ := (*C.fz_xml)(unsafe.Pointer(item)), cgoAllocsUnknown
	tag = safeString(tag)
	ctag, _ := unpackPCharString(tag)
	__ret := C.fz_xml_find_next(citem, ctag)
	runtime.KeepAlive(tag)
	__v := *(**FzXml)(unsafe.Pointer(&__ret))
	return __v
}

// FzXmlFindDown function as declared in fitz/xml.h:79
func FzXmlFindDown(item *FzXml, tag string) *FzXml {
	citem, _ := (*C.fz_xml)(unsafe.Pointer(item)), cgoAllocsUnknown
	tag = safeString(tag)
	ctag, _ := unpackPCharString(tag)
	__ret := C.fz_xml_find_down(citem, ctag)
	runtime.KeepAlive(tag)
	__v := *(**FzXml)(unsafe.Pointer(&__ret))
	return __v
}

// FzFileExists function as declared in fitz/stream.h:11
func FzFileExists(ctx *FzContext, path string) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	__ret := C.fz_file_exists(cctx, cpath)
	runtime.KeepAlive(path)
	__v := (int32)(__ret)
	return __v
}

// FzOpenFile function as declared in fitz/stream.h:34
func FzOpenFile(ctx *FzContext, filename string) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	__ret := C.fz_open_file(cctx, cfilename)
	runtime.KeepAlive(filename)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenFileProgressive function as declared in fitz/stream.h:36
func FzOpenFileProgressive(ctx *FzContext, filename string, bps int32) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	cbps, _ := (C.int)(bps), cgoAllocsUnknown
	__ret := C.fz_open_file_progressive(cctx, cfilename, cbps)
	runtime.KeepAlive(filename)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenMemory function as declared in fitz/stream.h:59
func FzOpenMemory(ctx *FzContext, data string, len uint) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPUcharString(data)
	clen, _ := (C.size_t)(len), cgoAllocsUnknown
	__ret := C.fz_open_memory(cctx, cdata, clen)
	runtime.KeepAlive(data)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenBuffer function as declared in fitz/stream.h:70
func FzOpenBuffer(ctx *FzContext, buf *FzBuffer) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	__ret := C.fz_open_buffer(cctx, cbuf)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenLeecher function as declared in fitz/stream.h:84
func FzOpenLeecher(ctx *FzContext, chain *FzStream, buf []FzBuffer) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer(chain)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buf)).Data)), cgoAllocsUnknown
	__ret := C.fz_open_leecher(cctx, cchain, cbuf)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropStream function as declared in fitz/stream.h:93
func FzDropStream(ctx *FzContext, stm *FzStream) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	C.fz_drop_stream(cctx, cstm)
}

// FzTell function as declared in fitz/stream.h:98
func FzTell(ctx *FzContext, stm *FzStream) int {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	__ret := C.fz_tell(cctx, cstm)
	__v := (int)(__ret)
	return __v
}

// FzSeek function as declared in fitz/stream.h:109
func FzSeek(ctx *FzContext, stm *FzStream, offset int, whence int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	coffset, _ := (C.int64_t)(offset), cgoAllocsUnknown
	cwhence, _ := (C.int)(whence), cgoAllocsUnknown
	C.fz_seek(cctx, cstm, coffset, cwhence)
}

// FzRead function as declared in fitz/stream.h:122
func FzRead(ctx *FzContext, stm *FzStream, data []byte, len uint) uint {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	cdata, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&data)).Data)), cgoAllocsUnknown
	clen, _ := (C.size_t)(len), cgoAllocsUnknown
	__ret := C.fz_read(cctx, cstm, cdata, clen)
	__v := (uint)(__ret)
	return __v
}

// FzSkip function as declared in fitz/stream.h:133
func FzSkip(ctx *FzContext, stm *FzStream, len uint) uint {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	clen, _ := (C.size_t)(len), cgoAllocsUnknown
	__ret := C.fz_skip(cctx, cstm, clen)
	__v := (uint)(__ret)
	return __v
}

// FzReadAll function as declared in fitz/stream.h:145
func FzReadAll(ctx *FzContext, stm *FzStream, initial uint) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	cinitial, _ := (C.size_t)(initial), cgoAllocsUnknown
	__ret := C.fz_read_all(cctx, cstm, cinitial)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// FzReadFile function as declared in fitz/stream.h:150
func FzReadFile(ctx *FzContext, filename string) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	__ret := C.fz_read_file(cctx, cfilename)
	runtime.KeepAlive(filename)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// FzReadUint16 function as declared in fitz/stream.h:160
func FzReadUint16(ctx *FzContext, stm *FzStream) uint16 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	__ret := C.fz_read_uint16(cctx, cstm)
	__v := (uint16)(__ret)
	return __v
}

// FzReadUint24 function as declared in fitz/stream.h:161
func FzReadUint24(ctx *FzContext, stm *FzStream) uint32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	__ret := C.fz_read_uint24(cctx, cstm)
	__v := (uint32)(__ret)
	return __v
}

// FzReadUint32 function as declared in fitz/stream.h:162
func FzReadUint32(ctx *FzContext, stm *FzStream) uint32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	__ret := C.fz_read_uint32(cctx, cstm)
	__v := (uint32)(__ret)
	return __v
}

// FzReadUint64 function as declared in fitz/stream.h:163
func FzReadUint64(ctx *FzContext, stm *FzStream) uint {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	__ret := C.fz_read_uint64(cctx, cstm)
	__v := (uint)(__ret)
	return __v
}

// FzReadUint16Le function as declared in fitz/stream.h:165
func FzReadUint16Le(ctx *FzContext, stm *FzStream) uint16 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	__ret := C.fz_read_uint16_le(cctx, cstm)
	__v := (uint16)(__ret)
	return __v
}

// FzReadUint24Le function as declared in fitz/stream.h:166
func FzReadUint24Le(ctx *FzContext, stm *FzStream) uint32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	__ret := C.fz_read_uint24_le(cctx, cstm)
	__v := (uint32)(__ret)
	return __v
}

// FzReadUint32Le function as declared in fitz/stream.h:167
func FzReadUint32Le(ctx *FzContext, stm *FzStream) uint32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	__ret := C.fz_read_uint32_le(cctx, cstm)
	__v := (uint32)(__ret)
	return __v
}

// FzReadUint64Le function as declared in fitz/stream.h:168
func FzReadUint64Le(ctx *FzContext, stm *FzStream) uint {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	__ret := C.fz_read_uint64_le(cctx, cstm)
	__v := (uint)(__ret)
	return __v
}

// FzReadInt16 function as declared in fitz/stream.h:170
func FzReadInt16(ctx *FzContext, stm *FzStream) int16 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	__ret := C.fz_read_int16(cctx, cstm)
	__v := (int16)(__ret)
	return __v
}

// FzReadInt32 function as declared in fitz/stream.h:171
func FzReadInt32(ctx *FzContext, stm *FzStream) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	__ret := C.fz_read_int32(cctx, cstm)
	__v := (int32)(__ret)
	return __v
}

// FzReadInt64 function as declared in fitz/stream.h:172
func FzReadInt64(ctx *FzContext, stm *FzStream) int {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	__ret := C.fz_read_int64(cctx, cstm)
	__v := (int)(__ret)
	return __v
}

// FzReadInt16Le function as declared in fitz/stream.h:174
func FzReadInt16Le(ctx *FzContext, stm *FzStream) int16 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	__ret := C.fz_read_int16_le(cctx, cstm)
	__v := (int16)(__ret)
	return __v
}

// FzReadInt32Le function as declared in fitz/stream.h:175
func FzReadInt32Le(ctx *FzContext, stm *FzStream) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	__ret := C.fz_read_int32_le(cctx, cstm)
	__v := (int32)(__ret)
	return __v
}

// FzReadInt64Le function as declared in fitz/stream.h:176
func FzReadInt64Le(ctx *FzContext, stm *FzStream) int {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	__ret := C.fz_read_int64_le(cctx, cstm)
	__v := (int)(__ret)
	return __v
}

// FzReadString function as declared in fitz/stream.h:184
func FzReadString(ctx *FzContext, stm *FzStream, buffer []byte, len int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	cbuffer, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buffer)).Data)), cgoAllocsUnknown
	clen, _ := (C.int)(len), cgoAllocsUnknown
	C.fz_read_string(cctx, cstm, cbuffer, clen)
}

// FzStreamMeta function as declared in fitz/stream.h:209
func FzStreamMeta(ctx *FzContext, stm *FzStream, key int32, size int32, ptr unsafe.Pointer) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	ckey, _ := (C.int)(key), cgoAllocsUnknown
	csize, _ := (C.int)(size), cgoAllocsUnknown
	cptr, _ := ptr, cgoAllocsUnknown
	__ret := C.fz_stream_meta(cctx, cstm, ckey, csize, cptr)
	__v := (int32)(__ret)
	return __v
}

// FzKeepStream function as declared in fitz/stream.h:290
func FzKeepStream(ctx *FzContext, stm *FzStream) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	__ret := C.fz_keep_stream(cctx, cstm)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzReadBest function as declared in fitz/stream.h:305
func FzReadBest(ctx *FzContext, stm *FzStream, initial uint, truncated []int32) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	cinitial, _ := (C.size_t)(initial), cgoAllocsUnknown
	ctruncated, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&truncated)).Data)), cgoAllocsUnknown
	__ret := C.fz_read_best(cctx, cstm, cinitial, ctruncated)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// FzReadLine function as declared in fitz/stream.h:314
func FzReadLine(ctx *FzContext, stm *FzStream, buf []byte, max uint) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	cbuf, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buf)).Data)), cgoAllocsUnknown
	cmax, _ := (C.size_t)(max), cgoAllocsUnknown
	__ret := C.fz_read_line(cctx, cstm, cbuf, cmax)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// FzAvailable function as declared in fitz/stream.h:331
func FzAvailable(ctx *FzContext, stm *FzStream, max uint) uint {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	cmax, _ := (C.size_t)(max), cgoAllocsUnknown
	__ret := C.fz_available(cctx, cstm, cmax)
	__v := (uint)(__ret)
	return __v
}

// FzReadByte function as declared in fitz/stream.h:366
func FzReadByte(ctx *FzContext, stm *FzStream) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	__ret := C.fz_read_byte(cctx, cstm)
	__v := (int32)(__ret)
	return __v
}

// FzPeekByte function as declared in fitz/stream.h:395
func FzPeekByte(ctx *FzContext, stm *FzStream) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	__ret := C.fz_peek_byte(cctx, cstm)
	__v := (int32)(__ret)
	return __v
}

// FzUnreadByte function as declared in fitz/stream.h:415
func FzUnreadByte(ctx *FzContext, stm *FzStream) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	C.fz_unread_byte(cctx, cstm)
}

// FzIsEof function as declared in fitz/stream.h:420
func FzIsEof(ctx *FzContext, stm *FzStream) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	__ret := C.fz_is_eof(cctx, cstm)
	__v := (int32)(__ret)
	return __v
}

// FzReadBits function as declared in fitz/stream.h:442
func FzReadBits(ctx *FzContext, stm *FzStream, n int32) uint32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	cn, _ := (C.int)(n), cgoAllocsUnknown
	__ret := C.fz_read_bits(cctx, cstm, cn)
	__v := (uint32)(__ret)
	return __v
}

// FzReadRbits function as declared in fitz/stream.h:485
func FzReadRbits(ctx *FzContext, stm *FzStream, n int32) uint32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	cn, _ := (C.int)(n), cgoAllocsUnknown
	__ret := C.fz_read_rbits(cctx, cstm, cn)
	__v := (uint32)(__ret)
	return __v
}

// FzSyncBits function as declared in fitz/stream.h:528
func FzSyncBits(ctx *FzContext, stm *FzStream) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	C.fz_sync_bits(cctx, cstm)
}

// FzIsEofBits function as declared in fitz/stream.h:533
func FzIsEofBits(ctx *FzContext, stm *FzStream) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	__ret := C.fz_is_eof_bits(cctx, cstm)
	__v := (int32)(__ret)
	return __v
}

// FzDeflateBound function as declared in fitz/compress.h:18
func FzDeflateBound(ctx *FzContext, size uint) uint {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fz_deflate_bound(cctx, csize)
	__v := (uint)(__ret)
	return __v
}

// FzDeflate function as declared in fitz/compress.h:26
func FzDeflate(ctx *FzContext, dest *byte, compressedLength []uint, source string, sourceLength uint, level FzDeflateLevel) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdest, _ := (*C.uchar)(unsafe.Pointer(dest)), cgoAllocsUnknown
	ccompressedLength, _ := (*C.size_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&compressedLength)).Data)), cgoAllocsUnknown
	source = safeString(source)
	csource, _ := unpackPUcharString(source)
	csourceLength, _ := (C.size_t)(sourceLength), cgoAllocsUnknown
	clevel, _ := (C.fz_deflate_level)(level), cgoAllocsUnknown
	C.fz_deflate(cctx, cdest, ccompressedLength, csource, csourceLength, clevel)
	runtime.KeepAlive(source)
}

// FzNewDeflatedData function as declared in fitz/compress.h:37
func FzNewDeflatedData(ctx *FzContext, compressedLength *uint, source string, sourceLength uint, level FzDeflateLevel) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccompressedLength, _ := (*C.size_t)(unsafe.Pointer(compressedLength)), cgoAllocsUnknown
	source = safeString(source)
	csource, _ := unpackPUcharString(source)
	csourceLength, _ := (C.size_t)(sourceLength), cgoAllocsUnknown
	clevel, _ := (C.fz_deflate_level)(level), cgoAllocsUnknown
	__ret := C.fz_new_deflated_data(cctx, ccompressedLength, csource, csourceLength, clevel)
	runtime.KeepAlive(source)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewDeflatedDataFromBuffer function as declared in fitz/compress.h:48
func FzNewDeflatedDataFromBuffer(ctx *FzContext, compressedLength *uint, buffer []FzBuffer, level FzDeflateLevel) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccompressedLength, _ := (*C.size_t)(unsafe.Pointer(compressedLength)), cgoAllocsUnknown
	cbuffer, _ := (*C.fz_buffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buffer)).Data)), cgoAllocsUnknown
	clevel, _ := (C.fz_deflate_level)(level), cgoAllocsUnknown
	__ret := C.fz_new_deflated_data_from_buffer(cctx, ccompressedLength, cbuffer, clevel)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// FzCompressedBufferSize function as declared in fitz/compressed-buffer.h:12
func FzCompressedBufferSize(buffer *FzCompressedBuffer) uint {
	cbuffer, _ := (*C.fz_compressed_buffer)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	__ret := C.fz_compressed_buffer_size(cbuffer)
	__v := (uint)(__ret)
	return __v
}

// FzOpenCompressedBuffer function as declared in fitz/compressed-buffer.h:14
func FzOpenCompressedBuffer(ctx *FzContext, arg1 *FzCompressedBuffer) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carg1, _ := (*C.fz_compressed_buffer)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	__ret := C.fz_open_compressed_buffer(cctx, carg1)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenImageDecompStreamFromBuffer function as declared in fitz/compressed-buffer.h:15
func FzOpenImageDecompStreamFromBuffer(ctx *FzContext, arg1 *FzCompressedBuffer, l2factor []int32) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carg1, _ := (*C.fz_compressed_buffer)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	cl2factor, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&l2factor)).Data)), cgoAllocsUnknown
	__ret := C.fz_open_image_decomp_stream_from_buffer(cctx, carg1, cl2factor)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenImageDecompStream function as declared in fitz/compressed-buffer.h:16
func FzOpenImageDecompStream(ctx *FzContext, arg1 *FzStream, arg2 []FzCompressionParams, l2factor []int32) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carg1, _ := (*C.fz_stream)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, _ := (*C.fz_compression_params)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&arg2)).Data)), cgoAllocsUnknown
	cl2factor, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&l2factor)).Data)), cgoAllocsUnknown
	__ret := C.fz_open_image_decomp_stream(cctx, carg1, carg2, cl2factor)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzRecognizeImageFormat function as declared in fitz/compressed-buffer.h:18
func FzRecognizeImageFormat(ctx *FzContext, p *[8]byte) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cp, _ := *(**C.uchar)(unsafe.Pointer(&p)), cgoAllocsUnknown
	__ret := C.fz_recognize_image_format(cctx, cp)
	__v := (int32)(__ret)
	return __v
}

// FzDropCompressedBuffer function as declared in fitz/compressed-buffer.h:89
func FzDropCompressedBuffer(ctx *FzContext, buf *FzCompressedBuffer) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_compressed_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	C.fz_drop_compressed_buffer(cctx, cbuf)
}

// FzOpenCopy function as declared in fitz/filter.h:12
func FzOpenCopy(ctx *FzContext, chain *FzStream) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer(chain)), cgoAllocsUnknown
	__ret := C.fz_open_copy(cctx, cchain)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenNull function as declared in fitz/filter.h:13
func FzOpenNull(ctx *FzContext, chain *FzStream, len int32, offset int) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer(chain)), cgoAllocsUnknown
	clen, _ := (C.int)(len), cgoAllocsUnknown
	coffset, _ := (C.int64_t)(offset), cgoAllocsUnknown
	__ret := C.fz_open_null(cctx, cchain, clen, coffset)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenConcat function as declared in fitz/filter.h:14
func FzOpenConcat(ctx *FzContext, max int32, pad int32) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cmax, _ := (C.int)(max), cgoAllocsUnknown
	cpad, _ := (C.int)(pad), cgoAllocsUnknown
	__ret := C.fz_open_concat(cctx, cmax, cpad)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzConcatPushDrop function as declared in fitz/filter.h:15
func FzConcatPushDrop(ctx *FzContext, concat *FzStream, chain []FzStream) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cconcat, _ := (*C.fz_stream)(unsafe.Pointer(concat)), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&chain)).Data)), cgoAllocsUnknown
	C.fz_concat_push_drop(cctx, cconcat, cchain)
}

// FzOpenArc4 function as declared in fitz/filter.h:16
func FzOpenArc4(ctx *FzContext, chain *FzStream, key []byte, keylen uint32) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer(chain)), cgoAllocsUnknown
	ckey, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&key)).Data)), cgoAllocsUnknown
	ckeylen, _ := (C.uint)(keylen), cgoAllocsUnknown
	__ret := C.fz_open_arc4(cctx, cchain, ckey, ckeylen)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenAesd function as declared in fitz/filter.h:17
func FzOpenAesd(ctx *FzContext, chain *FzStream, key []byte, keylen uint32) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer(chain)), cgoAllocsUnknown
	ckey, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&key)).Data)), cgoAllocsUnknown
	ckeylen, _ := (C.uint)(keylen), cgoAllocsUnknown
	__ret := C.fz_open_aesd(cctx, cchain, ckey, ckeylen)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenA85d function as declared in fitz/filter.h:18
func FzOpenA85d(ctx *FzContext, chain *FzStream) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer(chain)), cgoAllocsUnknown
	__ret := C.fz_open_a85d(cctx, cchain)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenAhxd function as declared in fitz/filter.h:19
func FzOpenAhxd(ctx *FzContext, chain *FzStream) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer(chain)), cgoAllocsUnknown
	__ret := C.fz_open_ahxd(cctx, cchain)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenRld function as declared in fitz/filter.h:20
func FzOpenRld(ctx *FzContext, chain *FzStream) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer(chain)), cgoAllocsUnknown
	__ret := C.fz_open_rld(cctx, cchain)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenDctd function as declared in fitz/filter.h:21
func FzOpenDctd(ctx *FzContext, chain *FzStream, colorTransform int32, l2factor int32, jpegtables []FzStream) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer(chain)), cgoAllocsUnknown
	ccolorTransform, _ := (C.int)(colorTransform), cgoAllocsUnknown
	cl2factor, _ := (C.int)(l2factor), cgoAllocsUnknown
	cjpegtables, _ := (*C.fz_stream)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&jpegtables)).Data)), cgoAllocsUnknown
	__ret := C.fz_open_dctd(cctx, cchain, ccolorTransform, cl2factor, cjpegtables)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenFaxd function as declared in fitz/filter.h:22
func FzOpenFaxd(ctx *FzContext, chain *FzStream, k int32, endOfLine int32, encodedByteAlign int32, columns int32, rows int32, endOfBlock int32, blackIs1 int32) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer(chain)), cgoAllocsUnknown
	ck, _ := (C.int)(k), cgoAllocsUnknown
	cendOfLine, _ := (C.int)(endOfLine), cgoAllocsUnknown
	cencodedByteAlign, _ := (C.int)(encodedByteAlign), cgoAllocsUnknown
	ccolumns, _ := (C.int)(columns), cgoAllocsUnknown
	crows, _ := (C.int)(rows), cgoAllocsUnknown
	cendOfBlock, _ := (C.int)(endOfBlock), cgoAllocsUnknown
	cblackIs1, _ := (C.int)(blackIs1), cgoAllocsUnknown
	__ret := C.fz_open_faxd(cctx, cchain, ck, cendOfLine, cencodedByteAlign, ccolumns, crows, cendOfBlock, cblackIs1)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenFlated function as declared in fitz/filter.h:25
func FzOpenFlated(ctx *FzContext, chain *FzStream, windowBits int32) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer(chain)), cgoAllocsUnknown
	cwindowBits, _ := (C.int)(windowBits), cgoAllocsUnknown
	__ret := C.fz_open_flated(cctx, cchain, cwindowBits)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenLzwd function as declared in fitz/filter.h:26
func FzOpenLzwd(ctx *FzContext, chain *FzStream, earlyChange int32, minBits int32, reverseBits int32, oldTiff int32) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer(chain)), cgoAllocsUnknown
	cearlyChange, _ := (C.int)(earlyChange), cgoAllocsUnknown
	cminBits, _ := (C.int)(minBits), cgoAllocsUnknown
	creverseBits, _ := (C.int)(reverseBits), cgoAllocsUnknown
	coldTiff, _ := (C.int)(oldTiff), cgoAllocsUnknown
	__ret := C.fz_open_lzwd(cctx, cchain, cearlyChange, cminBits, creverseBits, coldTiff)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenPredict function as declared in fitz/filter.h:27
func FzOpenPredict(ctx *FzContext, chain *FzStream, predictor int32, columns int32, colors int32, bpc int32) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer(chain)), cgoAllocsUnknown
	cpredictor, _ := (C.int)(predictor), cgoAllocsUnknown
	ccolumns, _ := (C.int)(columns), cgoAllocsUnknown
	ccolors, _ := (C.int)(colors), cgoAllocsUnknown
	cbpc, _ := (C.int)(bpc), cgoAllocsUnknown
	__ret := C.fz_open_predict(cctx, cchain, cpredictor, ccolumns, ccolors, cbpc)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenJbig2d function as declared in fitz/filter.h:28
func FzOpenJbig2d(ctx *FzContext, chain *FzStream, globals []FzJbig2Globals) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer(chain)), cgoAllocsUnknown
	cglobals, _ := (*C.fz_jbig2_globals)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&globals)).Data)), cgoAllocsUnknown
	__ret := C.fz_open_jbig2d(cctx, cchain, cglobals)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzLoadJbig2Globals function as declared in fitz/filter.h:30
func FzLoadJbig2Globals(ctx *FzContext, buf *FzBuffer) *FzJbig2Globals {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	__ret := C.fz_load_jbig2_globals(cctx, cbuf)
	__v := *(**FzJbig2Globals)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropJbig2GlobalsImp function as declared in fitz/filter.h:31
func FzDropJbig2GlobalsImp(ctx *FzContext, globals *FzStorable) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cglobals, _ := (*C.fz_storable)(unsafe.Pointer(globals)), cgoAllocsUnknown
	C.fz_drop_jbig2_globals_imp(cctx, cglobals)
}

// FzOpenSgilog16 function as declared in fitz/filter.h:34
func FzOpenSgilog16(ctx *FzContext, chain *FzStream, w int32) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer(chain)), cgoAllocsUnknown
	cw, _ := (C.int)(w), cgoAllocsUnknown
	__ret := C.fz_open_sgilog16(cctx, cchain, cw)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenSgilog24 function as declared in fitz/filter.h:35
func FzOpenSgilog24(ctx *FzContext, chain *FzStream, w int32) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer(chain)), cgoAllocsUnknown
	cw, _ := (C.int)(w), cgoAllocsUnknown
	__ret := C.fz_open_sgilog24(cctx, cchain, cw)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenSgilog32 function as declared in fitz/filter.h:36
func FzOpenSgilog32(ctx *FzContext, chain *FzStream, w int32) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer(chain)), cgoAllocsUnknown
	cw, _ := (C.int)(w), cgoAllocsUnknown
	__ret := C.fz_open_sgilog32(cctx, cchain, cw)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenThunder function as declared in fitz/filter.h:37
func FzOpenThunder(ctx *FzContext, chain *FzStream, w int32) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer(chain)), cgoAllocsUnknown
	cw, _ := (C.int)(w), cgoAllocsUnknown
	__ret := C.fz_open_thunder(cctx, cchain, cw)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzKeepStorable function as declared in fitz/store.h:54
func FzKeepStorable(arg0 *FzContext, arg1 *FzStorable) unsafe.Pointer {
	carg0, _ := (*C.fz_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, _ := (*C.fz_storable)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	__ret := C.fz_keep_storable(carg0, carg1)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropStorable function as declared in fitz/store.h:55
func FzDropStorable(arg0 *FzContext, arg1 *FzStorable) {
	carg0, _ := (*C.fz_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, _ := (*C.fz_storable)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	C.fz_drop_storable(carg0, carg1)
}

// FzKeepKeyStorable function as declared in fitz/store.h:57
func FzKeepKeyStorable(arg0 *FzContext, arg1 *FzKeyStorable) unsafe.Pointer {
	carg0, _ := (*C.fz_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, _ := (*C.fz_key_storable)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	__ret := C.fz_keep_key_storable(carg0, carg1)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropKeyStorable function as declared in fitz/store.h:58
func FzDropKeyStorable(arg0 *FzContext, arg1 *FzKeyStorable) {
	carg0, _ := (*C.fz_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, _ := (*C.fz_key_storable)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	C.fz_drop_key_storable(carg0, carg1)
}

// FzKeepKeyStorableKey function as declared in fitz/store.h:60
func FzKeepKeyStorableKey(arg0 *FzContext, arg1 *FzKeyStorable) unsafe.Pointer {
	carg0, _ := (*C.fz_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, _ := (*C.fz_key_storable)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	__ret := C.fz_keep_key_storable_key(carg0, carg1)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropKeyStorableKey function as declared in fitz/store.h:61
func FzDropKeyStorableKey(arg0 *FzContext, arg1 *FzKeyStorable) {
	carg0, _ := (*C.fz_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, _ := (*C.fz_key_storable)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	C.fz_drop_key_storable_key(carg0, carg1)
}

// FzNewStoreContext function as declared in fitz/store.h:165
func FzNewStoreContext(ctx *FzContext, max uint) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cmax, _ := (C.size_t)(max), cgoAllocsUnknown
	C.fz_new_store_context(cctx, cmax)
}

// FzDropStoreContext function as declared in fitz/store.h:170
func FzDropStoreContext(ctx *FzContext) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.fz_drop_store_context(cctx)
}

// FzKeepStoreContext function as declared in fitz/store.h:175
func FzKeepStoreContext(ctx *FzContext) *FzStore {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_keep_store_context(cctx)
	__v := *(**FzStore)(unsafe.Pointer(&__ret))
	return __v
}

// FzStoreItem function as declared in fitz/store.h:195
func FzStoreItem(ctx *FzContext, key unsafe.Pointer, val unsafe.Pointer, itemsize uint, kind []FzStoreType) unsafe.Pointer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ckey, _ := key, cgoAllocsUnknown
	cval, _ := val, cgoAllocsUnknown
	citemsize, _ := (C.size_t)(itemsize), cgoAllocsUnknown
	ckind, _ := (*C.fz_store_type)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&kind)).Data)), cgoAllocsUnknown
	__ret := C.fz_store_item(cctx, ckey, cval, citemsize, ckind)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// FzEmptyStore function as declared in fitz/store.h:229
func FzEmptyStore(ctx *FzContext) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.fz_empty_store(cctx)
}

// FzStoreScavenge function as declared in fitz/store.h:243
func FzStoreScavenge(ctx *FzContext, size uint, phase []int32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	cphase, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&phase)).Data)), cgoAllocsUnknown
	__ret := C.fz_store_scavenge(cctx, csize, cphase)
	__v := (int32)(__ret)
	return __v
}

// FzShrinkStore function as declared in fitz/store.h:254
func FzShrinkStore(ctx *FzContext, percent uint32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpercent, _ := (C.uint)(percent), cgoAllocsUnknown
	__ret := C.fz_shrink_store(cctx, cpercent)
	__v := (int32)(__ret)
	return __v
}

// FzDebugStore function as declared in fitz/store.h:263
func FzDebugStore(ctx *FzContext) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.fz_debug_store(cctx)
}

// FzDeferReapStart function as declared in fitz/store.h:278
func FzDeferReapStart(ctx *FzContext) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.fz_defer_reap_start(cctx)
}

// FzDeferReapEnd function as declared in fitz/store.h:292
func FzDeferReapEnd(ctx *FzContext) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.fz_defer_reap_end(cctx)
}

// FzNewArchiveOfSize function as declared in fitz/archive.h:27
func FzNewArchiveOfSize(ctx *FzContext, file *FzStream, size int32) *FzArchive {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfile, _ := (*C.fz_stream)(unsafe.Pointer(file)), cgoAllocsUnknown
	csize, _ := (C.int)(size), cgoAllocsUnknown
	__ret := C.fz_new_archive_of_size(cctx, cfile, csize)
	__v := *(**FzArchive)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenArchive function as declared in fitz/archive.h:40
func FzOpenArchive(ctx *FzContext, filename string) *FzArchive {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	__ret := C.fz_open_archive(cctx, cfilename)
	runtime.KeepAlive(filename)
	__v := *(**FzArchive)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenArchiveWithStream function as declared in fitz/archive.h:48
func FzOpenArchiveWithStream(ctx *FzContext, file *FzStream) *FzArchive {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfile, _ := (*C.fz_stream)(unsafe.Pointer(file)), cgoAllocsUnknown
	__ret := C.fz_open_archive_with_stream(cctx, cfile)
	__v := *(**FzArchive)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenDirectory function as declared in fitz/archive.h:62
func FzOpenDirectory(ctx *FzContext, path string) *FzArchive {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	__ret := C.fz_open_directory(cctx, cpath)
	runtime.KeepAlive(path)
	__v := *(**FzArchive)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropArchive function as declared in fitz/archive.h:69
func FzDropArchive(ctx *FzContext, arch *FzArchive) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carch, _ := (*C.fz_archive)(unsafe.Pointer(arch)), cgoAllocsUnknown
	C.fz_drop_archive(cctx, carch)
}

// FzArchiveFormat function as declared in fitz/archive.h:74
func FzArchiveFormat(ctx *FzContext, arch *FzArchive) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carch, _ := (*C.fz_archive)(unsafe.Pointer(arch)), cgoAllocsUnknown
	__ret := C.fz_archive_format(cctx, carch)
	__v := packPCharString(__ret)
	return __v
}

// FzCountArchiveEntries function as declared in fitz/archive.h:81
func FzCountArchiveEntries(ctx *FzContext, arch *FzArchive) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carch, _ := (*C.fz_archive)(unsafe.Pointer(arch)), cgoAllocsUnknown
	__ret := C.fz_count_archive_entries(cctx, carch)
	__v := (int32)(__ret)
	return __v
}

// FzListArchiveEntry function as declared in fitz/archive.h:90
func FzListArchiveEntry(ctx *FzContext, arch *FzArchive, idx int32) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carch, _ := (*C.fz_archive)(unsafe.Pointer(arch)), cgoAllocsUnknown
	cidx, _ := (C.int)(idx), cgoAllocsUnknown
	__ret := C.fz_list_archive_entry(cctx, carch, cidx)
	__v := packPCharString(__ret)
	return __v
}

// FzHasArchiveEntry function as declared in fitz/archive.h:101
func FzHasArchiveEntry(ctx *FzContext, arch *FzArchive, name string) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carch, _ := (*C.fz_archive)(unsafe.Pointer(arch)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	__ret := C.fz_has_archive_entry(cctx, carch, cname)
	runtime.KeepAlive(name)
	__v := (int32)(__ret)
	return __v
}

// FzOpenArchiveEntry function as declared in fitz/archive.h:109
func FzOpenArchiveEntry(ctx *FzContext, arch *FzArchive, name string) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carch, _ := (*C.fz_archive)(unsafe.Pointer(arch)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	__ret := C.fz_open_archive_entry(cctx, carch, cname)
	runtime.KeepAlive(name)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// FzReadArchiveEntry function as declared in fitz/archive.h:119
func FzReadArchiveEntry(ctx *FzContext, arch *FzArchive, name string) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carch, _ := (*C.fz_archive)(unsafe.Pointer(arch)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	__ret := C.fz_read_archive_entry(cctx, carch, cname)
	runtime.KeepAlive(name)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// FzIsTarArchive function as declared in fitz/archive.h:126
func FzIsTarArchive(ctx *FzContext, file *FzStream) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfile, _ := (*C.fz_stream)(unsafe.Pointer(file)), cgoAllocsUnknown
	__ret := C.fz_is_tar_archive(cctx, cfile)
	__v := (int32)(__ret)
	return __v
}

// FzOpenTarArchive function as declared in fitz/archive.h:137
func FzOpenTarArchive(ctx *FzContext, filename string) *FzArchive {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	__ret := C.fz_open_tar_archive(cctx, cfilename)
	runtime.KeepAlive(filename)
	__v := *(**FzArchive)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenTarArchiveWithStream function as declared in fitz/archive.h:149
func FzOpenTarArchiveWithStream(ctx *FzContext, file *FzStream) *FzArchive {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfile, _ := (*C.fz_stream)(unsafe.Pointer(file)), cgoAllocsUnknown
	__ret := C.fz_open_tar_archive_with_stream(cctx, cfile)
	__v := *(**FzArchive)(unsafe.Pointer(&__ret))
	return __v
}

// FzIsZipArchive function as declared in fitz/archive.h:156
func FzIsZipArchive(ctx *FzContext, file *FzStream) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfile, _ := (*C.fz_stream)(unsafe.Pointer(file)), cgoAllocsUnknown
	__ret := C.fz_is_zip_archive(cctx, cfile)
	__v := (int32)(__ret)
	return __v
}

// FzOpenZipArchive function as declared in fitz/archive.h:167
func FzOpenZipArchive(ctx *FzContext, path string) *FzArchive {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	__ret := C.fz_open_zip_archive(cctx, cpath)
	runtime.KeepAlive(path)
	__v := *(**FzArchive)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenZipArchiveWithStream function as declared in fitz/archive.h:179
func FzOpenZipArchiveWithStream(ctx *FzContext, file *FzStream) *FzArchive {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfile, _ := (*C.fz_stream)(unsafe.Pointer(file)), cgoAllocsUnknown
	__ret := C.fz_open_zip_archive_with_stream(cctx, cfile)
	__v := *(**FzArchive)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewZipWriter function as declared in fitz/archive.h:183
func FzNewZipWriter(ctx *FzContext, filename string) *FzZipWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	__ret := C.fz_new_zip_writer(cctx, cfilename)
	runtime.KeepAlive(filename)
	__v := *(**FzZipWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzWriteZipEntry function as declared in fitz/archive.h:184
func FzWriteZipEntry(ctx *FzContext, zip *FzZipWriter, name string, buf []FzBuffer, compress int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	czip, _ := (*C.fz_zip_writer)(unsafe.Pointer(zip)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buf)).Data)), cgoAllocsUnknown
	ccompress, _ := (C.int)(compress), cgoAllocsUnknown
	C.fz_write_zip_entry(cctx, czip, cname, cbuf, ccompress)
	runtime.KeepAlive(name)
}

// FzCloseZipWriter function as declared in fitz/archive.h:185
func FzCloseZipWriter(ctx *FzContext, zip *FzZipWriter) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	czip, _ := (*C.fz_zip_writer)(unsafe.Pointer(zip)), cgoAllocsUnknown
	C.fz_close_zip_writer(cctx, czip)
}

// FzDropZipWriter function as declared in fitz/archive.h:186
func FzDropZipWriter(ctx *FzContext, zip *FzZipWriter) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	czip, _ := (*C.fz_zip_writer)(unsafe.Pointer(zip)), cgoAllocsUnknown
	C.fz_drop_zip_writer(cctx, czip)
}

// FzLookupRenderingIntent function as declared in fitz/colorspace.h:30
func FzLookupRenderingIntent(name string) int32 {
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	__ret := C.fz_lookup_rendering_intent(cname)
	runtime.KeepAlive(name)
	__v := (int32)(__ret)
	return __v
}

// FzRenderingIntentName function as declared in fitz/colorspace.h:31
func FzRenderingIntentName(ri int32) *byte {
	cri, _ := (C.int)(ri), cgoAllocsUnknown
	__ret := C.fz_rendering_intent_name(cri)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// FzColorspaceIsSubtractive function as declared in fitz/colorspace.h:64
func FzColorspaceIsSubtractive(ctx *FzContext, cs *FzColorspace) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer(cs)), cgoAllocsUnknown
	__ret := C.fz_colorspace_is_subtractive(cctx, ccs)
	__v := (int32)(__ret)
	return __v
}

// FzColorspaceIsDeviceN function as declared in fitz/colorspace.h:71
func FzColorspaceIsDeviceN(ctx *FzContext, cs *FzColorspace) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer(cs)), cgoAllocsUnknown
	__ret := C.fz_colorspace_is_device_n(cctx, ccs)
	__v := (int32)(__ret)
	return __v
}

// FzColorspaceDeviceNHasOnlyCmyk function as declared in fitz/colorspace.h:77
func FzColorspaceDeviceNHasOnlyCmyk(ctx *FzContext, cs *FzColorspace) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer(cs)), cgoAllocsUnknown
	__ret := C.fz_colorspace_device_n_has_only_cmyk(cctx, ccs)
	__v := (int32)(__ret)
	return __v
}

// FzColorspaceDeviceNHasCmyk function as declared in fitz/colorspace.h:83
func FzColorspaceDeviceNHasCmyk(ctx *FzContext, cs *FzColorspace) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer(cs)), cgoAllocsUnknown
	__ret := C.fz_colorspace_device_n_has_cmyk(cctx, ccs)
	__v := (int32)(__ret)
	return __v
}

// FzColorspaceIsDeviceGray function as declared in fitz/colorspace.h:89
func FzColorspaceIsDeviceGray(ctx *FzContext, cs *FzColorspace) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer(cs)), cgoAllocsUnknown
	__ret := C.fz_colorspace_is_device_gray(cctx, ccs)
	__v := (int32)(__ret)
	return __v
}

// FzDeviceGray function as declared in fitz/colorspace.h:94
func FzDeviceGray(ctx *FzContext) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_device_gray(cctx)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// FzDeviceRgb function as declared in fitz/colorspace.h:99
func FzDeviceRgb(ctx *FzContext) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_device_rgb(cctx)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// FzDeviceBgr function as declared in fitz/colorspace.h:104
func FzDeviceBgr(ctx *FzContext) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_device_bgr(cctx)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// FzDeviceCmyk function as declared in fitz/colorspace.h:109
func FzDeviceCmyk(ctx *FzContext) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_device_cmyk(cctx)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// FzDeviceLab function as declared in fitz/colorspace.h:114
func FzDeviceLab(ctx *FzContext) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_device_lab(cctx)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// FzDefaultColorParams function as declared in fitz/colorspace.h:119
func FzDefaultColorParams(ctx *FzContext) *FzColorParams {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_default_color_params(cctx)
	__v := *(**FzColorParams)(unsafe.Pointer(&__ret))
	return __v
}

// FzColorspaceNameColorant function as declared in fitz/colorspace.h:139
func FzColorspaceNameColorant(ctx *FzContext, cs *FzColorspace, n int32, name string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer(cs)), cgoAllocsUnknown
	cn, _ := (C.int)(n), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	C.fz_colorspace_name_colorant(cctx, ccs, cn, cname)
	runtime.KeepAlive(name)
}

// FzColorspaceColorant function as declared in fitz/colorspace.h:140
func FzColorspaceColorant(ctx *FzContext, cs *FzColorspace, n int32) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer(cs)), cgoAllocsUnknown
	cn, _ := (C.int)(n), cgoAllocsUnknown
	__ret := C.fz_colorspace_colorant(cctx, ccs, cn)
	__v := packPCharString(__ret)
	return __v
}

// FzNewIndexedColorspace function as declared in fitz/colorspace.h:141
func FzNewIndexedColorspace(ctx *FzContext, base *FzColorspace, high int32, lookup []byte) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbase, _ := (*C.fz_colorspace)(unsafe.Pointer(base)), cgoAllocsUnknown
	chigh, _ := (C.int)(high), cgoAllocsUnknown
	clookup, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&lookup)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_indexed_colorspace(cctx, cbase, chigh, clookup)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// FzKeepColorspace function as declared in fitz/colorspace.h:142
func FzKeepColorspace(ctx *FzContext, colorspace *FzColorspace) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccolorspace, _ := (*C.fz_colorspace)(unsafe.Pointer(colorspace)), cgoAllocsUnknown
	__ret := C.fz_keep_colorspace(cctx, ccolorspace)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// FzKeepColorspaceStoreKey function as declared in fitz/colorspace.h:143
func FzKeepColorspaceStoreKey(ctx *FzContext, colorspace *FzColorspace) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccolorspace, _ := (*C.fz_colorspace)(unsafe.Pointer(colorspace)), cgoAllocsUnknown
	__ret := C.fz_keep_colorspace_store_key(cctx, ccolorspace)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropColorspaceStoreKey function as declared in fitz/colorspace.h:144
func FzDropColorspaceStoreKey(ctx *FzContext, colorspace *FzColorspace) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccolorspace, _ := (*C.fz_colorspace)(unsafe.Pointer(colorspace)), cgoAllocsUnknown
	C.fz_drop_colorspace_store_key(cctx, ccolorspace)
}

// FzDropColorspace function as declared in fitz/colorspace.h:146
func FzDropColorspace(ctx *FzContext, colorspace *FzColorspace) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccolorspace, _ := (*C.fz_colorspace)(unsafe.Pointer(colorspace)), cgoAllocsUnknown
	C.fz_drop_colorspace(cctx, ccolorspace)
}

// FzDropColorspaceImp function as declared in fitz/colorspace.h:147
func FzDropColorspaceImp(ctx *FzContext, colorspace *FzStorable) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccolorspace, _ := (*C.fz_storable)(unsafe.Pointer(colorspace)), cgoAllocsUnknown
	C.fz_drop_colorspace_imp(cctx, ccolorspace)
}

// FzColorspaceBase function as declared in fitz/colorspace.h:149
func FzColorspaceBase(ctx *FzContext, cs *FzColorspace) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer(cs)), cgoAllocsUnknown
	__ret := C.fz_colorspace_base(cctx, ccs)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// FzColorspaceIsIcc function as declared in fitz/colorspace.h:150
func FzColorspaceIsIcc(ctx *FzContext, cs *FzColorspace) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer(cs)), cgoAllocsUnknown
	__ret := C.fz_colorspace_is_icc(cctx, ccs)
	__v := (int32)(__ret)
	return __v
}

// FzColorspaceIsLab function as declared in fitz/colorspace.h:151
func FzColorspaceIsLab(ctx *FzContext, cs *FzColorspace) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer(cs)), cgoAllocsUnknown
	__ret := C.fz_colorspace_is_lab(cctx, ccs)
	__v := (int32)(__ret)
	return __v
}

// FzColorspaceIsLabIcc function as declared in fitz/colorspace.h:152
func FzColorspaceIsLabIcc(ctx *FzContext, cs *FzColorspace) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer(cs)), cgoAllocsUnknown
	__ret := C.fz_colorspace_is_lab_icc(cctx, ccs)
	__v := (int32)(__ret)
	return __v
}

// FzColorspaceIsCal function as declared in fitz/colorspace.h:153
func FzColorspaceIsCal(ctx *FzContext, cs *FzColorspace) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer(cs)), cgoAllocsUnknown
	__ret := C.fz_colorspace_is_cal(cctx, ccs)
	__v := (int32)(__ret)
	return __v
}

// FzColorspaceIsIndexed function as declared in fitz/colorspace.h:154
func FzColorspaceIsIndexed(ctx *FzContext, cs *FzColorspace) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer(cs)), cgoAllocsUnknown
	__ret := C.fz_colorspace_is_indexed(cctx, ccs)
	__v := (int32)(__ret)
	return __v
}

// FzSetIccBgr function as declared in fitz/colorspace.h:155
func FzSetIccBgr(ctx *FzContext, cs *FzColorspace) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer(cs)), cgoAllocsUnknown
	C.fz_set_icc_bgr(cctx, ccs)
}

// FzColorspaceN function as declared in fitz/colorspace.h:156
func FzColorspaceN(ctx *FzContext, cs *FzColorspace) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer(cs)), cgoAllocsUnknown
	__ret := C.fz_colorspace_n(cctx, ccs)
	__v := (int32)(__ret)
	return __v
}

// FzColorspaceName function as declared in fitz/colorspace.h:158
func FzColorspaceName(ctx *FzContext, cs *FzColorspace) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer(cs)), cgoAllocsUnknown
	__ret := C.fz_colorspace_name(cctx, ccs)
	__v := packPCharString(__ret)
	return __v
}

// FzClampColor function as declared in fitz/colorspace.h:159
func FzClampColor(ctx *FzContext, cs *FzColorspace, in []float32, out []float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer(cs)), cgoAllocsUnknown
	cin, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&in)).Data)), cgoAllocsUnknown
	cout, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&out)).Data)), cgoAllocsUnknown
	C.fz_clamp_color(cctx, ccs, cin, cout)
}

// FzConvertColor function as declared in fitz/colorspace.h:160
func FzConvertColor(ctx *FzContext, params *FzColorParams, intcs []FzColorspace, dscs []FzColorspace, dstv []float32, srcs []FzColorspace, srcv []float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cparams, _ := (*C.fz_color_params)(unsafe.Pointer(params)), cgoAllocsUnknown
	cintcs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&intcs)).Data)), cgoAllocsUnknown
	cdscs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dscs)).Data)), cgoAllocsUnknown
	cdstv, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dstv)).Data)), cgoAllocsUnknown
	csrcs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&srcs)).Data)), cgoAllocsUnknown
	csrcv, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&srcv)).Data)), cgoAllocsUnknown
	C.fz_convert_color(cctx, cparams, cintcs, cdscs, cdstv, csrcs, csrcv)
}

// FzFindColorConverter function as declared in fitz/colorspace.h:179
func FzFindColorConverter(ctx *FzContext, cc *FzColorConverter, is []FzColorspace, ds []FzColorspace, ss []FzColorspace, params []FzColorParams) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccc, _ := (*C.fz_color_converter)(unsafe.Pointer(cc)), cgoAllocsUnknown
	cis, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&is)).Data)), cgoAllocsUnknown
	cds, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ds)).Data)), cgoAllocsUnknown
	css, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ss)).Data)), cgoAllocsUnknown
	cparams, _ := (*C.fz_color_params)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&params)).Data)), cgoAllocsUnknown
	C.fz_find_color_converter(cctx, ccc, cis, cds, css, cparams)
}

// FzDropColorConverter function as declared in fitz/colorspace.h:180
func FzDropColorConverter(ctx *FzContext, cc *FzColorConverter) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccc, _ := (*C.fz_color_converter)(unsafe.Pointer(cc)), cgoAllocsUnknown
	C.fz_drop_color_converter(cctx, ccc)
}

// FzInitCachedColorConverter function as declared in fitz/colorspace.h:181
func FzInitCachedColorConverter(ctx *FzContext, cc *FzColorConverter, is []FzColorspace, ds []FzColorspace, ss []FzColorspace, params []FzColorParams) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccc, _ := (*C.fz_color_converter)(unsafe.Pointer(cc)), cgoAllocsUnknown
	cis, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&is)).Data)), cgoAllocsUnknown
	cds, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ds)).Data)), cgoAllocsUnknown
	css, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ss)).Data)), cgoAllocsUnknown
	cparams, _ := (*C.fz_color_params)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&params)).Data)), cgoAllocsUnknown
	C.fz_init_cached_color_converter(cctx, ccc, cis, cds, css, cparams)
}

// FzFinCachedColorConverter function as declared in fitz/colorspace.h:182
func FzFinCachedColorConverter(ctx *FzContext, cc *FzColorConverter) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccc, _ := (*C.fz_color_converter)(unsafe.Pointer(cc)), cgoAllocsUnknown
	C.fz_fin_cached_color_converter(cctx, ccc)
}

// FzNewIccColorspace function as declared in fitz/colorspace.h:199
func FzNewIccColorspace(ctx *FzContext, name string, num int32, buf []FzBuffer) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buf)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_icc_colorspace(cctx, cname, cnum, cbuf)
	runtime.KeepAlive(name)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewIccColorspaceFromFile function as declared in fitz/colorspace.h:200
func FzNewIccColorspaceFromFile(ctx *FzContext, name string, path string) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	__ret := C.fz_new_icc_colorspace_from_file(cctx, cname, cpath)
	runtime.KeepAlive(path)
	runtime.KeepAlive(name)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewIccColorspaceFromStream function as declared in fitz/colorspace.h:201
func FzNewIccColorspaceFromStream(ctx *FzContext, name string, in []FzStream) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	cin, _ := (*C.fz_stream)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&in)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_icc_colorspace_from_stream(cctx, cname, cin)
	runtime.KeepAlive(name)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewCalColorspace function as declared in fitz/colorspace.h:202
func FzNewCalColorspace(ctx *FzContext, name string, wp []float32, bp []float32, gamma []float32, matrix []float32) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	cwp, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&wp)).Data)), cgoAllocsUnknown
	cbp, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&bp)).Data)), cgoAllocsUnknown
	cgamma, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&gamma)).Data)), cgoAllocsUnknown
	cmatrix, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&matrix)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_cal_colorspace(cctx, cname, cwp, cbp, cgamma, cmatrix)
	runtime.KeepAlive(name)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewIccDataFromCalColorspace function as declared in fitz/colorspace.h:203
func FzNewIccDataFromCalColorspace(ctx *FzContext, cal *FzCalColorspace) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccal, _ := (*C.fz_cal_colorspace)(unsafe.Pointer(cal)), cgoAllocsUnknown
	__ret := C.fz_new_icc_data_from_cal_colorspace(cctx, ccal)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// FzIccDataFromIccColorspace function as declared in fitz/colorspace.h:204
func FzIccDataFromIccColorspace(ctx *FzContext, cs *FzColorspace) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer(cs)), cgoAllocsUnknown
	__ret := C.fz_icc_data_from_icc_colorspace(cctx, ccs)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewDefaultColorspaces function as declared in fitz/colorspace.h:207
func FzNewDefaultColorspaces(ctx *FzContext) *FzDefaultColorspaces {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_new_default_colorspaces(cctx)
	__v := *(**FzDefaultColorspaces)(unsafe.Pointer(&__ret))
	return __v
}

// FzKeepDefaultColorspaces function as declared in fitz/colorspace.h:208
func FzKeepDefaultColorspaces(ctx *FzContext, defaultCs *FzDefaultColorspaces) *FzDefaultColorspaces {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdefaultCs, _ := (*C.fz_default_colorspaces)(unsafe.Pointer(defaultCs)), cgoAllocsUnknown
	__ret := C.fz_keep_default_colorspaces(cctx, cdefaultCs)
	__v := *(**FzDefaultColorspaces)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropDefaultColorspaces function as declared in fitz/colorspace.h:209
func FzDropDefaultColorspaces(ctx *FzContext, defaultCs *FzDefaultColorspaces) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdefaultCs, _ := (*C.fz_default_colorspaces)(unsafe.Pointer(defaultCs)), cgoAllocsUnknown
	C.fz_drop_default_colorspaces(cctx, cdefaultCs)
}

// FzCloneDefaultColorspaces function as declared in fitz/colorspace.h:210
func FzCloneDefaultColorspaces(ctx *FzContext, base *FzDefaultColorspaces) *FzDefaultColorspaces {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbase, _ := (*C.fz_default_colorspaces)(unsafe.Pointer(base)), cgoAllocsUnknown
	__ret := C.fz_clone_default_colorspaces(cctx, cbase)
	__v := *(**FzDefaultColorspaces)(unsafe.Pointer(&__ret))
	return __v
}

// FzSetDefaultGray function as declared in fitz/colorspace.h:213
func FzSetDefaultGray(ctx *FzContext, defaultCs *FzDefaultColorspaces, cs []FzColorspace) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdefaultCs, _ := (*C.fz_default_colorspaces)(unsafe.Pointer(defaultCs)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cs)).Data)), cgoAllocsUnknown
	C.fz_set_default_gray(cctx, cdefaultCs, ccs)
}

// FzSetDefaultRgb function as declared in fitz/colorspace.h:214
func FzSetDefaultRgb(ctx *FzContext, defaultCs *FzDefaultColorspaces, cs []FzColorspace) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdefaultCs, _ := (*C.fz_default_colorspaces)(unsafe.Pointer(defaultCs)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cs)).Data)), cgoAllocsUnknown
	C.fz_set_default_rgb(cctx, cdefaultCs, ccs)
}

// FzSetDefaultCmyk function as declared in fitz/colorspace.h:215
func FzSetDefaultCmyk(ctx *FzContext, defaultCs *FzDefaultColorspaces, cs []FzColorspace) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdefaultCs, _ := (*C.fz_default_colorspaces)(unsafe.Pointer(defaultCs)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cs)).Data)), cgoAllocsUnknown
	C.fz_set_default_cmyk(cctx, cdefaultCs, ccs)
}

// FzSetDefaultOutputIntent function as declared in fitz/colorspace.h:216
func FzSetDefaultOutputIntent(ctx *FzContext, defaultCs *FzDefaultColorspaces, cs []FzColorspace) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdefaultCs, _ := (*C.fz_default_colorspaces)(unsafe.Pointer(defaultCs)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cs)).Data)), cgoAllocsUnknown
	C.fz_set_default_output_intent(cctx, cdefaultCs, ccs)
}

// FzDefaultGray function as declared in fitz/colorspace.h:218
func FzDefaultGray(ctx *FzContext, defaultCs *FzDefaultColorspaces) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdefaultCs, _ := (*C.fz_default_colorspaces)(unsafe.Pointer(defaultCs)), cgoAllocsUnknown
	__ret := C.fz_default_gray(cctx, cdefaultCs)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// FzDefaultRgb function as declared in fitz/colorspace.h:219
func FzDefaultRgb(ctx *FzContext, defaultCs *FzDefaultColorspaces) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdefaultCs, _ := (*C.fz_default_colorspaces)(unsafe.Pointer(defaultCs)), cgoAllocsUnknown
	__ret := C.fz_default_rgb(cctx, cdefaultCs)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// FzDefaultCmyk function as declared in fitz/colorspace.h:220
func FzDefaultCmyk(ctx *FzContext, defaultCs *FzDefaultColorspaces) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdefaultCs, _ := (*C.fz_default_colorspaces)(unsafe.Pointer(defaultCs)), cgoAllocsUnknown
	__ret := C.fz_default_cmyk(cctx, cdefaultCs)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// FzDefaultOutputIntent function as declared in fitz/colorspace.h:221
func FzDefaultOutputIntent(ctx *FzContext, defaultCs *FzDefaultColorspaces) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdefaultCs, _ := (*C.fz_default_colorspaces)(unsafe.Pointer(defaultCs)), cgoAllocsUnknown
	__ret := C.fz_default_output_intent(cctx, cdefaultCs)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// FzPixmapBbox function as declared in fitz/pixmap.h:24
func FzPixmapBbox(ctx *FzContext, pix *FzPixmap, bbox []FzIrect) *FzIrect {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	cbbox, _ := (*C.fz_irect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&bbox)).Data)), cgoAllocsUnknown
	__ret := C.fz_pixmap_bbox(cctx, cpix, cbbox)
	__v := NewFzIrectRef(unsafe.Pointer(__ret))
	return __v
}

// FzPixmapWidth function as declared in fitz/pixmap.h:29
func FzPixmapWidth(ctx *FzContext, pix *FzPixmap) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	__ret := C.fz_pixmap_width(cctx, cpix)
	__v := (int32)(__ret)
	return __v
}

// FzPixmapHeight function as declared in fitz/pixmap.h:34
func FzPixmapHeight(ctx *FzContext, pix *FzPixmap) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	__ret := C.fz_pixmap_height(cctx, cpix)
	__v := (int32)(__ret)
	return __v
}

// FzPixmapX function as declared in fitz/pixmap.h:39
func FzPixmapX(ctx *FzContext, pix *FzPixmap) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	__ret := C.fz_pixmap_x(cctx, cpix)
	__v := (int32)(__ret)
	return __v
}

// FzPixmapY function as declared in fitz/pixmap.h:44
func FzPixmapY(ctx *FzContext, pix *FzPixmap) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	__ret := C.fz_pixmap_y(cctx, cpix)
	__v := (int32)(__ret)
	return __v
}

// FzNewPixmap function as declared in fitz/pixmap.h:63
func FzNewPixmap(ctx *FzContext, cs *FzColorspace, w int32, h int32, seps []FzSeparations, alpha int32) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer(cs)), cgoAllocsUnknown
	cw, _ := (C.int)(w), cgoAllocsUnknown
	ch, _ := (C.int)(h), cgoAllocsUnknown
	cseps, _ := (*C.fz_separations)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&seps)).Data)), cgoAllocsUnknown
	calpha, _ := (C.int)(alpha), cgoAllocsUnknown
	__ret := C.fz_new_pixmap(cctx, ccs, cw, ch, cseps, calpha)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPixmapWithBbox function as declared in fitz/pixmap.h:86
func FzNewPixmapWithBbox(ctx *FzContext, colorspace *FzColorspace, bbox []FzIrect, seps []FzSeparations, alpha int32) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccolorspace, _ := (*C.fz_colorspace)(unsafe.Pointer(colorspace)), cgoAllocsUnknown
	cbbox, _ := (*C.fz_irect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&bbox)).Data)), cgoAllocsUnknown
	cseps, _ := (*C.fz_separations)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&seps)).Data)), cgoAllocsUnknown
	calpha, _ := (C.int)(alpha), cgoAllocsUnknown
	__ret := C.fz_new_pixmap_with_bbox(cctx, ccolorspace, cbbox, cseps, calpha)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPixmapWithData function as declared in fitz/pixmap.h:111
func FzNewPixmapWithData(ctx *FzContext, colorspace *FzColorspace, w int32, h int32, seps []FzSeparations, alpha int32, stride int32, samples []byte) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccolorspace, _ := (*C.fz_colorspace)(unsafe.Pointer(colorspace)), cgoAllocsUnknown
	cw, _ := (C.int)(w), cgoAllocsUnknown
	ch, _ := (C.int)(h), cgoAllocsUnknown
	cseps, _ := (*C.fz_separations)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&seps)).Data)), cgoAllocsUnknown
	calpha, _ := (C.int)(alpha), cgoAllocsUnknown
	cstride, _ := (C.int)(stride), cgoAllocsUnknown
	csamples, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&samples)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_pixmap_with_data(cctx, ccolorspace, cw, ch, cseps, calpha, cstride, csamples)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPixmapWithBboxAndData function as declared in fitz/pixmap.h:136
func FzNewPixmapWithBboxAndData(ctx *FzContext, colorspace *FzColorspace, rect []FzIrect, seps []FzSeparations, alpha int32, samples []byte) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccolorspace, _ := (*C.fz_colorspace)(unsafe.Pointer(colorspace)), cgoAllocsUnknown
	crect, _ := (*C.fz_irect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rect)).Data)), cgoAllocsUnknown
	cseps, _ := (*C.fz_separations)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&seps)).Data)), cgoAllocsUnknown
	calpha, _ := (C.int)(alpha), cgoAllocsUnknown
	csamples, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&samples)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_pixmap_with_bbox_and_data(cctx, ccolorspace, crect, cseps, calpha, csamples)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPixmapFromPixmap function as declared in fitz/pixmap.h:149
func FzNewPixmapFromPixmap(ctx *FzContext, pixmap *FzPixmap, rect []FzIrect) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpixmap, _ := pixmap.PassRef()
	crect, _ := (*C.fz_irect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rect)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_pixmap_from_pixmap(cctx, cpixmap, crect)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzKeepPixmap function as declared in fitz/pixmap.h:158
func FzKeepPixmap(ctx *FzContext, pix *FzPixmap) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	__ret := C.fz_keep_pixmap(cctx, cpix)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropPixmap function as declared in fitz/pixmap.h:166
func FzDropPixmap(ctx *FzContext, pix *FzPixmap) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	C.fz_drop_pixmap(cctx, cpix)
}

// FzPixmapColorspace function as declared in fitz/pixmap.h:173
func FzPixmapColorspace(ctx *FzContext, pix *FzPixmap) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	__ret := C.fz_pixmap_colorspace(cctx, cpix)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// FzPixmapComponents function as declared in fitz/pixmap.h:180
func FzPixmapComponents(ctx *FzContext, pix *FzPixmap) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	__ret := C.fz_pixmap_components(cctx, cpix)
	__v := (int32)(__ret)
	return __v
}

// FzPixmapColorants function as declared in fitz/pixmap.h:187
func FzPixmapColorants(ctx *FzContext, pix *FzPixmap) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	__ret := C.fz_pixmap_colorants(cctx, cpix)
	__v := (int32)(__ret)
	return __v
}

// FzPixmapSpots function as declared in fitz/pixmap.h:194
func FzPixmapSpots(ctx *FzContext, pix *FzPixmap) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	__ret := C.fz_pixmap_spots(cctx, cpix)
	__v := (int32)(__ret)
	return __v
}

// FzPixmapAlpha function as declared in fitz/pixmap.h:201
func FzPixmapAlpha(ctx *FzContext, pix *FzPixmap) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	__ret := C.fz_pixmap_alpha(cctx, cpix)
	__v := (int32)(__ret)
	return __v
}

// FzPixmapSamples function as declared in fitz/pixmap.h:208
func FzPixmapSamples(ctx *FzContext, pix *FzPixmap) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	__ret := C.fz_pixmap_samples(cctx, cpix)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// FzPixmapStride function as declared in fitz/pixmap.h:213
func FzPixmapStride(ctx *FzContext, pix *FzPixmap) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	__ret := C.fz_pixmap_stride(cctx, cpix)
	__v := (int32)(__ret)
	return __v
}

// FzSetPixmapResolution function as declared in fitz/pixmap.h:218
func FzSetPixmapResolution(ctx *FzContext, pix *FzPixmap, xres int32, yres int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	cxres, _ := (C.int)(xres), cgoAllocsUnknown
	cyres, _ := (C.int)(yres), cgoAllocsUnknown
	C.fz_set_pixmap_resolution(cctx, cpix, cxres, cyres)
}

// FzClearPixmapWithValue function as declared in fitz/pixmap.h:229
func FzClearPixmapWithValue(ctx *FzContext, pix *FzPixmap, value int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	cvalue, _ := (C.int)(value), cgoAllocsUnknown
	C.fz_clear_pixmap_with_value(cctx, cpix, cvalue)
}

// FzFillPixmapWithColor function as declared in fitz/pixmap.h:234
func FzFillPixmapWithColor(ctx *FzContext, pix *FzPixmap, colorspace []FzColorspace, color []float32, colorParams []FzColorParams) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	ccolorspace, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorspace)).Data)), cgoAllocsUnknown
	ccolor, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&color)).Data)), cgoAllocsUnknown
	ccolorParams, _ := (*C.fz_color_params)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorParams)).Data)), cgoAllocsUnknown
	C.fz_fill_pixmap_with_color(cctx, cpix, ccolorspace, ccolor, ccolorParams)
}

// FzClearPixmapRectWithValue function as declared in fitz/pixmap.h:247
func FzClearPixmapRectWithValue(ctx *FzContext, pix *FzPixmap, value int32, r []FzIrect) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	cvalue, _ := (C.int)(value), cgoAllocsUnknown
	cr, _ := (*C.fz_irect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&r)).Data)), cgoAllocsUnknown
	C.fz_clear_pixmap_rect_with_value(cctx, cpix, cvalue, cr)
}

// FzClearPixmap function as declared in fitz/pixmap.h:255
func FzClearPixmap(ctx *FzContext, pix *FzPixmap) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	C.fz_clear_pixmap(cctx, cpix)
}

// FzInvertPixmap function as declared in fitz/pixmap.h:261
func FzInvertPixmap(ctx *FzContext, pix *FzPixmap) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	C.fz_invert_pixmap(cctx, cpix)
}

// FzTintPixmap function as declared in fitz/pixmap.h:270
func FzTintPixmap(ctx *FzContext, pix *FzPixmap, r int32, g int32, b int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	cr, _ := (C.int)(r), cgoAllocsUnknown
	cg, _ := (C.int)(g), cgoAllocsUnknown
	cb, _ := (C.int)(b), cgoAllocsUnknown
	C.fz_tint_pixmap(cctx, cpix, cr, cg, cb)
}

// FzInvertPixmapRect function as declared in fitz/pixmap.h:277
func FzInvertPixmapRect(ctx *FzContext, image *FzPixmap, rect []FzIrect) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cimage, _ := image.PassRef()
	crect, _ := (*C.fz_irect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rect)).Data)), cgoAllocsUnknown
	C.fz_invert_pixmap_rect(cctx, cimage, crect)
}

// FzGammaPixmap function as declared in fitz/pixmap.h:285
func FzGammaPixmap(ctx *FzContext, pix *FzPixmap, gamma float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	cgamma, _ := (C.float)(gamma), cgoAllocsUnknown
	C.fz_gamma_pixmap(cctx, cpix, cgamma)
}

// FzUnmultiplyPixmap function as declared in fitz/pixmap.h:291
func FzUnmultiplyPixmap(ctx *FzContext, pix *FzPixmap) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	C.fz_unmultiply_pixmap(cctx, cpix)
}

// FzConvertPixmap function as declared in fitz/pixmap.h:312
func FzConvertPixmap(ctx *FzContext, pix *FzPixmap, csDes []FzColorspace, prf []FzColorspace, defaultCs []FzDefaultColorspaces, colorParams []FzColorParams, keepAlpha int32) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	ccsDes, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&csDes)).Data)), cgoAllocsUnknown
	cprf, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&prf)).Data)), cgoAllocsUnknown
	cdefaultCs, _ := (*C.fz_default_colorspaces)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&defaultCs)).Data)), cgoAllocsUnknown
	ccolorParams, _ := (*C.fz_color_params)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorParams)).Data)), cgoAllocsUnknown
	ckeepAlpha, _ := (C.int)(keepAlpha), cgoAllocsUnknown
	__ret := C.fz_convert_pixmap(cctx, cpix, ccsDes, cprf, cdefaultCs, ccolorParams, ckeepAlpha)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropPixmapImp function as declared in fitz/pixmap.h:374
func FzDropPixmapImp(ctx *FzContext, pix *FzStorable) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := (*C.fz_storable)(unsafe.Pointer(pix)), cgoAllocsUnknown
	C.fz_drop_pixmap_imp(cctx, cpix)
}

// FzCopyPixmapRect function as declared in fitz/pixmap.h:376
func FzCopyPixmapRect(ctx *FzContext, dest *FzPixmap, src []FzPixmap, r []FzIrect, defaultCs []FzDefaultColorspaces) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdest, _ := dest.PassRef()
	csrc, _ := unpackArgSFzPixmap(src)
	cr, _ := (*C.fz_irect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&r)).Data)), cgoAllocsUnknown
	cdefaultCs, _ := (*C.fz_default_colorspaces)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&defaultCs)).Data)), cgoAllocsUnknown
	C.fz_copy_pixmap_rect(cctx, cdest, csrc, cr, cdefaultCs)
	packSFzPixmap(src, csrc)
}

// FzPremultiplyPixmap function as declared in fitz/pixmap.h:377
func FzPremultiplyPixmap(ctx *FzContext, pix *FzPixmap) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	C.fz_premultiply_pixmap(cctx, cpix)
}

// FzAlphaFromGray function as declared in fitz/pixmap.h:378
func FzAlphaFromGray(ctx *FzContext, gray *FzPixmap) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cgray, _ := gray.PassRef()
	__ret := C.fz_alpha_from_gray(cctx, cgray)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzPixmapSize function as declared in fitz/pixmap.h:379
func FzPixmapSize(ctx *FzContext, pix *FzPixmap) uint {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	__ret := C.fz_pixmap_size(cctx, cpix)
	__v := (uint)(__ret)
	return __v
}

// FzScalePixmap function as declared in fitz/pixmap.h:381
func FzScalePixmap(ctx *FzContext, src *FzPixmap, x float32, y float32, w float32, h float32, clip []FzIrect) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csrc, _ := src.PassRef()
	cx, _ := (C.float)(x), cgoAllocsUnknown
	cy, _ := (C.float)(y), cgoAllocsUnknown
	cw, _ := (C.float)(w), cgoAllocsUnknown
	ch, _ := (C.float)(h), cgoAllocsUnknown
	cclip, _ := (*C.fz_irect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&clip)).Data)), cgoAllocsUnknown
	__ret := C.fz_scale_pixmap(cctx, csrc, cx, cy, cw, ch, cclip)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewScaleCache function as declared in fitz/pixmap.h:385
func FzNewScaleCache(ctx *FzContext) *FzScaleCache {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_new_scale_cache(cctx)
	__v := *(**FzScaleCache)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropScaleCache function as declared in fitz/pixmap.h:386
func FzDropScaleCache(ctx *FzContext, cache *FzScaleCache) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccache, _ := (*C.fz_scale_cache)(unsafe.Pointer(cache)), cgoAllocsUnknown
	C.fz_drop_scale_cache(cctx, ccache)
}

// FzScalePixmapCached function as declared in fitz/pixmap.h:387
func FzScalePixmapCached(ctx *FzContext, src *FzPixmap, x float32, y float32, w float32, h float32, clip []FzIrect, cacheX []FzScaleCache, cacheY []FzScaleCache) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csrc, _ := src.PassRef()
	cx, _ := (C.float)(x), cgoAllocsUnknown
	cy, _ := (C.float)(y), cgoAllocsUnknown
	cw, _ := (C.float)(w), cgoAllocsUnknown
	ch, _ := (C.float)(h), cgoAllocsUnknown
	cclip, _ := (*C.fz_irect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&clip)).Data)), cgoAllocsUnknown
	ccacheX, _ := (*C.fz_scale_cache)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cacheX)).Data)), cgoAllocsUnknown
	ccacheY, _ := (*C.fz_scale_cache)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cacheY)).Data)), cgoAllocsUnknown
	__ret := C.fz_scale_pixmap_cached(cctx, csrc, cx, cy, cw, ch, cclip, ccacheX, ccacheY)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzSubsamplePixmap function as declared in fitz/pixmap.h:389
func FzSubsamplePixmap(ctx *FzContext, tile *FzPixmap, factor int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctile, _ := tile.PassRef()
	cfactor, _ := (C.int)(factor), cgoAllocsUnknown
	C.fz_subsample_pixmap(cctx, ctile, cfactor)
}

// FzPixmapBboxNoCtx function as declared in fitz/pixmap.h:391
func FzPixmapBboxNoCtx(src *FzPixmap, bbox *FzIrect) *FzIrect {
	csrc, _ := src.PassRef()
	cbbox, _ := (*C.fz_irect)(unsafe.Pointer(bbox)), cgoAllocsUnknown
	__ret := C.fz_pixmap_bbox_no_ctx(csrc, cbbox)
	__v := NewFzIrectRef(unsafe.Pointer(__ret))
	return __v
}

// FzDecodeTile function as declared in fitz/pixmap.h:393
func FzDecodeTile(ctx *FzContext, pix *FzPixmap, decode []float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	cdecode, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&decode)).Data)), cgoAllocsUnknown
	C.fz_decode_tile(cctx, cpix, cdecode)
}

// FzDecodeIndexedTile function as declared in fitz/pixmap.h:394
func FzDecodeIndexedTile(ctx *FzContext, pix *FzPixmap, decode []float32, maxval int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	cdecode, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&decode)).Data)), cgoAllocsUnknown
	cmaxval, _ := (C.int)(maxval), cgoAllocsUnknown
	C.fz_decode_indexed_tile(cctx, cpix, cdecode, cmaxval)
}

// FzUnpackTile function as declared in fitz/pixmap.h:395
func FzUnpackTile(ctx *FzContext, dst *FzPixmap, src []byte, n int32, depth int32, stride uint, scale int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdst, _ := dst.PassRef()
	csrc, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&src)).Data)), cgoAllocsUnknown
	cn, _ := (C.int)(n), cgoAllocsUnknown
	cdepth, _ := (C.int)(depth), cgoAllocsUnknown
	cstride, _ := (C.size_t)(stride), cgoAllocsUnknown
	cscale, _ := (C.int)(scale), cgoAllocsUnknown
	C.fz_unpack_tile(cctx, cdst, csrc, cn, cdepth, cstride, cscale)
}

// FzMd5Pixmap function as declared in fitz/pixmap.h:407
func FzMd5Pixmap(ctx *FzContext, pixmap *FzPixmap, digest *[16]byte) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpixmap, _ := pixmap.PassRef()
	cdigest, _ := *(**C.uchar)(unsafe.Pointer(&digest)), cgoAllocsUnknown
	C.fz_md5_pixmap(cctx, cpixmap, cdigest)
}

// FzNewPixmapFrom8bppData function as declared in fitz/pixmap.h:409
func FzNewPixmapFrom8bppData(ctx *FzContext, x int32, y int32, w int32, h int32, sp []byte, span int32) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cx, _ := (C.int)(x), cgoAllocsUnknown
	cy, _ := (C.int)(y), cgoAllocsUnknown
	cw, _ := (C.int)(w), cgoAllocsUnknown
	ch, _ := (C.int)(h), cgoAllocsUnknown
	csp, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&sp)).Data)), cgoAllocsUnknown
	cspan, _ := (C.int)(span), cgoAllocsUnknown
	__ret := C.fz_new_pixmap_from_8bpp_data(cctx, cx, cy, cw, ch, csp, cspan)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPixmapFrom1bppData function as declared in fitz/pixmap.h:410
func FzNewPixmapFrom1bppData(ctx *FzContext, x int32, y int32, w int32, h int32, sp []byte, span int32) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cx, _ := (C.int)(x), cgoAllocsUnknown
	cy, _ := (C.int)(y), cgoAllocsUnknown
	cw, _ := (C.int)(w), cgoAllocsUnknown
	ch, _ := (C.int)(h), cgoAllocsUnknown
	csp, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&sp)).Data)), cgoAllocsUnknown
	cspan, _ := (C.int)(span), cgoAllocsUnknown
	__ret := C.fz_new_pixmap_from_1bpp_data(cctx, cx, cy, cw, ch, csp, cspan)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzClonePixmapAreaWithDifferentSeps function as declared in fitz/pixmap.h:422
func FzClonePixmapAreaWithDifferentSeps(ctx *FzContext, src *FzPixmap, bbox []FzIrect, dcs []FzColorspace, seps []FzSeparations, colorParams []FzColorParams, defaultCs []FzDefaultColorspaces) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csrc, _ := src.PassRef()
	cbbox, _ := (*C.fz_irect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&bbox)).Data)), cgoAllocsUnknown
	cdcs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dcs)).Data)), cgoAllocsUnknown
	cseps, _ := (*C.fz_separations)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&seps)).Data)), cgoAllocsUnknown
	ccolorParams, _ := (*C.fz_color_params)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorParams)).Data)), cgoAllocsUnknown
	cdefaultCs, _ := (*C.fz_default_colorspaces)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&defaultCs)).Data)), cgoAllocsUnknown
	__ret := C.fz_clone_pixmap_area_with_different_seps(cctx, csrc, cbbox, cdcs, cseps, ccolorParams, cdefaultCs)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzCopyPixmapAreaConvertingSeps function as declared in fitz/pixmap.h:424
func FzCopyPixmapAreaConvertingSeps(ctx *FzContext, dst *FzPixmap, src []FzPixmap, colorParams []FzColorParams, prf []FzColorspace, defaultCs []FzDefaultColorspaces) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdst, _ := dst.PassRef()
	csrc, _ := unpackArgSFzPixmap(src)
	ccolorParams, _ := (*C.fz_color_params)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorParams)).Data)), cgoAllocsUnknown
	cprf, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&prf)).Data)), cgoAllocsUnknown
	cdefaultCs, _ := (*C.fz_default_colorspaces)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&defaultCs)).Data)), cgoAllocsUnknown
	__ret := C.fz_copy_pixmap_area_converting_seps(cctx, cdst, csrc, ccolorParams, cprf, cdefaultCs)
	packSFzPixmap(src, csrc)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewSeparations function as declared in fitz/separation.h:35
func FzNewSeparations(ctx *FzContext, controllable int32) *FzSeparations {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccontrollable, _ := (C.int)(controllable), cgoAllocsUnknown
	__ret := C.fz_new_separations(cctx, ccontrollable)
	__v := *(**FzSeparations)(unsafe.Pointer(&__ret))
	return __v
}

// FzKeepSeparations function as declared in fitz/separation.h:38
func FzKeepSeparations(ctx *FzContext, sep *FzSeparations) *FzSeparations {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csep, _ := (*C.fz_separations)(unsafe.Pointer(sep)), cgoAllocsUnknown
	__ret := C.fz_keep_separations(cctx, csep)
	__v := *(**FzSeparations)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropSeparations function as declared in fitz/separation.h:41
func FzDropSeparations(ctx *FzContext, sep *FzSeparations) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csep, _ := (*C.fz_separations)(unsafe.Pointer(sep)), cgoAllocsUnknown
	C.fz_drop_separations(cctx, csep)
}

// FzAddSeparation function as declared in fitz/separation.h:44
func FzAddSeparation(ctx *FzContext, sep *FzSeparations, name string, cs []FzColorspace, csChannel int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csep, _ := (*C.fz_separations)(unsafe.Pointer(sep)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cs)).Data)), cgoAllocsUnknown
	ccsChannel, _ := (C.int)(csChannel), cgoAllocsUnknown
	C.fz_add_separation(cctx, csep, cname, ccs, ccsChannel)
	runtime.KeepAlive(name)
}

// FzAddSeparationEquivalents function as declared in fitz/separation.h:47
func FzAddSeparationEquivalents(ctx *FzContext, sep *FzSeparations, rgba uint32, cmyk uint32, name string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csep, _ := (*C.fz_separations)(unsafe.Pointer(sep)), cgoAllocsUnknown
	crgba, _ := (C.uint32_t)(rgba), cgoAllocsUnknown
	ccmyk, _ := (C.uint32_t)(cmyk), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	C.fz_add_separation_equivalents(cctx, csep, crgba, ccmyk, cname)
	runtime.KeepAlive(name)
}

// FzSetSeparationBehavior function as declared in fitz/separation.h:50
func FzSetSeparationBehavior(ctx *FzContext, sep *FzSeparations, separation int32, behavior FzSeparationBehavior) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csep, _ := (*C.fz_separations)(unsafe.Pointer(sep)), cgoAllocsUnknown
	cseparation, _ := (C.int)(separation), cgoAllocsUnknown
	cbehavior, _ := (C.fz_separation_behavior)(behavior), cgoAllocsUnknown
	C.fz_set_separation_behavior(cctx, csep, cseparation, cbehavior)
}

// FzSeparationCurrentBehavior function as declared in fitz/separation.h:53
func FzSeparationCurrentBehavior(ctx *FzContext, sep *FzSeparations, separation int32) FzSeparationBehavior {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csep, _ := (*C.fz_separations)(unsafe.Pointer(sep)), cgoAllocsUnknown
	cseparation, _ := (C.int)(separation), cgoAllocsUnknown
	__ret := C.fz_separation_current_behavior(cctx, csep, cseparation)
	__v := (FzSeparationBehavior)(__ret)
	return __v
}

// FzSeparationsAllComposite function as declared in fitz/separation.h:56
func FzSeparationsAllComposite(ctx *FzContext, sep *FzSeparations) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csep, _ := (*C.fz_separations)(unsafe.Pointer(sep)), cgoAllocsUnknown
	__ret := C.fz_separations_all_composite(cctx, csep)
	__v := (int32)(__ret)
	return __v
}

// FzSeparationName function as declared in fitz/separation.h:59
func FzSeparationName(ctx *FzContext, sep *FzSeparations, separation int32) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csep, _ := (*C.fz_separations)(unsafe.Pointer(sep)), cgoAllocsUnknown
	cseparation, _ := (C.int)(separation), cgoAllocsUnknown
	__ret := C.fz_separation_name(cctx, csep, cseparation)
	__v := packPCharString(__ret)
	return __v
}

// FzCountSeparations function as declared in fitz/separation.h:62
func FzCountSeparations(ctx *FzContext, sep *FzSeparations) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csep, _ := (*C.fz_separations)(unsafe.Pointer(sep)), cgoAllocsUnknown
	__ret := C.fz_count_separations(cctx, csep)
	__v := (int32)(__ret)
	return __v
}

// FzSeparationsControllable function as declared in fitz/separation.h:65
func FzSeparationsControllable(ctx *FzContext, seps *FzSeparations) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cseps, _ := (*C.fz_separations)(unsafe.Pointer(seps)), cgoAllocsUnknown
	__ret := C.fz_separations_controllable(cctx, cseps)
	__v := (int32)(__ret)
	return __v
}

// FzCountActiveSeparations function as declared in fitz/separation.h:68
func FzCountActiveSeparations(ctx *FzContext, seps *FzSeparations) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cseps, _ := (*C.fz_separations)(unsafe.Pointer(seps)), cgoAllocsUnknown
	__ret := C.fz_count_active_separations(cctx, cseps)
	__v := (int32)(__ret)
	return __v
}

// FzCloneSeparationsForOverprint function as declared in fitz/separation.h:75
func FzCloneSeparationsForOverprint(ctx *FzContext, seps *FzSeparations) *FzSeparations {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cseps, _ := (*C.fz_separations)(unsafe.Pointer(seps)), cgoAllocsUnknown
	__ret := C.fz_clone_separations_for_overprint(cctx, cseps)
	__v := *(**FzSeparations)(unsafe.Pointer(&__ret))
	return __v
}

// FzConvertSeparationColors function as declared in fitz/separation.h:79
func FzConvertSeparationColors(ctx *FzContext, colorParams *FzColorParams, dstCs []FzColorspace, dstSep []FzSeparations, dstColor []float32, srcCs []FzColorspace, srcColor []float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccolorParams, _ := (*C.fz_color_params)(unsafe.Pointer(colorParams)), cgoAllocsUnknown
	cdstCs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dstCs)).Data)), cgoAllocsUnknown
	cdstSep, _ := (*C.fz_separations)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dstSep)).Data)), cgoAllocsUnknown
	cdstColor, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dstColor)).Data)), cgoAllocsUnknown
	csrcCs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&srcCs)).Data)), cgoAllocsUnknown
	csrcColor, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&srcColor)).Data)), cgoAllocsUnknown
	C.fz_convert_separation_colors(cctx, ccolorParams, cdstCs, cdstSep, cdstColor, csrcCs, csrcColor)
}

// FzSeparationEquivalent function as declared in fitz/separation.h:82
func FzSeparationEquivalent(ctx *FzContext, seps *FzSeparations, i int32, colorParams []FzColorParams, dstCs []FzColorspace, prf []FzColorspace, convert []float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cseps, _ := (*C.fz_separations)(unsafe.Pointer(seps)), cgoAllocsUnknown
	ci, _ := (C.int)(i), cgoAllocsUnknown
	ccolorParams, _ := (*C.fz_color_params)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorParams)).Data)), cgoAllocsUnknown
	cdstCs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dstCs)).Data)), cgoAllocsUnknown
	cprf, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&prf)).Data)), cgoAllocsUnknown
	cconvert, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&convert)).Data)), cgoAllocsUnknown
	C.fz_separation_equivalent(cctx, cseps, ci, ccolorParams, cdstCs, cprf, cconvert)
}

// FzGlyphBbox function as declared in fitz/glyph.h:19
func FzGlyphBbox(ctx *FzContext, glyph *FzGlyph, bbox []FzIrect) *FzIrect {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cglyph, _ := (*C.fz_glyph)(unsafe.Pointer(glyph)), cgoAllocsUnknown
	cbbox, _ := (*C.fz_irect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&bbox)).Data)), cgoAllocsUnknown
	__ret := C.fz_glyph_bbox(cctx, cglyph, cbbox)
	__v := *(**FzIrect)(unsafe.Pointer(&__ret))
	return __v
}

// FzGlyphWidth function as declared in fitz/glyph.h:24
func FzGlyphWidth(ctx *FzContext, glyph *FzGlyph) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cglyph, _ := (*C.fz_glyph)(unsafe.Pointer(glyph)), cgoAllocsUnknown
	__ret := C.fz_glyph_width(cctx, cglyph)
	__v := (int32)(__ret)
	return __v
}

// FzGlyphHeight function as declared in fitz/glyph.h:29
func FzGlyphHeight(ctx *FzContext, glyph *FzGlyph) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cglyph, _ := (*C.fz_glyph)(unsafe.Pointer(glyph)), cgoAllocsUnknown
	__ret := C.fz_glyph_height(cctx, cglyph)
	__v := (int32)(__ret)
	return __v
}

// FzNewGlyphFromPixmap function as declared in fitz/glyph.h:37
func FzNewGlyphFromPixmap(ctx *FzContext, pix *FzPixmap) *FzGlyph {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	__ret := C.fz_new_glyph_from_pixmap(cctx, cpix)
	__v := *(**FzGlyph)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewGlyphFrom8bppData function as declared in fitz/glyph.h:53
func FzNewGlyphFrom8bppData(ctx *FzContext, x int32, y int32, w int32, h int32, sp []byte, span int32) *FzGlyph {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cx, _ := (C.int)(x), cgoAllocsUnknown
	cy, _ := (C.int)(y), cgoAllocsUnknown
	cw, _ := (C.int)(w), cgoAllocsUnknown
	ch, _ := (C.int)(h), cgoAllocsUnknown
	csp, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&sp)).Data)), cgoAllocsUnknown
	cspan, _ := (C.int)(span), cgoAllocsUnknown
	__ret := C.fz_new_glyph_from_8bpp_data(cctx, cx, cy, cw, ch, csp, cspan)
	__v := *(**FzGlyph)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewGlyphFrom1bppData function as declared in fitz/glyph.h:69
func FzNewGlyphFrom1bppData(ctx *FzContext, x int32, y int32, w int32, h int32, sp []byte, span int32) *FzGlyph {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cx, _ := (C.int)(x), cgoAllocsUnknown
	cy, _ := (C.int)(y), cgoAllocsUnknown
	cw, _ := (C.int)(w), cgoAllocsUnknown
	ch, _ := (C.int)(h), cgoAllocsUnknown
	csp, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&sp)).Data)), cgoAllocsUnknown
	cspan, _ := (C.int)(span), cgoAllocsUnknown
	__ret := C.fz_new_glyph_from_1bpp_data(cctx, cx, cy, cw, ch, csp, cspan)
	__v := *(**FzGlyph)(unsafe.Pointer(&__ret))
	return __v
}

// FzKeepGlyph function as declared in fitz/glyph.h:78
func FzKeepGlyph(ctx *FzContext, pix *FzGlyph) *FzGlyph {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := (*C.fz_glyph)(unsafe.Pointer(pix)), cgoAllocsUnknown
	__ret := C.fz_keep_glyph(cctx, cpix)
	__v := *(**FzGlyph)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropGlyph function as declared in fitz/glyph.h:86
func FzDropGlyph(ctx *FzContext, pix *FzGlyph) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := (*C.fz_glyph)(unsafe.Pointer(pix)), cgoAllocsUnknown
	C.fz_drop_glyph(cctx, cpix)
}

// FzGlyphBboxNoCtx function as declared in fitz/glyph.h:123
func FzGlyphBboxNoCtx(src *FzGlyph, bbox *FzIrect) *FzIrect {
	csrc, _ := (*C.fz_glyph)(unsafe.Pointer(src)), cgoAllocsUnknown
	cbbox, _ := (*C.fz_irect)(unsafe.Pointer(bbox)), cgoAllocsUnknown
	__ret := C.fz_glyph_bbox_no_ctx(csrc, cbbox)
	__v := *(**FzIrect)(unsafe.Pointer(&__ret))
	return __v
}

// FzGlyphSize function as declared in fitz/glyph.h:126
func FzGlyphSize(ctx *FzContext, glyph *FzGlyph) uint {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cglyph, _ := (*C.fz_glyph)(unsafe.Pointer(glyph)), cgoAllocsUnknown
	__ret := C.fz_glyph_size(cctx, cglyph)
	__v := (uint)(__ret)
	return __v
}

// FzKeepBitmap function as declared in fitz/bitmap.h:22
func FzKeepBitmap(ctx *FzContext, bit *FzBitmap) *FzBitmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbit, _ := (*C.fz_bitmap)(unsafe.Pointer(bit)), cgoAllocsUnknown
	__ret := C.fz_keep_bitmap(cctx, cbit)
	__v := *(**FzBitmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropBitmap function as declared in fitz/bitmap.h:30
func FzDropBitmap(ctx *FzContext, bit *FzBitmap) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbit, _ := (*C.fz_bitmap)(unsafe.Pointer(bit)), cgoAllocsUnknown
	C.fz_drop_bitmap(cctx, cbit)
}

// FzNewBitmapFromPixmap function as declared in fitz/bitmap.h:52
func FzNewBitmapFromPixmap(ctx *FzContext, pix *FzPixmap, ht []FzHalftone) *FzBitmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	cht, _ := (*C.fz_halftone)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ht)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_bitmap_from_pixmap(cctx, cpix, cht)
	__v := *(**FzBitmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewBitmapFromPixmapBand function as declared in fitz/bitmap.h:70
func FzNewBitmapFromPixmapBand(ctx *FzContext, pix *FzPixmap, ht []FzHalftone, bandStart int32) *FzBitmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpix, _ := pix.PassRef()
	cht, _ := (*C.fz_halftone)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ht)).Data)), cgoAllocsUnknown
	cbandStart, _ := (C.int)(bandStart), cgoAllocsUnknown
	__ret := C.fz_new_bitmap_from_pixmap_band(cctx, cpix, cht, cbandStart)
	__v := *(**FzBitmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewBitmap function as declared in fitz/bitmap.h:92
func FzNewBitmap(ctx *FzContext, w int32, h int32, n int32, xres int32, yres int32) *FzBitmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cw, _ := (C.int)(w), cgoAllocsUnknown
	ch, _ := (C.int)(h), cgoAllocsUnknown
	cn, _ := (C.int)(n), cgoAllocsUnknown
	cxres, _ := (C.int)(xres), cgoAllocsUnknown
	cyres, _ := (C.int)(yres), cgoAllocsUnknown
	__ret := C.fz_new_bitmap(cctx, cw, ch, cn, cxres, cyres)
	__v := *(**FzBitmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzBitmapDetails function as declared in fitz/bitmap.h:107
func FzBitmapDetails(bitmap *FzBitmap, w *int32, h []int32, n []int32, stride []int32) {
	cbitmap, _ := (*C.fz_bitmap)(unsafe.Pointer(bitmap)), cgoAllocsUnknown
	cw, _ := (*C.int)(unsafe.Pointer(w)), cgoAllocsUnknown
	ch, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&h)).Data)), cgoAllocsUnknown
	cn, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&n)).Data)), cgoAllocsUnknown
	cstride, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&stride)).Data)), cgoAllocsUnknown
	C.fz_bitmap_details(cbitmap, cw, ch, cn, cstride)
}

// FzClearBitmap function as declared in fitz/bitmap.h:114
func FzClearBitmap(ctx *FzContext, bit *FzBitmap) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbit, _ := (*C.fz_bitmap)(unsafe.Pointer(bit)), cgoAllocsUnknown
	C.fz_clear_bitmap(cctx, cbit)
}

// FzDefaultHalftone function as declared in fitz/bitmap.h:126
func FzDefaultHalftone(ctx *FzContext, numComps int32) *FzHalftone {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cnumComps, _ := (C.int)(numComps), cgoAllocsUnknown
	__ret := C.fz_default_halftone(cctx, cnumComps)
	__v := *(**FzHalftone)(unsafe.Pointer(&__ret))
	return __v
}

// FzKeepHalftone function as declared in fitz/bitmap.h:132
func FzKeepHalftone(ctx *FzContext, half *FzHalftone) *FzHalftone {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	chalf, _ := (*C.fz_halftone)(unsafe.Pointer(half)), cgoAllocsUnknown
	__ret := C.fz_keep_halftone(cctx, chalf)
	__v := *(**FzHalftone)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropHalftone function as declared in fitz/bitmap.h:138
func FzDropHalftone(ctx *FzContext, ht *FzHalftone) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cht, _ := (*C.fz_halftone)(unsafe.Pointer(ht)), cgoAllocsUnknown
	C.fz_drop_halftone(cctx, cht)
}

// FzGetPixmapFromImage function as declared in fitz/image.h:47
func FzGetPixmapFromImage(ctx *FzContext, image *FzImage, subarea []FzIrect, trans []FzMatrix, w []int32, h []int32) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cimage, _ := (*C.fz_image)(unsafe.Pointer(image)), cgoAllocsUnknown
	csubarea, _ := (*C.fz_irect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&subarea)).Data)), cgoAllocsUnknown
	ctrans, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&trans)).Data)), cgoAllocsUnknown
	cw, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&w)).Data)), cgoAllocsUnknown
	ch, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&h)).Data)), cgoAllocsUnknown
	__ret := C.fz_get_pixmap_from_image(cctx, cimage, csubarea, ctrans, cw, ch)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropImage function as declared in fitz/image.h:54
func FzDropImage(ctx *FzContext, image *FzImage) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cimage, _ := (*C.fz_image)(unsafe.Pointer(image)), cgoAllocsUnknown
	C.fz_drop_image(cctx, cimage)
}

// FzKeepImage function as declared in fitz/image.h:63
func FzKeepImage(ctx *FzContext, image *FzImage) *FzImage {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cimage, _ := (*C.fz_image)(unsafe.Pointer(image)), cgoAllocsUnknown
	__ret := C.fz_keep_image(cctx, cimage)
	__v := *(**FzImage)(unsafe.Pointer(&__ret))
	return __v
}

// FzKeepImageStoreKey function as declared in fitz/image.h:65
func FzKeepImageStoreKey(ctx *FzContext, image *FzImage) *FzImage {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cimage, _ := (*C.fz_image)(unsafe.Pointer(image)), cgoAllocsUnknown
	__ret := C.fz_keep_image_store_key(cctx, cimage)
	__v := *(**FzImage)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropImageStoreKey function as declared in fitz/image.h:66
func FzDropImageStoreKey(ctx *FzContext, image *FzImage) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cimage, _ := (*C.fz_image)(unsafe.Pointer(image)), cgoAllocsUnknown
	C.fz_drop_image_store_key(cctx, cimage)
}

// FzNewImageFromCompressedBuffer function as declared in fitz/image.h:205
func FzNewImageFromCompressedBuffer(ctx *FzContext, w int32, h int32, bpc int32, colorspace []FzColorspace, xres int32, yres int32, interpolate int32, imagemask int32, decode []float32, colorkey []int32, buffer []FzCompressedBuffer, mask []FzImage) *FzImage {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cw, _ := (C.int)(w), cgoAllocsUnknown
	ch, _ := (C.int)(h), cgoAllocsUnknown
	cbpc, _ := (C.int)(bpc), cgoAllocsUnknown
	ccolorspace, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorspace)).Data)), cgoAllocsUnknown
	cxres, _ := (C.int)(xres), cgoAllocsUnknown
	cyres, _ := (C.int)(yres), cgoAllocsUnknown
	cinterpolate, _ := (C.int)(interpolate), cgoAllocsUnknown
	cimagemask, _ := (C.int)(imagemask), cgoAllocsUnknown
	cdecode, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&decode)).Data)), cgoAllocsUnknown
	ccolorkey, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorkey)).Data)), cgoAllocsUnknown
	cbuffer, _ := (*C.fz_compressed_buffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buffer)).Data)), cgoAllocsUnknown
	cmask, _ := (*C.fz_image)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&mask)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_image_from_compressed_buffer(cctx, cw, ch, cbpc, ccolorspace, cxres, cyres, cinterpolate, cimagemask, cdecode, ccolorkey, cbuffer, cmask)
	__v := *(**FzImage)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewImageFromPixmap function as declared in fitz/image.h:218
func FzNewImageFromPixmap(ctx *FzContext, pixmap *FzPixmap, mask []FzImage) *FzImage {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpixmap, _ := pixmap.PassRef()
	cmask, _ := (*C.fz_image)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&mask)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_image_from_pixmap(cctx, cpixmap, cmask)
	__v := *(**FzImage)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewImageFromBuffer function as declared in fitz/image.h:225
func FzNewImageFromBuffer(ctx *FzContext, buffer *FzBuffer) *FzImage {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuffer, _ := (*C.fz_buffer)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	__ret := C.fz_new_image_from_buffer(cctx, cbuffer)
	__v := *(**FzImage)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewImageFromFile function as declared in fitz/image.h:232
func FzNewImageFromFile(ctx *FzContext, path string) *FzImage {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	__ret := C.fz_new_image_from_file(cctx, cpath)
	runtime.KeepAlive(path)
	__v := *(**FzImage)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropImageImp function as declared in fitz/image.h:234
func FzDropImageImp(ctx *FzContext, image *FzStorable) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cimage, _ := (*C.fz_storable)(unsafe.Pointer(image)), cgoAllocsUnknown
	C.fz_drop_image_imp(cctx, cimage)
}

// FzDropImageBase function as declared in fitz/image.h:235
func FzDropImageBase(ctx *FzContext, image *FzImage) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cimage, _ := (*C.fz_image)(unsafe.Pointer(image)), cgoAllocsUnknown
	C.fz_drop_image_base(cctx, cimage)
}

// FzDecompImageFromStream function as declared in fitz/image.h:236
func FzDecompImageFromStream(ctx *FzContext, stm *FzStream, image []FzCompressedImage, subarea []FzIrect, indexed int32, l2factor int32) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstm, _ := (*C.fz_stream)(unsafe.Pointer(stm)), cgoAllocsUnknown
	cimage, _ := (*C.fz_compressed_image)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&image)).Data)), cgoAllocsUnknown
	csubarea, _ := (*C.fz_irect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&subarea)).Data)), cgoAllocsUnknown
	cindexed, _ := (C.int)(indexed), cgoAllocsUnknown
	cl2factor, _ := (C.int)(l2factor), cgoAllocsUnknown
	__ret := C.fz_decomp_image_from_stream(cctx, cstm, cimage, csubarea, cindexed, cl2factor)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzIndexedColorspacePalette function as declared in fitz/image.h:237
func FzIndexedColorspacePalette(ctx *FzContext, cs *FzColorspace, high []int32) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer(cs)), cgoAllocsUnknown
	chigh, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&high)).Data)), cgoAllocsUnknown
	__ret := C.fz_indexed_colorspace_palette(cctx, ccs, chigh)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// FzExpandIndexedPixmap function as declared in fitz/image.h:238
func FzExpandIndexedPixmap(ctx *FzContext, src *FzPixmap, alpha int32) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csrc, _ := src.PassRef()
	calpha, _ := (C.int)(alpha), cgoAllocsUnknown
	__ret := C.fz_expand_indexed_pixmap(cctx, csrc, calpha)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzImageSize function as declared in fitz/image.h:239
func FzImageSize(ctx *FzContext, im *FzImage) uint {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cim, _ := (*C.fz_image)(unsafe.Pointer(im)), cgoAllocsUnknown
	__ret := C.fz_image_size(cctx, cim)
	__v := (uint)(__ret)
	return __v
}

// FzLoadJpeg function as declared in fitz/image.h:269
func FzLoadJpeg(ctx *FzContext, data string, size uint) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fz_load_jpeg(cctx, cdata, csize)
	runtime.KeepAlive(data)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzLoadJpx function as declared in fitz/image.h:270
func FzLoadJpx(ctx *FzContext, data string, size uint, cs []FzColorspace) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cs)).Data)), cgoAllocsUnknown
	__ret := C.fz_load_jpx(cctx, cdata, csize, ccs)
	runtime.KeepAlive(data)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzLoadPng function as declared in fitz/image.h:271
func FzLoadPng(ctx *FzContext, data string, size uint) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fz_load_png(cctx, cdata, csize)
	runtime.KeepAlive(data)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzLoadTiff function as declared in fitz/image.h:272
func FzLoadTiff(ctx *FzContext, data string, size uint) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fz_load_tiff(cctx, cdata, csize)
	runtime.KeepAlive(data)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzLoadJxr function as declared in fitz/image.h:273
func FzLoadJxr(ctx *FzContext, data string, size uint) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fz_load_jxr(cctx, cdata, csize)
	runtime.KeepAlive(data)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzLoadGif function as declared in fitz/image.h:274
func FzLoadGif(ctx *FzContext, data string, size uint) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fz_load_gif(cctx, cdata, csize)
	runtime.KeepAlive(data)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzLoadBmp function as declared in fitz/image.h:275
func FzLoadBmp(ctx *FzContext, data string, size uint) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fz_load_bmp(cctx, cdata, csize)
	runtime.KeepAlive(data)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzLoadPnm function as declared in fitz/image.h:276
func FzLoadPnm(ctx *FzContext, data string, size uint) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fz_load_pnm(cctx, cdata, csize)
	runtime.KeepAlive(data)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzLoadJpegInfo function as declared in fitz/image.h:278
func FzLoadJpegInfo(ctx *FzContext, data string, size uint, w []int32, h []int32, xres []int32, yres []int32, cspace [][]FzColorspace) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	cw, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&w)).Data)), cgoAllocsUnknown
	ch, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&h)).Data)), cgoAllocsUnknown
	cxres, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&xres)).Data)), cgoAllocsUnknown
	cyres, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&yres)).Data)), cgoAllocsUnknown
	ccspace, _ := unpackArgSSFzColorspace(cspace)
	C.fz_load_jpeg_info(cctx, cdata, csize, cw, ch, cxres, cyres, ccspace)
	packSSFzColorspace(cspace, ccspace)
	runtime.KeepAlive(data)
}

// FzLoadJpxInfo function as declared in fitz/image.h:279
func FzLoadJpxInfo(ctx *FzContext, data string, size uint, w []int32, h []int32, xres []int32, yres []int32, cspace [][]FzColorspace) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	cw, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&w)).Data)), cgoAllocsUnknown
	ch, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&h)).Data)), cgoAllocsUnknown
	cxres, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&xres)).Data)), cgoAllocsUnknown
	cyres, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&yres)).Data)), cgoAllocsUnknown
	ccspace, _ := unpackArgSSFzColorspace(cspace)
	C.fz_load_jpx_info(cctx, cdata, csize, cw, ch, cxres, cyres, ccspace)
	packSSFzColorspace(cspace, ccspace)
	runtime.KeepAlive(data)
}

// FzLoadPngInfo function as declared in fitz/image.h:280
func FzLoadPngInfo(ctx *FzContext, data string, size uint, w []int32, h []int32, xres []int32, yres []int32, cspace [][]FzColorspace) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	cw, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&w)).Data)), cgoAllocsUnknown
	ch, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&h)).Data)), cgoAllocsUnknown
	cxres, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&xres)).Data)), cgoAllocsUnknown
	cyres, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&yres)).Data)), cgoAllocsUnknown
	ccspace, _ := unpackArgSSFzColorspace(cspace)
	C.fz_load_png_info(cctx, cdata, csize, cw, ch, cxres, cyres, ccspace)
	packSSFzColorspace(cspace, ccspace)
	runtime.KeepAlive(data)
}

// FzLoadTiffInfo function as declared in fitz/image.h:281
func FzLoadTiffInfo(ctx *FzContext, data string, size uint, w []int32, h []int32, xres []int32, yres []int32, cspace [][]FzColorspace) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	cw, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&w)).Data)), cgoAllocsUnknown
	ch, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&h)).Data)), cgoAllocsUnknown
	cxres, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&xres)).Data)), cgoAllocsUnknown
	cyres, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&yres)).Data)), cgoAllocsUnknown
	ccspace, _ := unpackArgSSFzColorspace(cspace)
	C.fz_load_tiff_info(cctx, cdata, csize, cw, ch, cxres, cyres, ccspace)
	packSSFzColorspace(cspace, ccspace)
	runtime.KeepAlive(data)
}

// FzLoadJxrInfo function as declared in fitz/image.h:282
func FzLoadJxrInfo(ctx *FzContext, data string, size uint, w []int32, h []int32, xres []int32, yres []int32, cspace [][]FzColorspace) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	cw, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&w)).Data)), cgoAllocsUnknown
	ch, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&h)).Data)), cgoAllocsUnknown
	cxres, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&xres)).Data)), cgoAllocsUnknown
	cyres, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&yres)).Data)), cgoAllocsUnknown
	ccspace, _ := unpackArgSSFzColorspace(cspace)
	C.fz_load_jxr_info(cctx, cdata, csize, cw, ch, cxres, cyres, ccspace)
	packSSFzColorspace(cspace, ccspace)
	runtime.KeepAlive(data)
}

// FzLoadGifInfo function as declared in fitz/image.h:283
func FzLoadGifInfo(ctx *FzContext, data string, size uint, w []int32, h []int32, xres []int32, yres []int32, cspace [][]FzColorspace) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	cw, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&w)).Data)), cgoAllocsUnknown
	ch, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&h)).Data)), cgoAllocsUnknown
	cxres, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&xres)).Data)), cgoAllocsUnknown
	cyres, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&yres)).Data)), cgoAllocsUnknown
	ccspace, _ := unpackArgSSFzColorspace(cspace)
	C.fz_load_gif_info(cctx, cdata, csize, cw, ch, cxres, cyres, ccspace)
	packSSFzColorspace(cspace, ccspace)
	runtime.KeepAlive(data)
}

// FzLoadBmpInfo function as declared in fitz/image.h:284
func FzLoadBmpInfo(ctx *FzContext, data string, size uint, w []int32, h []int32, xres []int32, yres []int32, cspace [][]FzColorspace) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	cw, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&w)).Data)), cgoAllocsUnknown
	ch, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&h)).Data)), cgoAllocsUnknown
	cxres, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&xres)).Data)), cgoAllocsUnknown
	cyres, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&yres)).Data)), cgoAllocsUnknown
	ccspace, _ := unpackArgSSFzColorspace(cspace)
	C.fz_load_bmp_info(cctx, cdata, csize, cw, ch, cxres, cyres, ccspace)
	packSSFzColorspace(cspace, ccspace)
	runtime.KeepAlive(data)
}

// FzLoadPnmInfo function as declared in fitz/image.h:285
func FzLoadPnmInfo(ctx *FzContext, data string, size uint, w []int32, h []int32, xres []int32, yres []int32, cspace [][]FzColorspace) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	data = safeString(data)
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	cw, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&w)).Data)), cgoAllocsUnknown
	ch, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&h)).Data)), cgoAllocsUnknown
	cxres, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&xres)).Data)), cgoAllocsUnknown
	cyres, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&yres)).Data)), cgoAllocsUnknown
	ccspace, _ := unpackArgSSFzColorspace(cspace)
	C.fz_load_pnm_info(cctx, cdata, csize, cw, ch, cxres, cyres, ccspace)
	packSSFzColorspace(cspace, ccspace)
	runtime.KeepAlive(data)
}

// FzLoadTiffSubimageCount function as declared in fitz/image.h:287
func FzLoadTiffSubimageCount(ctx *FzContext, buf string, len uint) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	buf = safeString(buf)
	cbuf, _ := unpackPUcharString(buf)
	clen, _ := (C.size_t)(len), cgoAllocsUnknown
	__ret := C.fz_load_tiff_subimage_count(cctx, cbuf, clen)
	runtime.KeepAlive(buf)
	__v := (int32)(__ret)
	return __v
}

// FzLoadTiffSubimage function as declared in fitz/image.h:288
func FzLoadTiffSubimage(ctx *FzContext, buf string, len uint, subimage int32) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	buf = safeString(buf)
	cbuf, _ := unpackPUcharString(buf)
	clen, _ := (C.size_t)(len), cgoAllocsUnknown
	csubimage, _ := (C.int)(subimage), cgoAllocsUnknown
	__ret := C.fz_load_tiff_subimage(cctx, cbuf, clen, csubimage)
	runtime.KeepAlive(buf)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzImageResolution function as declared in fitz/image.h:298
func FzImageResolution(image *FzImage, xres *int32, yres []int32) {
	cimage, _ := (*C.fz_image)(unsafe.Pointer(image)), cgoAllocsUnknown
	cxres, _ := (*C.int)(unsafe.Pointer(xres)), cgoAllocsUnknown
	cyres, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&yres)).Data)), cgoAllocsUnknown
	C.fz_image_resolution(cimage, cxres, cyres)
}

// FzCompressedImageTile function as declared in fitz/image.h:300
func FzCompressedImageTile(ctx *FzContext, cimg *FzCompressedImage) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccimg, _ := (*C.fz_compressed_image)(unsafe.Pointer(cimg)), cgoAllocsUnknown
	__ret := C.fz_compressed_image_tile(cctx, ccimg)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzSetCompressedImageTile function as declared in fitz/image.h:301
func FzSetCompressedImageTile(ctx *FzContext, cimg *FzCompressedImage, pix []FzPixmap) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccimg, _ := (*C.fz_compressed_image)(unsafe.Pointer(cimg)), cgoAllocsUnknown
	cpix, _ := unpackArgSFzPixmap(pix)
	C.fz_set_compressed_image_tile(cctx, ccimg, cpix)
	packSFzPixmap(pix, cpix)
}

// FzCompressedImageBuffer function as declared in fitz/image.h:314
func FzCompressedImageBuffer(ctx *FzContext, image *FzImage) *FzCompressedBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cimage, _ := (*C.fz_image)(unsafe.Pointer(image)), cgoAllocsUnknown
	__ret := C.fz_compressed_image_buffer(cctx, cimage)
	__v := *(**FzCompressedBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// FzSetCompressedImageBuffer function as declared in fitz/image.h:315
func FzSetCompressedImageBuffer(ctx *FzContext, cimg *FzCompressedImage, buf []FzCompressedBuffer) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccimg, _ := (*C.fz_compressed_image)(unsafe.Pointer(cimg)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_compressed_buffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buf)).Data)), cgoAllocsUnknown
	C.fz_set_compressed_image_buffer(cctx, ccimg, cbuf)
}

// FzPixmapImageTile function as declared in fitz/image.h:328
func FzPixmapImageTile(ctx *FzContext, cimg *FzPixmapImage) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccimg, _ := (*C.fz_pixmap_image)(unsafe.Pointer(cimg)), cgoAllocsUnknown
	__ret := C.fz_pixmap_image_tile(cctx, ccimg)
	__v := NewFzPixmapRef(unsafe.Pointer(__ret))
	return __v
}

// FzSetPixmapImageTile function as declared in fitz/image.h:329
func FzSetPixmapImageTile(ctx *FzContext, cimg *FzPixmapImage, pix []FzPixmap) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccimg, _ := (*C.fz_pixmap_image)(unsafe.Pointer(cimg)), cgoAllocsUnknown
	cpix, _ := unpackArgSFzPixmap(pix)
	C.fz_set_pixmap_image_tile(cctx, ccimg, cpix)
	packSFzPixmap(pix, cpix)
}

// FzKeepShade function as declared in fitz/shade.h:89
func FzKeepShade(ctx *FzContext, shade *FzShade) *FzShade {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cshade, _ := (*C.fz_shade)(unsafe.Pointer(shade)), cgoAllocsUnknown
	__ret := C.fz_keep_shade(cctx, cshade)
	__v := *(**FzShade)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropShade function as declared in fitz/shade.h:97
func FzDropShade(ctx *FzContext, shade *FzShade) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cshade, _ := (*C.fz_shade)(unsafe.Pointer(shade)), cgoAllocsUnknown
	C.fz_drop_shade(cctx, cshade)
}

// FzDropShadeImp function as declared in fitz/shade.h:105
func FzDropShadeImp(ctx *FzContext, shade *FzStorable) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cshade, _ := (*C.fz_storable)(unsafe.Pointer(shade)), cgoAllocsUnknown
	C.fz_drop_shade_imp(cctx, cshade)
}

// FzBoundShade function as declared in fitz/shade.h:118
func FzBoundShade(ctx *FzContext, shade *FzShade, ctm []FzMatrix, r []FzRect) *FzRect {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cshade, _ := (*C.fz_shade)(unsafe.Pointer(shade)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	cr, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&r)).Data)), cgoAllocsUnknown
	__ret := C.fz_bound_shade(cctx, cshade, cctm, cr)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

// FzPaintShade function as declared in fitz/shade.h:139
func FzPaintShade(ctx *FzContext, shade *FzShade, overrideCs []FzColorspace, ctm []FzMatrix, dest []FzPixmap, colorParams []FzColorParams, bbox []FzIrect, op []FzOverprint) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cshade, _ := (*C.fz_shade)(unsafe.Pointer(shade)), cgoAllocsUnknown
	coverrideCs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&overrideCs)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	cdest, _ := unpackArgSFzPixmap(dest)
	ccolorParams, _ := (*C.fz_color_params)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorParams)).Data)), cgoAllocsUnknown
	cbbox, _ := (*C.fz_irect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&bbox)).Data)), cgoAllocsUnknown
	cop, _ := (*C.fz_overprint)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&op)).Data)), cgoAllocsUnknown
	C.fz_paint_shade(cctx, cshade, coverrideCs, cctm, cdest, ccolorParams, cbbox, cop)
	packSFzPixmap(dest, cdest)
}

// FzFontFtFace function as declared in fitz/font.h:33
func FzFontFtFace(ctx *FzContext, font *FzFont) unsafe.Pointer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	__ret := C.fz_font_ft_face(cctx, cfont)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// FzFontT3Procs function as declared in fitz/font.h:44
func FzFontT3Procs(ctx *FzContext, font *FzFont) []*FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	__ret := C.fz_font_t3_procs(cctx, cfont)
	__v := (*(*[0x7fffffff]*FzBuffer)(unsafe.Pointer(__ret)))[:0]
	return __v
}

// fzFontFlags function as declared in fitz/font.h:89
func fzFontFlags(font *FzFont) *FzFontFlags {
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	__ret := C.fz_font_flags(cfont)
	__v := *(**FzFontFlags)(unsafe.Pointer(&__ret))
	return __v
}

// FzFontShaperData function as declared in fitz/font.h:115
func FzFontShaperData(ctx *FzContext, font *FzFont) *FzShaperData {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	__ret := C.fz_font_shaper_data(cctx, cfont)
	__v := *(**FzShaperData)(unsafe.Pointer(&__ret))
	return __v
}

// FzFontName function as declared in fitz/font.h:125
func FzFontName(ctx *FzContext, font *FzFont) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	__ret := C.fz_font_name(cctx, cfont)
	__v := packPCharString(__ret)
	return __v
}

// FzFontIsBold function as declared in fitz/font.h:130
func FzFontIsBold(ctx *FzContext, font *FzFont) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	__ret := C.fz_font_is_bold(cctx, cfont)
	__v := (int32)(__ret)
	return __v
}

// FzFontIsItalic function as declared in fitz/font.h:135
func FzFontIsItalic(ctx *FzContext, font *FzFont) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	__ret := C.fz_font_is_italic(cctx, cfont)
	__v := (int32)(__ret)
	return __v
}

// FzFontIsSerif function as declared in fitz/font.h:140
func FzFontIsSerif(ctx *FzContext, font *FzFont) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	__ret := C.fz_font_is_serif(cctx, cfont)
	__v := (int32)(__ret)
	return __v
}

// FzFontIsMonospaced function as declared in fitz/font.h:145
func FzFontIsMonospaced(ctx *FzContext, font *FzFont) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	__ret := C.fz_font_is_monospaced(cctx, cfont)
	__v := (int32)(__ret)
	return __v
}

// FzFontBbox function as declared in fitz/font.h:155
func FzFontBbox(ctx *FzContext, font *FzFont) *FzRect {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	__ret := C.fz_font_bbox(cctx, cfont)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

// FzLoadSystemFont function as declared in fitz/font.h:220
func FzLoadSystemFont(ctx *FzContext, name string, bold int32, italic int32, needsExactMetrics int32) *FzFont {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	cbold, _ := (C.int)(bold), cgoAllocsUnknown
	citalic, _ := (C.int)(italic), cgoAllocsUnknown
	cneedsExactMetrics, _ := (C.int)(needsExactMetrics), cgoAllocsUnknown
	__ret := C.fz_load_system_font(cctx, cname, cbold, citalic, cneedsExactMetrics)
	runtime.KeepAlive(name)
	__v := *(**FzFont)(unsafe.Pointer(&__ret))
	return __v
}

// FzLoadSystemCjkFont function as declared in fitz/font.h:235
func FzLoadSystemCjkFont(ctx *FzContext, name string, ros int32, serif int32) *FzFont {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	cros, _ := (C.int)(ros), cgoAllocsUnknown
	cserif, _ := (C.int)(serif), cgoAllocsUnknown
	__ret := C.fz_load_system_cjk_font(cctx, cname, cros, cserif)
	runtime.KeepAlive(name)
	__v := *(**FzFont)(unsafe.Pointer(&__ret))
	return __v
}

// FzLookupBuiltinFont function as declared in fitz/font.h:253
func FzLookupBuiltinFont(ctx *FzContext, name string, bold int32, italic int32, len []int32) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	cbold, _ := (C.int)(bold), cgoAllocsUnknown
	citalic, _ := (C.int)(italic), cgoAllocsUnknown
	clen, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&len)).Data)), cgoAllocsUnknown
	__ret := C.fz_lookup_builtin_font(cctx, cname, cbold, citalic, clen)
	runtime.KeepAlive(name)
	__v := packPUcharString(__ret)
	return __v
}

// FzLookupBase14Font function as declared in fitz/font.h:267
func FzLookupBase14Font(ctx *FzContext, name string, len []int32) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	clen, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&len)).Data)), cgoAllocsUnknown
	__ret := C.fz_lookup_base14_font(cctx, cname, clen)
	runtime.KeepAlive(name)
	__v := packPUcharString(__ret)
	return __v
}

// FzLookupIcc function as declared in fitz/font.h:279
func FzLookupIcc(ctx *FzContext, name string, len []uint) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	clen, _ := (*C.size_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&len)).Data)), cgoAllocsUnknown
	__ret := C.fz_lookup_icc(cctx, cname, clen)
	runtime.KeepAlive(name)
	__v := packPUcharString(__ret)
	return __v
}

// FzLookupCjkFont function as declared in fitz/font.h:301
func FzLookupCjkFont(ctx *FzContext, registry int32, serif int32, wmode int32, len []int32, index []int32) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cregistry, _ := (C.int)(registry), cgoAllocsUnknown
	cserif, _ := (C.int)(serif), cgoAllocsUnknown
	cwmode, _ := (C.int)(wmode), cgoAllocsUnknown
	clen, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&len)).Data)), cgoAllocsUnknown
	cindex, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&index)).Data)), cgoAllocsUnknown
	__ret := C.fz_lookup_cjk_font(cctx, cregistry, cserif, cwmode, clen, cindex)
	__v := packPUcharString(__ret)
	return __v
}

// FzLookupNotoFont function as declared in fitz/font.h:319
func FzLookupNotoFont(ctx *FzContext, script int32, lang int32, serif int32, len []int32) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cscript, _ := (C.int)(script), cgoAllocsUnknown
	clang, _ := (C.int)(lang), cgoAllocsUnknown
	cserif, _ := (C.int)(serif), cgoAllocsUnknown
	clen, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&len)).Data)), cgoAllocsUnknown
	__ret := C.fz_lookup_noto_font(cctx, cscript, clang, cserif, clen)
	__v := packPUcharString(__ret)
	return __v
}

// FzLookupNotoSymbolFont function as declared in fitz/font.h:331
func FzLookupNotoSymbolFont(ctx *FzContext, len *int32) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	clen, _ := (*C.int)(unsafe.Pointer(len)), cgoAllocsUnknown
	__ret := C.fz_lookup_noto_symbol_font(cctx, clen)
	__v := packPUcharString(__ret)
	return __v
}

// FzLookupNotoEmojiFont function as declared in fitz/font.h:343
func FzLookupNotoEmojiFont(ctx *FzContext, len *int32) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	clen, _ := (*C.int)(unsafe.Pointer(len)), cgoAllocsUnknown
	__ret := C.fz_lookup_noto_emoji_font(cctx, clen)
	__v := packPUcharString(__ret)
	return __v
}

// FzLoadFallbackFont function as declared in fitz/font.h:363
func FzLoadFallbackFont(ctx *FzContext, script int32, language int32, serif int32, bold int32, italic int32) *FzFont {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cscript, _ := (C.int)(script), cgoAllocsUnknown
	clanguage, _ := (C.int)(language), cgoAllocsUnknown
	cserif, _ := (C.int)(serif), cgoAllocsUnknown
	cbold, _ := (C.int)(bold), cgoAllocsUnknown
	citalic, _ := (C.int)(italic), cgoAllocsUnknown
	__ret := C.fz_load_fallback_font(cctx, cscript, clanguage, cserif, cbold, citalic)
	__v := *(**FzFont)(unsafe.Pointer(&__ret))
	return __v
}

// FzLoadFallbackSymbolFont function as declared in fitz/font.h:372
func FzLoadFallbackSymbolFont(ctx *FzContext) *FzFont {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_load_fallback_symbol_font(cctx)
	__v := *(**FzFont)(unsafe.Pointer(&__ret))
	return __v
}

// FzLoadFallbackEmojiFont function as declared in fitz/font.h:381
func FzLoadFallbackEmojiFont(ctx *FzContext) *FzFont {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_load_fallback_emoji_font(cctx)
	__v := *(**FzFont)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewType3Font function as declared in fitz/font.h:393
func FzNewType3Font(ctx *FzContext, name string, matrix []FzMatrix) *FzFont {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	cmatrix, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&matrix)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_type3_font(cctx, cname, cmatrix)
	runtime.KeepAlive(name)
	__v := *(**FzFont)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewFontFromMemory function as declared in fitz/font.h:411
func FzNewFontFromMemory(ctx *FzContext, name string, data string, len int32, index int32, useGlyphBbox int32) *FzFont {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	data = safeString(data)
	cdata, _ := unpackPUcharString(data)
	clen, _ := (C.int)(len), cgoAllocsUnknown
	cindex, _ := (C.int)(index), cgoAllocsUnknown
	cuseGlyphBbox, _ := (C.int)(useGlyphBbox), cgoAllocsUnknown
	__ret := C.fz_new_font_from_memory(cctx, cname, cdata, clen, cindex, cuseGlyphBbox)
	runtime.KeepAlive(data)
	runtime.KeepAlive(name)
	__v := *(**FzFont)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewFontFromBuffer function as declared in fitz/font.h:427
func FzNewFontFromBuffer(ctx *FzContext, name string, buffer []FzBuffer, index int32, useGlyphBbox int32) *FzFont {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	cbuffer, _ := (*C.fz_buffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buffer)).Data)), cgoAllocsUnknown
	cindex, _ := (C.int)(index), cgoAllocsUnknown
	cuseGlyphBbox, _ := (C.int)(useGlyphBbox), cgoAllocsUnknown
	__ret := C.fz_new_font_from_buffer(cctx, cname, cbuffer, cindex, cuseGlyphBbox)
	runtime.KeepAlive(name)
	__v := *(**FzFont)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewFontFromFile function as declared in fitz/font.h:443
func FzNewFontFromFile(ctx *FzContext, name string, path string, index int32, useGlyphBbox int32) *FzFont {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	cindex, _ := (C.int)(index), cgoAllocsUnknown
	cuseGlyphBbox, _ := (C.int)(useGlyphBbox), cgoAllocsUnknown
	__ret := C.fz_new_font_from_file(cctx, cname, cpath, cindex, cuseGlyphBbox)
	runtime.KeepAlive(path)
	runtime.KeepAlive(name)
	__v := *(**FzFont)(unsafe.Pointer(&__ret))
	return __v
}

// FzKeepFont function as declared in fitz/font.h:452
func FzKeepFont(ctx *FzContext, font *FzFont) *FzFont {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	__ret := C.fz_keep_font(cctx, cfont)
	__v := *(**FzFont)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropFont function as declared in fitz/font.h:460
func FzDropFont(ctx *FzContext, font *FzFont) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	C.fz_drop_font(cctx, cfont)
}

// FzSetFontBbox function as declared in fitz/font.h:469
func FzSetFontBbox(ctx *FzContext, font *FzFont, xmin float32, ymin float32, xmax float32, ymax float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	cxmin, _ := (C.float)(xmin), cgoAllocsUnknown
	cymin, _ := (C.float)(ymin), cgoAllocsUnknown
	cxmax, _ := (C.float)(xmax), cgoAllocsUnknown
	cymax, _ := (C.float)(ymax), cgoAllocsUnknown
	C.fz_set_font_bbox(cctx, cfont, cxmin, cymin, cxmax, cymax)
}

// FzBoundGlyph function as declared in fitz/font.h:484
func FzBoundGlyph(ctx *FzContext, font *FzFont, gid int32, trm []FzMatrix, r []FzRect) *FzRect {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	cgid, _ := (C.int)(gid), cgoAllocsUnknown
	ctrm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&trm)).Data)), cgoAllocsUnknown
	cr, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&r)).Data)), cgoAllocsUnknown
	__ret := C.fz_bound_glyph(cctx, cfont, cgid, ctrm, cr)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

// FzGlyphCacheable function as declared in fitz/font.h:498
func FzGlyphCacheable(ctx *FzContext, font *FzFont, gid int32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	cgid, _ := (C.int)(gid), cgoAllocsUnknown
	__ret := C.fz_glyph_cacheable(cctx, cfont, cgid)
	__v := (int32)(__ret)
	return __v
}

// FzDecoupleType3Font function as declared in fitz/font.h:530
func FzDecoupleType3Font(ctx *FzContext, font *FzFont, t3doc unsafe.Pointer) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	ct3doc, _ := t3doc, cgoAllocsUnknown
	C.fz_decouple_type3_font(cctx, cfont, ct3doc)
}

// FzAdvanceGlyph function as declared in fitz/font.h:543
func FzAdvanceGlyph(ctx *FzContext, font *FzFont, glyph int32, wmode int32) float32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	cglyph, _ := (C.int)(glyph), cgoAllocsUnknown
	cwmode, _ := (C.int)(wmode), cgoAllocsUnknown
	__ret := C.fz_advance_glyph(cctx, cfont, cglyph, cwmode)
	__v := (float32)(__ret)
	return __v
}

// FzEncodeCharacter function as declared in fitz/font.h:556
func FzEncodeCharacter(ctx *FzContext, font *FzFont, unicode int32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	cunicode, _ := (C.int)(unicode), cgoAllocsUnknown
	__ret := C.fz_encode_character(cctx, cfont, cunicode)
	__v := (int32)(__ret)
	return __v
}

// FzEncodeCharacterWithFallback function as declared in fitz/font.h:583
func FzEncodeCharacterWithFallback(ctx *FzContext, font *FzFont, unicode int32, script int32, language int32, outFont [][]FzFont) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	cunicode, _ := (C.int)(unicode), cgoAllocsUnknown
	cscript, _ := (C.int)(script), cgoAllocsUnknown
	clanguage, _ := (C.int)(language), cgoAllocsUnknown
	coutFont, _ := unpackArgSSFzFont(outFont)
	__ret := C.fz_encode_character_with_fallback(cctx, cfont, cunicode, cscript, clanguage, coutFont)
	packSSFzFont(outFont, coutFont)
	__v := (int32)(__ret)
	return __v
}

// FzGetGlyphName function as declared in fitz/font.h:601
func FzGetGlyphName(ctx *FzContext, font *FzFont, glyph int32, buf []byte, size int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	cglyph, _ := (C.int)(glyph), cgoAllocsUnknown
	cbuf, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buf)).Data)), cgoAllocsUnknown
	csize, _ := (C.int)(size), cgoAllocsUnknown
	C.fz_get_glyph_name(cctx, cfont, cglyph, cbuf, csize)
}

// FzFontAscender function as declared in fitz/font.h:606
func FzFontAscender(ctx *FzContext, font *FzFont) float32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	__ret := C.fz_font_ascender(cctx, cfont)
	__v := (float32)(__ret)
	return __v
}

// FzFontDescender function as declared in fitz/font.h:607
func FzFontDescender(ctx *FzContext, font *FzFont) float32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	__ret := C.fz_font_descender(cctx, cfont)
	__v := (float32)(__ret)
	return __v
}

// FzHbLock function as declared in fitz/font.h:619
func FzHbLock(ctx *FzContext) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.fz_hb_lock(cctx)
}

// FzHbUnlock function as declared in fitz/font.h:625
func FzHbUnlock(ctx *FzContext) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.fz_hb_unlock(cctx)
}

// FzWalkPath function as declared in fitz/path.h:80
func FzWalkPath(ctx *FzContext, path *FzPath, walker []FzPathWalker, arg unsafe.Pointer) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpath, _ := (*C.fz_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	cwalker, _ := (*C.fz_path_walker)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&walker)).Data)), cgoAllocsUnknown
	carg, _ := arg, cgoAllocsUnknown
	C.fz_walk_path(cctx, cpath, cwalker, carg)
}

// FzNewPath function as declared in fitz/path.h:88
func FzNewPath(ctx *FzContext) *FzPath {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_new_path(cctx)
	__v := *(**FzPath)(unsafe.Pointer(&__ret))
	return __v
}

// FzKeepPath function as declared in fitz/path.h:100
func FzKeepPath(ctx *FzContext, path *FzPath) *FzPath {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpath, _ := (*C.fz_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	__ret := C.fz_keep_path(cctx, cpath)
	__v := *(**FzPath)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropPath function as declared in fitz/path.h:109
func FzDropPath(ctx *FzContext, path *FzPath) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpath, _ := (*C.fz_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	C.fz_drop_path(cctx, cpath)
}

// FzTrimPath function as declared in fitz/path.h:123
func FzTrimPath(ctx *FzContext, path *FzPath) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpath, _ := (*C.fz_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	C.fz_trim_path(cctx, cpath)
}

// FzPackedPathSize function as declared in fitz/path.h:131
func FzPackedPathSize(path *FzPath) int32 {
	cpath, _ := (*C.fz_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	__ret := C.fz_packed_path_size(cpath)
	__v := (int32)(__ret)
	return __v
}

// FzPackPath function as declared in fitz/path.h:173
func FzPackPath(ctx *FzContext, pack *byte, max int32, path []FzPath) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpack, _ := (*C.uint8_t)(unsafe.Pointer(pack)), cgoAllocsUnknown
	cmax, _ := (C.int)(max), cgoAllocsUnknown
	cpath, _ := (*C.fz_path)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&path)).Data)), cgoAllocsUnknown
	__ret := C.fz_pack_path(cctx, cpack, cmax, cpath)
	__v := (int32)(__ret)
	return __v
}

// FzClonePath function as declared in fitz/path.h:187
func FzClonePath(ctx *FzContext, path *FzPath) *FzPath {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpath, _ := (*C.fz_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	__ret := C.fz_clone_path(cctx, cpath)
	__v := *(**FzPath)(unsafe.Pointer(&__ret))
	return __v
}

// FzCurrentpoint function as declared in fitz/path.h:195
func FzCurrentpoint(ctx *FzContext, path *FzPath) FzPoint {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpath, _ := (*C.fz_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	__ret := C.fz_currentpoint(cctx, cpath)
	__v := *(*FzPoint)(unsafe.Pointer(&__ret))
	return __v
}

// FzMoveto function as declared in fitz/path.h:207
func FzMoveto(ctx *FzContext, path *FzPath, x float32, y float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpath, _ := (*C.fz_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	cx, _ := (C.float)(x), cgoAllocsUnknown
	cy, _ := (C.float)(y), cgoAllocsUnknown
	C.fz_moveto(cctx, cpath, cx, cy)
}

// FzLineto function as declared in fitz/path.h:218
func FzLineto(ctx *FzContext, path *FzPath, x float32, y float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpath, _ := (*C.fz_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	cx, _ := (C.float)(x), cgoAllocsUnknown
	cy, _ := (C.float)(y), cgoAllocsUnknown
	C.fz_lineto(cctx, cpath, cx, cy)
}

// FzRectto function as declared in fitz/path.h:238
func FzRectto(ctx *FzContext, path *FzPath, x0 float32, y0 float32, x1 float32, y1 float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpath, _ := (*C.fz_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	cx0, _ := (C.float)(x0), cgoAllocsUnknown
	cy0, _ := (C.float)(y0), cgoAllocsUnknown
	cx1, _ := (C.float)(x1), cgoAllocsUnknown
	cy1, _ := (C.float)(y1), cgoAllocsUnknown
	C.fz_rectto(cctx, cpath, cx0, cy0, cx1, cy1)
}

// FzQuadto function as declared in fitz/path.h:252
func FzQuadto(ctx *FzContext, path *FzPath, x0 float32, y0 float32, x1 float32, y1 float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpath, _ := (*C.fz_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	cx0, _ := (C.float)(x0), cgoAllocsUnknown
	cy0, _ := (C.float)(y0), cgoAllocsUnknown
	cx1, _ := (C.float)(x1), cgoAllocsUnknown
	cy1, _ := (C.float)(y1), cgoAllocsUnknown
	C.fz_quadto(cctx, cpath, cx0, cy0, cx1, cy1)
}

// FzCurveto function as declared in fitz/path.h:270
func FzCurveto(ctx *FzContext, path *FzPath, x0 float32, y0 float32, x1 float32, y1 float32, x2 float32, y2 float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpath, _ := (*C.fz_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	cx0, _ := (C.float)(x0), cgoAllocsUnknown
	cy0, _ := (C.float)(y0), cgoAllocsUnknown
	cx1, _ := (C.float)(x1), cgoAllocsUnknown
	cy1, _ := (C.float)(y1), cgoAllocsUnknown
	cx2, _ := (C.float)(x2), cgoAllocsUnknown
	cy2, _ := (C.float)(y2), cgoAllocsUnknown
	C.fz_curveto(cctx, cpath, cx0, cy0, cx1, cy1, cx2, cy2)
}

// FzCurvetov function as declared in fitz/path.h:286
func FzCurvetov(ctx *FzContext, path *FzPath, x1 float32, y1 float32, x2 float32, y2 float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpath, _ := (*C.fz_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	cx1, _ := (C.float)(x1), cgoAllocsUnknown
	cy1, _ := (C.float)(y1), cgoAllocsUnknown
	cx2, _ := (C.float)(x2), cgoAllocsUnknown
	cy2, _ := (C.float)(y2), cgoAllocsUnknown
	C.fz_curvetov(cctx, cpath, cx1, cy1, cx2, cy2)
}

// FzCurvetoy function as declared in fitz/path.h:303
func FzCurvetoy(ctx *FzContext, path *FzPath, x0 float32, y0 float32, x2 float32, y2 float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpath, _ := (*C.fz_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	cx0, _ := (C.float)(x0), cgoAllocsUnknown
	cy0, _ := (C.float)(y0), cgoAllocsUnknown
	cx2, _ := (C.float)(x2), cgoAllocsUnknown
	cy2, _ := (C.float)(y2), cgoAllocsUnknown
	C.fz_curvetoy(cctx, cpath, cx0, cy0, cx2, cy2)
}

// FzClosepath function as declared in fitz/path.h:313
func FzClosepath(ctx *FzContext, path *FzPath) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpath, _ := (*C.fz_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	C.fz_closepath(cctx, cpath)
}

// FzTransformPath function as declared in fitz/path.h:326
func FzTransformPath(ctx *FzContext, path *FzPath, transform []FzMatrix) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpath, _ := (*C.fz_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	ctransform, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&transform)).Data)), cgoAllocsUnknown
	C.fz_transform_path(cctx, cpath, ctransform)
}

// FzBoundPath function as declared in fitz/path.h:344
func FzBoundPath(ctx *FzContext, path *FzPath, stroke []FzStrokeState, ctm []FzMatrix, r []FzRect) *FzRect {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpath, _ := (*C.fz_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	cstroke, _ := (*C.fz_stroke_state)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&stroke)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	cr, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&r)).Data)), cgoAllocsUnknown
	__ret := C.fz_bound_path(cctx, cpath, cstroke, cctm, cr)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

// FzAdjustRectForStroke function as declared in fitz/path.h:345
func FzAdjustRectForStroke(ctx *FzContext, r *FzRect, stroke []FzStrokeState, ctm []FzMatrix) *FzRect {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cr, _ := (*C.fz_rect)(unsafe.Pointer(r)), cgoAllocsUnknown
	cstroke, _ := (*C.fz_stroke_state)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&stroke)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	__ret := C.fz_adjust_rect_for_stroke(cctx, cr, cstroke, cctm)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

var FzDefaultStrokeState FzStrokeState

// FzNewStrokeState function as declared in fitz/path.h:355
func FzNewStrokeState(ctx *FzContext) *FzStrokeState {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_new_stroke_state(cctx)
	__v := *(**FzStrokeState)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewStrokeStateWithDashLen function as declared in fitz/path.h:366
func FzNewStrokeStateWithDashLen(ctx *FzContext, len int32) *FzStrokeState {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	clen, _ := (C.int)(len), cgoAllocsUnknown
	__ret := C.fz_new_stroke_state_with_dash_len(cctx, clen)
	__v := *(**FzStrokeState)(unsafe.Pointer(&__ret))
	return __v
}

// FzKeepStrokeState function as declared in fitz/path.h:378
func FzKeepStrokeState(ctx *FzContext, stroke *FzStrokeState) *FzStrokeState {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstroke, _ := (*C.fz_stroke_state)(unsafe.Pointer(stroke)), cgoAllocsUnknown
	__ret := C.fz_keep_stroke_state(cctx, cstroke)
	__v := *(**FzStrokeState)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropStrokeState function as declared in fitz/path.h:387
func FzDropStrokeState(ctx *FzContext, stroke *FzStrokeState) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstroke, _ := (*C.fz_stroke_state)(unsafe.Pointer(stroke)), cgoAllocsUnknown
	C.fz_drop_stroke_state(cctx, cstroke)
}

// FzUnshareStrokeState function as declared in fitz/path.h:404
func FzUnshareStrokeState(ctx *FzContext, shared *FzStrokeState) *FzStrokeState {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cshared, _ := (*C.fz_stroke_state)(unsafe.Pointer(shared)), cgoAllocsUnknown
	__ret := C.fz_unshare_stroke_state(cctx, cshared)
	__v := *(**FzStrokeState)(unsafe.Pointer(&__ret))
	return __v
}

// FzUnshareStrokeStateWithDashLen function as declared in fitz/path.h:421
func FzUnshareStrokeStateWithDashLen(ctx *FzContext, shared *FzStrokeState, len int32) *FzStrokeState {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cshared, _ := (*C.fz_stroke_state)(unsafe.Pointer(shared)), cgoAllocsUnknown
	clen, _ := (C.int)(len), cgoAllocsUnknown
	__ret := C.fz_unshare_stroke_state_with_dash_len(cctx, cshared, clen)
	__v := *(**FzStrokeState)(unsafe.Pointer(&__ret))
	return __v
}

// FzCloneStrokeState function as declared in fitz/path.h:432
func FzCloneStrokeState(ctx *FzContext, stroke *FzStrokeState) *FzStrokeState {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstroke, _ := (*C.fz_stroke_state)(unsafe.Pointer(stroke)), cgoAllocsUnknown
	__ret := C.fz_clone_stroke_state(cctx, cstroke)
	__v := *(**FzStrokeState)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewText function as declared in fitz/text.h:72
func FzNewText(ctx *FzContext) *FzText {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_new_text(cctx)
	__v := *(**FzText)(unsafe.Pointer(&__ret))
	return __v
}

// FzKeepText function as declared in fitz/text.h:81
func FzKeepText(ctx *FzContext, text *FzText) *FzText {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctext, _ := (*C.fz_text)(unsafe.Pointer(text)), cgoAllocsUnknown
	__ret := C.fz_keep_text(cctx, ctext)
	__v := *(**FzText)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropText function as declared in fitz/text.h:89
func FzDropText(ctx *FzContext, text *FzText) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctext, _ := (*C.fz_text)(unsafe.Pointer(text)), cgoAllocsUnknown
	C.fz_drop_text(cctx, ctext)
}

// FzShowGlyph function as declared in fitz/text.h:116
func FzShowGlyph(ctx *FzContext, text *FzText, font []FzFont, trm []FzMatrix, glyph int32, unicode int32, wmode int32, bidiLevel int32, markupDir FzBidiDirection, language FzTextLanguage) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctext, _ := (*C.fz_text)(unsafe.Pointer(text)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&font)).Data)), cgoAllocsUnknown
	ctrm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&trm)).Data)), cgoAllocsUnknown
	cglyph, _ := (C.int)(glyph), cgoAllocsUnknown
	cunicode, _ := (C.int)(unicode), cgoAllocsUnknown
	cwmode, _ := (C.int)(wmode), cgoAllocsUnknown
	cbidiLevel, _ := (C.int)(bidiLevel), cgoAllocsUnknown
	cmarkupDir, _ := (C.fz_bidi_direction)(markupDir), cgoAllocsUnknown
	clanguage, _ := (C.fz_text_language)(language), cgoAllocsUnknown
	C.fz_show_glyph(cctx, ctext, cfont, ctrm, cglyph, cunicode, cwmode, cbidiLevel, cmarkupDir, clanguage)
}

// FzShowString function as declared in fitz/text.h:142
func FzShowString(ctx *FzContext, text *FzText, font []FzFont, trm []FzMatrix, s string, wmode int32, bidiLevel int32, markupDir FzBidiDirection, language FzTextLanguage) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctext, _ := (*C.fz_text)(unsafe.Pointer(text)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&font)).Data)), cgoAllocsUnknown
	ctrm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&trm)).Data)), cgoAllocsUnknown
	s = safeString(s)
	cs, _ := unpackPCharString(s)
	cwmode, _ := (C.int)(wmode), cgoAllocsUnknown
	cbidiLevel, _ := (C.int)(bidiLevel), cgoAllocsUnknown
	cmarkupDir, _ := (C.fz_bidi_direction)(markupDir), cgoAllocsUnknown
	clanguage, _ := (C.fz_text_language)(language), cgoAllocsUnknown
	C.fz_show_string(cctx, ctext, cfont, ctrm, cs, cwmode, cbidiLevel, cmarkupDir, clanguage)
	runtime.KeepAlive(s)
}

// FzBoundText function as declared in fitz/text.h:159
func FzBoundText(ctx *FzContext, text *FzText, stroke []FzStrokeState, ctm []FzMatrix, r []FzRect) *FzRect {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctext, _ := (*C.fz_text)(unsafe.Pointer(text)), cgoAllocsUnknown
	cstroke, _ := (*C.fz_stroke_state)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&stroke)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	cr, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&r)).Data)), cgoAllocsUnknown
	__ret := C.fz_bound_text(cctx, ctext, cstroke, cctm, cr)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

// FzCloneText function as declared in fitz/text.h:168
func FzCloneText(ctx *FzContext, text *FzText) *FzText {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctext, _ := (*C.fz_text)(unsafe.Pointer(text)), cgoAllocsUnknown
	__ret := C.fz_clone_text(cctx, ctext)
	__v := *(**FzText)(unsafe.Pointer(&__ret))
	return __v
}

// FzTextLanguageFromString function as declared in fitz/text.h:179
func FzTextLanguageFromString(str string) FzTextLanguage {
	str = safeString(str)
	cstr, _ := unpackPCharString(str)
	__ret := C.fz_text_language_from_string(cstr)
	runtime.KeepAlive(str)
	__v := (FzTextLanguage)(__ret)
	return __v
}

// FzStringFromTextLanguage function as declared in fitz/text.h:187
func FzStringFromTextLanguage(str *[8]byte, lang FzTextLanguage) *byte {
	cstr, _ := *(**C.char)(unsafe.Pointer(&str)), cgoAllocsUnknown
	clang, _ := (C.fz_text_language)(lang), cgoAllocsUnknown
	__ret := C.fz_string_from_text_language(cstr, clang)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// FzGetCmmEngine function as declared in fitz/color-management.h:88
func FzGetCmmEngine(ctx *FzContext) *FzCmmEngine {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_get_cmm_engine(cctx)
	__v := *(**FzCmmEngine)(unsafe.Pointer(&__ret))
	return __v
}

// FzSetCmmEngine function as declared in fitz/color-management.h:104
func FzSetCmmEngine(ctx *FzContext, engine *FzCmmEngine) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cengine, _ := (*C.fz_cmm_engine)(unsafe.Pointer(engine)), cgoAllocsUnknown
	C.fz_set_cmm_engine(cctx, cengine)
}

var FzCmmEngineLcms FzCmmEngine

// FzLookupBlendmode function as declared in fitz/device.h:75
func FzLookupBlendmode(name string) int32 {
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	__ret := C.fz_lookup_blendmode(cname)
	runtime.KeepAlive(name)
	__v := (int32)(__ret)
	return __v
}

// FzBlendmodeName function as declared in fitz/device.h:76
func FzBlendmodeName(blendmode int32) *byte {
	cblendmode, _ := (C.int)(blendmode), cgoAllocsUnknown
	__ret := C.fz_blendmode_name(cblendmode)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// FzFillPath function as declared in fitz/device.h:128
func FzFillPath(ctx *FzContext, dev *FzDevice, path []FzPath, evenOdd int32, ctm []FzMatrix, colorspace []FzColorspace, color []float32, alpha float32, colorParams []FzColorParams) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	cpath, _ := (*C.fz_path)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&path)).Data)), cgoAllocsUnknown
	cevenOdd, _ := (C.int)(evenOdd), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	ccolorspace, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorspace)).Data)), cgoAllocsUnknown
	ccolor, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&color)).Data)), cgoAllocsUnknown
	calpha, _ := (C.float)(alpha), cgoAllocsUnknown
	ccolorParams, _ := (*C.fz_color_params)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorParams)).Data)), cgoAllocsUnknown
	C.fz_fill_path(cctx, cdev, cpath, cevenOdd, cctm, ccolorspace, ccolor, calpha, ccolorParams)
}

// FzStrokePath function as declared in fitz/device.h:129
func FzStrokePath(ctx *FzContext, dev *FzDevice, path []FzPath, stroke []FzStrokeState, ctm []FzMatrix, colorspace []FzColorspace, color []float32, alpha float32, colorParams []FzColorParams) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	cpath, _ := (*C.fz_path)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&path)).Data)), cgoAllocsUnknown
	cstroke, _ := (*C.fz_stroke_state)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&stroke)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	ccolorspace, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorspace)).Data)), cgoAllocsUnknown
	ccolor, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&color)).Data)), cgoAllocsUnknown
	calpha, _ := (C.float)(alpha), cgoAllocsUnknown
	ccolorParams, _ := (*C.fz_color_params)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorParams)).Data)), cgoAllocsUnknown
	C.fz_stroke_path(cctx, cdev, cpath, cstroke, cctm, ccolorspace, ccolor, calpha, ccolorParams)
}

// FzClipPath function as declared in fitz/device.h:130
func FzClipPath(ctx *FzContext, dev *FzDevice, path []FzPath, evenOdd int32, ctm []FzMatrix, scissor []FzRect) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	cpath, _ := (*C.fz_path)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&path)).Data)), cgoAllocsUnknown
	cevenOdd, _ := (C.int)(evenOdd), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	cscissor, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&scissor)).Data)), cgoAllocsUnknown
	C.fz_clip_path(cctx, cdev, cpath, cevenOdd, cctm, cscissor)
}

// FzClipStrokePath function as declared in fitz/device.h:131
func FzClipStrokePath(ctx *FzContext, dev *FzDevice, path []FzPath, stroke []FzStrokeState, ctm []FzMatrix, scissor []FzRect) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	cpath, _ := (*C.fz_path)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&path)).Data)), cgoAllocsUnknown
	cstroke, _ := (*C.fz_stroke_state)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&stroke)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	cscissor, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&scissor)).Data)), cgoAllocsUnknown
	C.fz_clip_stroke_path(cctx, cdev, cpath, cstroke, cctm, cscissor)
}

// FzFillText function as declared in fitz/device.h:132
func FzFillText(ctx *FzContext, dev *FzDevice, text []FzText, ctm []FzMatrix, colorspace []FzColorspace, color []float32, alpha float32, colorParams []FzColorParams) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	ctext, _ := (*C.fz_text)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&text)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	ccolorspace, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorspace)).Data)), cgoAllocsUnknown
	ccolor, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&color)).Data)), cgoAllocsUnknown
	calpha, _ := (C.float)(alpha), cgoAllocsUnknown
	ccolorParams, _ := (*C.fz_color_params)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorParams)).Data)), cgoAllocsUnknown
	C.fz_fill_text(cctx, cdev, ctext, cctm, ccolorspace, ccolor, calpha, ccolorParams)
}

// FzStrokeText function as declared in fitz/device.h:133
func FzStrokeText(ctx *FzContext, dev *FzDevice, text []FzText, stroke []FzStrokeState, ctm []FzMatrix, colorspace []FzColorspace, color []float32, alpha float32, colorParams []FzColorParams) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	ctext, _ := (*C.fz_text)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&text)).Data)), cgoAllocsUnknown
	cstroke, _ := (*C.fz_stroke_state)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&stroke)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	ccolorspace, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorspace)).Data)), cgoAllocsUnknown
	ccolor, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&color)).Data)), cgoAllocsUnknown
	calpha, _ := (C.float)(alpha), cgoAllocsUnknown
	ccolorParams, _ := (*C.fz_color_params)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorParams)).Data)), cgoAllocsUnknown
	C.fz_stroke_text(cctx, cdev, ctext, cstroke, cctm, ccolorspace, ccolor, calpha, ccolorParams)
}

// FzClipText function as declared in fitz/device.h:134
func FzClipText(ctx *FzContext, dev *FzDevice, text []FzText, ctm []FzMatrix, scissor []FzRect) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	ctext, _ := (*C.fz_text)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&text)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	cscissor, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&scissor)).Data)), cgoAllocsUnknown
	C.fz_clip_text(cctx, cdev, ctext, cctm, cscissor)
}

// FzClipStrokeText function as declared in fitz/device.h:135
func FzClipStrokeText(ctx *FzContext, dev *FzDevice, text []FzText, stroke []FzStrokeState, ctm []FzMatrix, scissor []FzRect) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	ctext, _ := (*C.fz_text)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&text)).Data)), cgoAllocsUnknown
	cstroke, _ := (*C.fz_stroke_state)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&stroke)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	cscissor, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&scissor)).Data)), cgoAllocsUnknown
	C.fz_clip_stroke_text(cctx, cdev, ctext, cstroke, cctm, cscissor)
}

// FzIgnoreText function as declared in fitz/device.h:136
func FzIgnoreText(ctx *FzContext, dev *FzDevice, text []FzText, ctm []FzMatrix) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	ctext, _ := (*C.fz_text)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&text)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	C.fz_ignore_text(cctx, cdev, ctext, cctm)
}

// FzPopClip function as declared in fitz/device.h:137
func FzPopClip(ctx *FzContext, dev *FzDevice) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	C.fz_pop_clip(cctx, cdev)
}

// FzFillShade function as declared in fitz/device.h:138
func FzFillShade(ctx *FzContext, dev *FzDevice, shade []FzShade, ctm []FzMatrix, alpha float32, colorParams []FzColorParams) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	cshade, _ := (*C.fz_shade)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&shade)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	calpha, _ := (C.float)(alpha), cgoAllocsUnknown
	ccolorParams, _ := (*C.fz_color_params)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorParams)).Data)), cgoAllocsUnknown
	C.fz_fill_shade(cctx, cdev, cshade, cctm, calpha, ccolorParams)
}

// FzFillImage function as declared in fitz/device.h:139
func FzFillImage(ctx *FzContext, dev *FzDevice, image []FzImage, ctm []FzMatrix, alpha float32, colorParams []FzColorParams) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	cimage, _ := (*C.fz_image)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&image)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	calpha, _ := (C.float)(alpha), cgoAllocsUnknown
	ccolorParams, _ := (*C.fz_color_params)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorParams)).Data)), cgoAllocsUnknown
	C.fz_fill_image(cctx, cdev, cimage, cctm, calpha, ccolorParams)
}

// FzFillImageMask function as declared in fitz/device.h:140
func FzFillImageMask(ctx *FzContext, dev *FzDevice, image []FzImage, ctm []FzMatrix, colorspace []FzColorspace, color []float32, alpha float32, colorParams []FzColorParams) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	cimage, _ := (*C.fz_image)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&image)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	ccolorspace, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorspace)).Data)), cgoAllocsUnknown
	ccolor, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&color)).Data)), cgoAllocsUnknown
	calpha, _ := (C.float)(alpha), cgoAllocsUnknown
	ccolorParams, _ := (*C.fz_color_params)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorParams)).Data)), cgoAllocsUnknown
	C.fz_fill_image_mask(cctx, cdev, cimage, cctm, ccolorspace, ccolor, calpha, ccolorParams)
}

// FzClipImageMask function as declared in fitz/device.h:141
func FzClipImageMask(ctx *FzContext, dev *FzDevice, image []FzImage, ctm []FzMatrix, scissor []FzRect) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	cimage, _ := (*C.fz_image)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&image)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	cscissor, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&scissor)).Data)), cgoAllocsUnknown
	C.fz_clip_image_mask(cctx, cdev, cimage, cctm, cscissor)
}

// FzBeginMask function as declared in fitz/device.h:142
func FzBeginMask(ctx *FzContext, dev *FzDevice, area []FzRect, luminosity int32, colorspace []FzColorspace, bc []float32, colorParams []FzColorParams) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	carea, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&area)).Data)), cgoAllocsUnknown
	cluminosity, _ := (C.int)(luminosity), cgoAllocsUnknown
	ccolorspace, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorspace)).Data)), cgoAllocsUnknown
	cbc, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&bc)).Data)), cgoAllocsUnknown
	ccolorParams, _ := (*C.fz_color_params)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorParams)).Data)), cgoAllocsUnknown
	C.fz_begin_mask(cctx, cdev, carea, cluminosity, ccolorspace, cbc, ccolorParams)
}

// FzEndMask function as declared in fitz/device.h:143
func FzEndMask(ctx *FzContext, dev *FzDevice) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	C.fz_end_mask(cctx, cdev)
}

// FzBeginGroup function as declared in fitz/device.h:144
func FzBeginGroup(ctx *FzContext, dev *FzDevice, area []FzRect, cs []FzColorspace, isolated int32, knockout int32, blendmode int32, alpha float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	carea, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&area)).Data)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cs)).Data)), cgoAllocsUnknown
	cisolated, _ := (C.int)(isolated), cgoAllocsUnknown
	cknockout, _ := (C.int)(knockout), cgoAllocsUnknown
	cblendmode, _ := (C.int)(blendmode), cgoAllocsUnknown
	calpha, _ := (C.float)(alpha), cgoAllocsUnknown
	C.fz_begin_group(cctx, cdev, carea, ccs, cisolated, cknockout, cblendmode, calpha)
}

// FzEndGroup function as declared in fitz/device.h:145
func FzEndGroup(ctx *FzContext, dev *FzDevice) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	C.fz_end_group(cctx, cdev)
}

// FzBeginTile function as declared in fitz/device.h:146
func FzBeginTile(ctx *FzContext, dev *FzDevice, area []FzRect, view []FzRect, xstep float32, ystep float32, ctm []FzMatrix) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	carea, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&area)).Data)), cgoAllocsUnknown
	cview, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&view)).Data)), cgoAllocsUnknown
	cxstep, _ := (C.float)(xstep), cgoAllocsUnknown
	cystep, _ := (C.float)(ystep), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	C.fz_begin_tile(cctx, cdev, carea, cview, cxstep, cystep, cctm)
}

// FzBeginTileId function as declared in fitz/device.h:147
func FzBeginTileId(ctx *FzContext, dev *FzDevice, area []FzRect, view []FzRect, xstep float32, ystep float32, ctm []FzMatrix, id int32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	carea, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&area)).Data)), cgoAllocsUnknown
	cview, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&view)).Data)), cgoAllocsUnknown
	cxstep, _ := (C.float)(xstep), cgoAllocsUnknown
	cystep, _ := (C.float)(ystep), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	cid, _ := (C.int)(id), cgoAllocsUnknown
	__ret := C.fz_begin_tile_id(cctx, cdev, carea, cview, cxstep, cystep, cctm, cid)
	__v := (int32)(__ret)
	return __v
}

// FzEndTile function as declared in fitz/device.h:148
func FzEndTile(ctx *FzContext, dev *FzDevice) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	C.fz_end_tile(cctx, cdev)
}

// FzRenderFlags function as declared in fitz/device.h:149
func FzRenderFlags(ctx *FzContext, dev *FzDevice, set int32, clear int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	cset, _ := (C.int)(set), cgoAllocsUnknown
	cclear, _ := (C.int)(clear), cgoAllocsUnknown
	C.fz_render_flags(cctx, cdev, cset, cclear)
}

// FzSetDefaultColorspaces function as declared in fitz/device.h:150
func FzSetDefaultColorspaces(ctx *FzContext, dev *FzDevice, defaultCs []FzDefaultColorspaces) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	cdefaultCs, _ := (*C.fz_default_colorspaces)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&defaultCs)).Data)), cgoAllocsUnknown
	C.fz_set_default_colorspaces(cctx, cdev, cdefaultCs)
}

// FzNewDeviceOfSize function as declared in fitz/device.h:151
func FzNewDeviceOfSize(ctx *FzContext, size int32) *FzDevice {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csize, _ := (C.int)(size), cgoAllocsUnknown
	__ret := C.fz_new_device_of_size(cctx, csize)
	__v := *(**FzDevice)(unsafe.Pointer(&__ret))
	return __v
}

// FzCloseDevice function as declared in fitz/device.h:160
func FzCloseDevice(ctx *FzContext, dev *FzDevice) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	C.fz_close_device(cctx, cdev)
}

// FzDropDevice function as declared in fitz/device.h:167
func FzDropDevice(ctx *FzContext, dev *FzDevice) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	C.fz_drop_device(cctx, cdev)
}

// FzKeepDevice function as declared in fitz/device.h:169
func FzKeepDevice(ctx *FzContext, dev *FzDevice) *FzDevice {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	__ret := C.fz_keep_device(cctx, cdev)
	__v := *(**FzDevice)(unsafe.Pointer(&__ret))
	return __v
}

// FzEnableDeviceHints function as declared in fitz/device.h:176
func FzEnableDeviceHints(ctx *FzContext, dev *FzDevice, hints int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	chints, _ := (C.int)(hints), cgoAllocsUnknown
	C.fz_enable_device_hints(cctx, cdev, chints)
}

// FzDisableDeviceHints function as declared in fitz/device.h:183
func FzDisableDeviceHints(ctx *FzContext, dev *FzDevice, hints int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	chints, _ := (C.int)(hints), cgoAllocsUnknown
	C.fz_disable_device_hints(cctx, cdev, chints)
}

// FzDeviceCurrentScissor function as declared in fitz/device.h:188
func FzDeviceCurrentScissor(ctx *FzContext, dev *FzDevice) *FzRect {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	__ret := C.fz_device_current_scissor(cctx, cdev)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewTraceDevice function as declared in fitz/device.h:263
func FzNewTraceDevice(ctx *FzContext, out *FzOutput) *FzDevice {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	__ret := C.fz_new_trace_device(cctx, cout)
	__v := *(**FzDevice)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewBboxDevice function as declared in fitz/device.h:272
func FzNewBboxDevice(ctx *FzContext, rectp *FzRect) *FzDevice {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	crectp, _ := (*C.fz_rect)(unsafe.Pointer(rectp)), cgoAllocsUnknown
	__ret := C.fz_new_bbox_device(cctx, crectp)
	__v := *(**FzDevice)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewTestDevice function as declared in fitz/device.h:300
func FzNewTestDevice(ctx *FzContext, isColor *int32, threshold float32, options int32, passthrough []FzDevice) *FzDevice {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cisColor, _ := (*C.int)(unsafe.Pointer(isColor)), cgoAllocsUnknown
	cthreshold, _ := (C.float)(threshold), cgoAllocsUnknown
	coptions, _ := (C.int)(options), cgoAllocsUnknown
	cpassthrough, _ := (*C.fz_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&passthrough)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_test_device(cctx, cisColor, cthreshold, coptions, cpassthrough)
	__v := *(**FzDevice)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewDrawDevice function as declared in fitz/device.h:324
func FzNewDrawDevice(ctx *FzContext, transform *FzMatrix, dest []FzPixmap) *FzDevice {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctransform, _ := (*C.fz_matrix)(unsafe.Pointer(transform)), cgoAllocsUnknown
	cdest, _ := unpackArgSFzPixmap(dest)
	__ret := C.fz_new_draw_device(cctx, ctransform, cdest)
	packSFzPixmap(dest, cdest)
	__v := *(**FzDevice)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewDrawDeviceWithBbox function as declared in fitz/device.h:340
func FzNewDrawDeviceWithBbox(ctx *FzContext, transform *FzMatrix, dest []FzPixmap, clip []FzIrect) *FzDevice {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctransform, _ := (*C.fz_matrix)(unsafe.Pointer(transform)), cgoAllocsUnknown
	cdest, _ := unpackArgSFzPixmap(dest)
	cclip, _ := (*C.fz_irect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&clip)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_draw_device_with_bbox(cctx, ctransform, cdest, cclip)
	packSFzPixmap(dest, cdest)
	__v := *(**FzDevice)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewDrawDeviceWithProof function as declared in fitz/device.h:356
func FzNewDrawDeviceWithProof(ctx *FzContext, transform *FzMatrix, dest []FzPixmap, proofCs []FzColorspace) *FzDevice {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctransform, _ := (*C.fz_matrix)(unsafe.Pointer(transform)), cgoAllocsUnknown
	cdest, _ := unpackArgSFzPixmap(dest)
	cproofCs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&proofCs)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_draw_device_with_proof(cctx, ctransform, cdest, cproofCs)
	packSFzPixmap(dest, cdest)
	__v := *(**FzDevice)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewDrawDeviceWithBboxProof function as declared in fitz/device.h:374
func FzNewDrawDeviceWithBboxProof(ctx *FzContext, transform *FzMatrix, dest []FzPixmap, clip []FzIrect, cs []FzColorspace) *FzDevice {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctransform, _ := (*C.fz_matrix)(unsafe.Pointer(transform)), cgoAllocsUnknown
	cdest, _ := unpackArgSFzPixmap(dest)
	cclip, _ := (*C.fz_irect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&clip)).Data)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cs)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_draw_device_with_bbox_proof(cctx, ctransform, cdest, cclip, ccs)
	packSFzPixmap(dest, cdest)
	__v := *(**FzDevice)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewDrawDeviceType3 function as declared in fitz/device.h:376
func FzNewDrawDeviceType3(ctx *FzContext, transform *FzMatrix, dest []FzPixmap) *FzDevice {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctransform, _ := (*C.fz_matrix)(unsafe.Pointer(transform)), cgoAllocsUnknown
	cdest, _ := unpackArgSFzPixmap(dest)
	__ret := C.fz_new_draw_device_type3(cctx, ctransform, cdest)
	packSFzPixmap(dest, cdest)
	__v := *(**FzDevice)(unsafe.Pointer(&__ret))
	return __v
}

// FzParseDrawOptions function as declared in fitz/device.h:401
func FzParseDrawOptions(ctx *FzContext, options *FzDrawOptions, string string) *FzDrawOptions {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	coptions, _ := (*C.fz_draw_options)(unsafe.Pointer(options)), cgoAllocsUnknown
	string = safeString(string)
	cstring, _ := unpackPCharString(string)
	__ret := C.fz_parse_draw_options(cctx, coptions, cstring)
	runtime.KeepAlive(string)
	__v := *(**FzDrawOptions)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewDrawDeviceWithOptions function as declared in fitz/device.h:410
func FzNewDrawDeviceWithOptions(ctx *FzContext, options *FzDrawOptions, mediabox []FzRect, pixmap [][]FzPixmap) *FzDevice {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	coptions, _ := (*C.fz_draw_options)(unsafe.Pointer(options)), cgoAllocsUnknown
	cmediabox, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&mediabox)).Data)), cgoAllocsUnknown
	cpixmap, _ := unpackArgSSFzPixmap(pixmap)
	__ret := C.fz_new_draw_device_with_options(cctx, coptions, cmediabox, cpixmap)
	packSSFzPixmap(pixmap, cpixmap)
	__v := *(**FzDevice)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewDisplayList function as declared in fitz/display-list.h:35
func FzNewDisplayList(ctx *FzContext, mediabox *FzRect) *FzDisplayList {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cmediabox, _ := (*C.fz_rect)(unsafe.Pointer(mediabox)), cgoAllocsUnknown
	__ret := C.fz_new_display_list(cctx, cmediabox)
	__v := *(**FzDisplayList)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewListDevice function as declared in fitz/display-list.h:49
func FzNewListDevice(ctx *FzContext, list *FzDisplayList) *FzDevice {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	clist, _ := (*C.fz_display_list)(unsafe.Pointer(list)), cgoAllocsUnknown
	__ret := C.fz_new_list_device(cctx, clist)
	__v := *(**FzDevice)(unsafe.Pointer(&__ret))
	return __v
}

// FzRunDisplayList function as declared in fitz/display-list.h:76
func FzRunDisplayList(ctx *FzContext, list *FzDisplayList, dev []FzDevice, ctm []FzMatrix, area []FzRect, cookie []FzCookie) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	clist, _ := (*C.fz_display_list)(unsafe.Pointer(list)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dev)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	carea, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&area)).Data)), cgoAllocsUnknown
	ccookie, _ := (*C.fz_cookie)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cookie)).Data)), cgoAllocsUnknown
	C.fz_run_display_list(cctx, clist, cdev, cctm, carea, ccookie)
}

// FzKeepDisplayList function as declared in fitz/display-list.h:81
func FzKeepDisplayList(ctx *FzContext, list *FzDisplayList) *FzDisplayList {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	clist, _ := (*C.fz_display_list)(unsafe.Pointer(list)), cgoAllocsUnknown
	__ret := C.fz_keep_display_list(cctx, clist)
	__v := *(**FzDisplayList)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropDisplayList function as declared in fitz/display-list.h:87
func FzDropDisplayList(ctx *FzContext, list *FzDisplayList) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	clist, _ := (*C.fz_display_list)(unsafe.Pointer(list)), cgoAllocsUnknown
	C.fz_drop_display_list(cctx, clist)
}

// FzBoundDisplayList function as declared in fitz/display-list.h:92
func FzBoundDisplayList(ctx *FzContext, list *FzDisplayList, bounds []FzRect) *FzRect {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	clist, _ := (*C.fz_display_list)(unsafe.Pointer(list)), cgoAllocsUnknown
	cbounds, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&bounds)).Data)), cgoAllocsUnknown
	__ret := C.fz_bound_display_list(cctx, clist, cbounds)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewImageFromDisplayList function as declared in fitz/display-list.h:104
func FzNewImageFromDisplayList(ctx *FzContext, w float32, h float32, list []FzDisplayList) *FzImage {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cw, _ := (C.float)(w), cgoAllocsUnknown
	ch, _ := (C.float)(h), cgoAllocsUnknown
	clist, _ := (*C.fz_display_list)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&list)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_image_from_display_list(cctx, cw, ch, clist)
	__v := *(**FzImage)(unsafe.Pointer(&__ret))
	return __v
}

// FzDisplayListIsEmpty function as declared in fitz/display-list.h:113
func FzDisplayListIsEmpty(ctx *FzContext, list *FzDisplayList) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	clist, _ := (*C.fz_display_list)(unsafe.Pointer(list)), cgoAllocsUnknown
	__ret := C.fz_display_list_is_empty(cctx, clist)
	__v := (int32)(__ret)
	return __v
}

// FzStextCharCount function as declared in fitz/structured-text.h:106
func FzStextCharCount(ctx *FzContext, page *FzStextPage) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_stext_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	__ret := C.fz_stext_char_count(cctx, cpage)
	__v := (int32)(__ret)
	return __v
}

// FzStextCharAt function as declared in fitz/structured-text.h:107
func FzStextCharAt(ctx *FzContext, page *FzStextPage, idx int32) *FzStextChar {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_stext_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	cidx, _ := (C.int)(idx), cgoAllocsUnknown
	__ret := C.fz_stext_char_at(cctx, cpage, cidx)
	__v := *(**FzStextChar)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewStextPage function as declared in fitz/structured-text.h:117
func FzNewStextPage(ctx *FzContext, mediabox *FzRect) *FzStextPage {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cmediabox, _ := (*C.fz_rect)(unsafe.Pointer(mediabox)), cgoAllocsUnknown
	__ret := C.fz_new_stext_page(cctx, cmediabox)
	__v := *(**FzStextPage)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropStextPage function as declared in fitz/structured-text.h:118
func FzDropStextPage(ctx *FzContext, page *FzStextPage) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_stext_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	C.fz_drop_stext_page(cctx, cpage)
}

// FzPrintStextPageAsHtml function as declared in fitz/structured-text.h:123
func FzPrintStextPageAsHtml(ctx *FzContext, out *FzOutput, page []FzStextPage) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cpage, _ := (*C.fz_stext_page)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&page)).Data)), cgoAllocsUnknown
	C.fz_print_stext_page_as_html(cctx, cout, cpage)
}

// FzPrintStextHeaderAsHtml function as declared in fitz/structured-text.h:124
func FzPrintStextHeaderAsHtml(ctx *FzContext, out *FzOutput) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	C.fz_print_stext_header_as_html(cctx, cout)
}

// FzPrintStextTrailerAsHtml function as declared in fitz/structured-text.h:125
func FzPrintStextTrailerAsHtml(ctx *FzContext, out *FzOutput) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	C.fz_print_stext_trailer_as_html(cctx, cout)
}

// FzPrintStextPageAsXhtml function as declared in fitz/structured-text.h:130
func FzPrintStextPageAsXhtml(ctx *FzContext, out *FzOutput, page []FzStextPage) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cpage, _ := (*C.fz_stext_page)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&page)).Data)), cgoAllocsUnknown
	C.fz_print_stext_page_as_xhtml(cctx, cout, cpage)
}

// FzPrintStextHeaderAsXhtml function as declared in fitz/structured-text.h:131
func FzPrintStextHeaderAsXhtml(ctx *FzContext, out *FzOutput) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	C.fz_print_stext_header_as_xhtml(cctx, cout)
}

// FzPrintStextTrailerAsXhtml function as declared in fitz/structured-text.h:132
func FzPrintStextTrailerAsXhtml(ctx *FzContext, out *FzOutput) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	C.fz_print_stext_trailer_as_xhtml(cctx, cout)
}

// FzPrintStextPageAsXml function as declared in fitz/structured-text.h:137
func FzPrintStextPageAsXml(ctx *FzContext, out *FzOutput, page []FzStextPage) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cpage, _ := (*C.fz_stext_page)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&page)).Data)), cgoAllocsUnknown
	C.fz_print_stext_page_as_xml(cctx, cout, cpage)
}

// FzPrintStextPageAsText function as declared in fitz/structured-text.h:142
func FzPrintStextPageAsText(ctx *FzContext, out *FzOutput, page []FzStextPage) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cpage, _ := (*C.fz_stext_page)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&page)).Data)), cgoAllocsUnknown
	C.fz_print_stext_page_as_text(cctx, cout, cpage)
}

// FzSearchStextPage function as declared in fitz/structured-text.h:151
func FzSearchStextPage(ctx *FzContext, text *FzStextPage, needle string, hitBbox []FzRect, hitMax int32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctext, _ := (*C.fz_stext_page)(unsafe.Pointer(text)), cgoAllocsUnknown
	needle = safeString(needle)
	cneedle, _ := unpackPCharString(needle)
	chitBbox, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&hitBbox)).Data)), cgoAllocsUnknown
	chitMax, _ := (C.int)(hitMax), cgoAllocsUnknown
	__ret := C.fz_search_stext_page(cctx, ctext, cneedle, chitBbox, chitMax)
	runtime.KeepAlive(needle)
	__v := (int32)(__ret)
	return __v
}

// FzHighlightSelection function as declared in fitz/structured-text.h:156
func FzHighlightSelection(ctx *FzContext, page *FzStextPage, a FzPoint, b FzPoint, hitBbox []FzRect, hitMax int32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_stext_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	ca, _ := *(*C.fz_point)(unsafe.Pointer(&a)), cgoAllocsUnknown
	cb, _ := *(*C.fz_point)(unsafe.Pointer(&b)), cgoAllocsUnknown
	chitBbox, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&hitBbox)).Data)), cgoAllocsUnknown
	chitMax, _ := (C.int)(hitMax), cgoAllocsUnknown
	__ret := C.fz_highlight_selection(cctx, cpage, ca, cb, chitBbox, chitMax)
	__v := (int32)(__ret)
	return __v
}

// FzCopySelection function as declared in fitz/structured-text.h:163
func FzCopySelection(ctx *FzContext, page *FzStextPage, a FzPoint, b FzPoint, crlf int32) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_stext_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	ca, _ := *(*C.fz_point)(unsafe.Pointer(&a)), cgoAllocsUnknown
	cb, _ := *(*C.fz_point)(unsafe.Pointer(&b)), cgoAllocsUnknown
	ccrlf, _ := (C.int)(crlf), cgoAllocsUnknown
	__ret := C.fz_copy_selection(cctx, cpage, ca, cb, ccrlf)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// FzParseStextOptions function as declared in fitz/structured-text.h:178
func FzParseStextOptions(ctx *FzContext, opts *FzStextOptions, string string) *FzStextOptions {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	copts, _ := (*C.fz_stext_options)(unsafe.Pointer(opts)), cgoAllocsUnknown
	string = safeString(string)
	cstring, _ := unpackPCharString(string)
	__ret := C.fz_parse_stext_options(cctx, copts, cstring)
	runtime.KeepAlive(string)
	__v := *(**FzStextOptions)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewStextDevice function as declared in fitz/structured-text.h:195
func FzNewStextDevice(ctx *FzContext, page *FzStextPage, options []FzStextOptions) *FzDevice {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_stext_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	coptions, _ := (*C.fz_stext_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&options)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_stext_device(cctx, cpage, coptions)
	__v := *(**FzDevice)(unsafe.Pointer(&__ret))
	return __v
}

// FzGenerateTransition function as declared in fitz/transition.h:52
func FzGenerateTransition(ctx *FzContext, tpix *FzPixmap, opix []FzPixmap, npix []FzPixmap, time int32, trans []FzTransition) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctpix, _ := tpix.PassRef()
	copix, _ := unpackArgSFzPixmap(opix)
	cnpix, _ := unpackArgSFzPixmap(npix)
	ctime, _ := (C.int)(time), cgoAllocsUnknown
	ctrans, _ := (*C.fz_transition)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&trans)).Data)), cgoAllocsUnknown
	__ret := C.fz_generate_transition(cctx, ctpix, copix, cnpix, ctime, ctrans)
	packSFzPixmap(npix, cnpix)
	packSFzPixmap(opix, copix)
	__v := (int32)(__ret)
	return __v
}

// FzPurgeGlyphCache function as declared in fitz/glyph-cache.h:9
func FzPurgeGlyphCache(ctx *FzContext) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.fz_purge_glyph_cache(cctx)
}

// FzRenderGlyphPixmap function as declared in fitz/glyph-cache.h:10
func FzRenderGlyphPixmap(ctx *FzContext, arg1 *FzFont, arg2 int32, arg3 []FzMatrix, scissor []FzIrect, aa int32) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carg1, _ := (*C.fz_font)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, _ := (C.int)(arg2), cgoAllocsUnknown
	carg3, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&arg3)).Data)), cgoAllocsUnknown
	cscissor, _ := (*C.fz_irect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&scissor)).Data)), cgoAllocsUnknown
	caa, _ := (C.int)(aa), cgoAllocsUnknown
	__ret := C.fz_render_glyph_pixmap(cctx, carg1, carg2, carg3, cscissor, caa)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzRenderT3GlyphDirect function as declared in fitz/glyph-cache.h:11
func FzRenderT3GlyphDirect(ctx *FzContext, dev *FzDevice, font []FzFont, gid int32, trm []FzMatrix, gstate unsafe.Pointer, nestedDepth int32, defCs []FzDefaultColorspaces) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&font)).Data)), cgoAllocsUnknown
	cgid, _ := (C.int)(gid), cgoAllocsUnknown
	ctrm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&trm)).Data)), cgoAllocsUnknown
	cgstate, _ := gstate, cgoAllocsUnknown
	cnestedDepth, _ := (C.int)(nestedDepth), cgoAllocsUnknown
	cdefCs, _ := (*C.fz_default_colorspaces)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&defCs)).Data)), cgoAllocsUnknown
	C.fz_render_t3_glyph_direct(cctx, cdev, cfont, cgid, ctrm, cgstate, cnestedDepth, cdefCs)
}

// FzPrepareT3Glyph function as declared in fitz/glyph-cache.h:12
func FzPrepareT3Glyph(ctx *FzContext, font *FzFont, gid int32, nestedDepth int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	cgid, _ := (C.int)(gid), cgoAllocsUnknown
	cnestedDepth, _ := (C.int)(nestedDepth), cgoAllocsUnknown
	C.fz_prepare_t3_glyph(cctx, cfont, cgid, cnestedDepth)
}

// FzDumpGlyphCacheStats function as declared in fitz/glyph-cache.h:13
func FzDumpGlyphCacheStats(ctx *FzContext) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.fz_dump_glyph_cache_stats(cctx)
}

// FzSubpixelAdjust function as declared in fitz/glyph-cache.h:14
func FzSubpixelAdjust(ctx *FzContext, ctm *FzMatrix, subpixCtm []FzMatrix, qe []byte, qf []byte) float32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer(ctm)), cgoAllocsUnknown
	csubpixCtm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&subpixCtm)).Data)), cgoAllocsUnknown
	cqe, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&qe)).Data)), cgoAllocsUnknown
	cqf, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&qf)).Data)), cgoAllocsUnknown
	__ret := C.fz_subpixel_adjust(cctx, cctm, csubpixCtm, cqe, cqf)
	__v := (float32)(__ret)
	return __v
}

// FzNewLink function as declared in fitz/link.h:42
func FzNewLink(ctx *FzContext, bbox *FzRect, doc unsafe.Pointer, uri string) *FzLink {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbbox, _ := (*C.fz_rect)(unsafe.Pointer(bbox)), cgoAllocsUnknown
	cdoc, _ := doc, cgoAllocsUnknown
	uri = safeString(uri)
	curi, _ := unpackPCharString(uri)
	__ret := C.fz_new_link(cctx, cbbox, cdoc, curi)
	runtime.KeepAlive(uri)
	__v := *(**FzLink)(unsafe.Pointer(&__ret))
	return __v
}

// FzKeepLink function as declared in fitz/link.h:43
func FzKeepLink(ctx *FzContext, link *FzLink) *FzLink {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	clink, _ := (*C.fz_link)(unsafe.Pointer(link)), cgoAllocsUnknown
	__ret := C.fz_keep_link(cctx, clink)
	__v := *(**FzLink)(unsafe.Pointer(&__ret))
	return __v
}

// FzIsExternalLink function as declared in fitz/link.h:48
func FzIsExternalLink(ctx *FzContext, uri string) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	uri = safeString(uri)
	curi, _ := unpackPCharString(uri)
	__ret := C.fz_is_external_link(cctx, curi)
	runtime.KeepAlive(uri)
	__v := (int32)(__ret)
	return __v
}

// FzDropLink function as declared in fitz/link.h:53
func FzDropLink(ctx *FzContext, link *FzLink) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	clink, _ := (*C.fz_link)(unsafe.Pointer(link)), cgoAllocsUnknown
	C.fz_drop_link(cctx, clink)
}

// FzNewOutline function as declared in fitz/outline.h:45
func FzNewOutline(ctx *FzContext) *FzOutline {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.fz_new_outline(cctx)
	__v := *(**FzOutline)(unsafe.Pointer(&__ret))
	return __v
}

// FzKeepOutline function as declared in fitz/outline.h:46
func FzKeepOutline(ctx *FzContext, outline *FzOutline) *FzOutline {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	coutline, _ := (*C.fz_outline)(unsafe.Pointer(outline)), cgoAllocsUnknown
	__ret := C.fz_keep_outline(cctx, coutline)
	__v := *(**FzOutline)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropOutline function as declared in fitz/outline.h:47
func FzDropOutline(ctx *FzContext, outline *FzOutline) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	coutline, _ := (*C.fz_outline)(unsafe.Pointer(outline)), cgoAllocsUnknown
	C.fz_drop_outline(cctx, coutline)
}

// FzRegisterDocumentHandler function as declared in fitz/document.h:299
func FzRegisterDocumentHandler(ctx *FzContext, handler *FzDocumentHandler) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	chandler, _ := (*C.fz_document_handler)(unsafe.Pointer(handler)), cgoAllocsUnknown
	C.fz_register_document_handler(cctx, chandler)
}

// FzRegisterDocumentHandlers function as declared in fitz/document.h:306
func FzRegisterDocumentHandlers(ctx *FzContext) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.fz_register_document_handlers(cctx)
}

// FzRecognizeDocument function as declared in fitz/document.h:315
func FzRecognizeDocument(ctx *FzContext, magic string) *FzDocumentHandler {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	magic = safeString(magic)
	cmagic, _ := unpackPCharString(magic)
	__ret := C.fz_recognize_document(cctx, cmagic)
	runtime.KeepAlive(magic)
	__v := *(**FzDocumentHandler)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenDocument function as declared in fitz/document.h:329
func FzOpenDocument(ctx *FzContext, filename string) *FzDocument {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	__ret := C.fz_open_document(cctx, cfilename)
	runtime.KeepAlive(filename)
	__v := *(**FzDocument)(unsafe.Pointer(&__ret))
	return __v
}

// FzOpenDocumentWithStream function as declared in fitz/document.h:339
func FzOpenDocumentWithStream(ctx *FzContext, magic string, stream []FzStream) *FzDocument {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	magic = safeString(magic)
	cmagic, _ := unpackPCharString(magic)
	cstream, _ := (*C.fz_stream)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&stream)).Data)), cgoAllocsUnknown
	__ret := C.fz_open_document_with_stream(cctx, cmagic, cstream)
	runtime.KeepAlive(magic)
	__v := *(**FzDocument)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewDocumentOfSize function as declared in fitz/document.h:344
func FzNewDocumentOfSize(ctx *FzContext, size int32) unsafe.Pointer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csize, _ := (C.int)(size), cgoAllocsUnknown
	__ret := C.fz_new_document_of_size(cctx, csize)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// FzKeepDocument function as declared in fitz/document.h:351
func FzKeepDocument(ctx *FzContext, doc *FzDocument) *FzDocument {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.fz_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.fz_keep_document(cctx, cdoc)
	__v := *(**FzDocument)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropDocument function as declared in fitz/document.h:360
func FzDropDocument(ctx *FzContext, doc *FzDocument) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.fz_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	C.fz_drop_document(cctx, cdoc)
}

// FzNeedsPassword function as declared in fitz/document.h:366
func FzNeedsPassword(ctx *FzContext, doc *FzDocument) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.fz_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.fz_needs_password(cctx, cdoc)
	__v := (int32)(__ret)
	return __v
}

// FzAuthenticatePassword function as declared in fitz/document.h:385
func FzAuthenticatePassword(ctx *FzContext, doc *FzDocument, password string) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.fz_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	password = safeString(password)
	cpassword, _ := unpackPCharString(password)
	__ret := C.fz_authenticate_password(cctx, cdoc, cpassword)
	runtime.KeepAlive(password)
	__v := (int32)(__ret)
	return __v
}

// FzLoadOutline function as declared in fitz/document.h:392
func FzLoadOutline(ctx *FzContext, doc *FzDocument) *FzOutline {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.fz_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.fz_load_outline(cctx, cdoc)
	__v := *(**FzOutline)(unsafe.Pointer(&__ret))
	return __v
}

// FzIsDocumentReflowable function as declared in fitz/document.h:399
func FzIsDocumentReflowable(ctx *FzContext, doc *FzDocument) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.fz_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.fz_is_document_reflowable(cctx, cdoc)
	__v := (int32)(__ret)
	return __v
}

// FzLayoutDocument function as declared in fitz/document.h:407
func FzLayoutDocument(ctx *FzContext, doc *FzDocument, w float32, h float32, em float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.fz_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cw, _ := (C.float)(w), cgoAllocsUnknown
	ch, _ := (C.float)(h), cgoAllocsUnknown
	cem, _ := (C.float)(em), cgoAllocsUnknown
	C.fz_layout_document(cctx, cdoc, cw, ch, cem)
}

// FzMakeBookmark function as declared in fitz/document.h:414
func FzMakeBookmark(ctx *FzContext, doc *FzDocument, page int32) FzBookmark {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.fz_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cpage, _ := (C.int)(page), cgoAllocsUnknown
	__ret := C.fz_make_bookmark(cctx, cdoc, cpage)
	__v := (FzBookmark)(__ret)
	return __v
}

// FzLookupBookmark function as declared in fitz/document.h:419
func FzLookupBookmark(ctx *FzContext, doc *FzDocument, mark FzBookmark) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.fz_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cmark, _ := (C.fz_bookmark)(mark), cgoAllocsUnknown
	__ret := C.fz_lookup_bookmark(cctx, cdoc, cmark)
	__v := (int32)(__ret)
	return __v
}

// FzCountPages function as declared in fitz/document.h:426
func FzCountPages(ctx *FzContext, doc *FzDocument) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.fz_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.fz_count_pages(cctx, cdoc)
	__v := (int32)(__ret)
	return __v
}

// FzResolveLink function as declared in fitz/document.h:435
func FzResolveLink(ctx *FzContext, doc *FzDocument, uri string, xp []float32, yp []float32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.fz_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	uri = safeString(uri)
	curi, _ := unpackPCharString(uri)
	cxp, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&xp)).Data)), cgoAllocsUnknown
	cyp, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&yp)).Data)), cgoAllocsUnknown
	__ret := C.fz_resolve_link(cctx, cdoc, curi, cxp, cyp)
	runtime.KeepAlive(uri)
	__v := (int32)(__ret)
	return __v
}

// FzLoadPage function as declared in fitz/document.h:446
func FzLoadPage(ctx *FzContext, doc *FzDocument, number int32) *FzPage {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.fz_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnumber, _ := (C.int)(number), cgoAllocsUnknown
	__ret := C.fz_load_page(cctx, cdoc, cnumber)
	__v := *(**FzPage)(unsafe.Pointer(&__ret))
	return __v
}

// FzLoadLinks function as declared in fitz/document.h:458
func FzLoadLinks(ctx *FzContext, page *FzPage) *FzLink {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	__ret := C.fz_load_links(cctx, cpage)
	__v := *(**FzLink)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPageOfSize function as declared in fitz/document.h:463
func FzNewPageOfSize(ctx *FzContext, size int32) *FzPage {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csize, _ := (C.int)(size), cgoAllocsUnknown
	__ret := C.fz_new_page_of_size(cctx, csize)
	__v := *(**FzPage)(unsafe.Pointer(&__ret))
	return __v
}

// FzBoundPage function as declared in fitz/document.h:472
func FzBoundPage(ctx *FzContext, page *FzPage, rect []FzRect) *FzRect {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	crect, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rect)).Data)), cgoAllocsUnknown
	__ret := C.fz_bound_page(cctx, cpage, crect)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

// FzRunPage function as declared in fitz/document.h:493
func FzRunPage(ctx *FzContext, page *FzPage, dev []FzDevice, transform []FzMatrix, cookie []FzCookie) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dev)).Data)), cgoAllocsUnknown
	ctransform, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&transform)).Data)), cgoAllocsUnknown
	ccookie, _ := (*C.fz_cookie)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cookie)).Data)), cgoAllocsUnknown
	C.fz_run_page(cctx, cpage, cdev, ctransform, ccookie)
}

// FzRunPageContents function as declared in fitz/document.h:515
func FzRunPageContents(ctx *FzContext, page *FzPage, dev []FzDevice, transform []FzMatrix, cookie []FzCookie) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dev)).Data)), cgoAllocsUnknown
	ctransform, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&transform)).Data)), cgoAllocsUnknown
	ccookie, _ := (*C.fz_cookie)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cookie)).Data)), cgoAllocsUnknown
	C.fz_run_page_contents(cctx, cpage, cdev, ctransform, ccookie)
}

// FzRunAnnot function as declared in fitz/document.h:538
func FzRunAnnot(ctx *FzContext, annot *FzAnnot, dev []FzDevice, transform []FzMatrix, cookie []FzCookie) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.fz_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dev)).Data)), cgoAllocsUnknown
	ctransform, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&transform)).Data)), cgoAllocsUnknown
	ccookie, _ := (*C.fz_cookie)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cookie)).Data)), cgoAllocsUnknown
	C.fz_run_annot(cctx, cannot, cdev, ctransform, ccookie)
}

// FzKeepPage function as declared in fitz/document.h:543
func FzKeepPage(ctx *FzContext, page *FzPage) *FzPage {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	__ret := C.fz_keep_page(cctx, cpage)
	__v := *(**FzPage)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropPage function as declared in fitz/document.h:548
func FzDropPage(ctx *FzContext, page *FzPage) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	C.fz_drop_page(cctx, cpage)
}

// FzPagePresentation function as declared in fitz/document.h:561
func FzPagePresentation(ctx *FzContext, page *FzPage, transition []FzTransition, duration []float32) *FzTransition {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	ctransition, _ := (*C.fz_transition)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&transition)).Data)), cgoAllocsUnknown
	cduration, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&duration)).Data)), cgoAllocsUnknown
	__ret := C.fz_page_presentation(cctx, cpage, ctransition, cduration)
	__v := *(**FzTransition)(unsafe.Pointer(&__ret))
	return __v
}

// FzHasPermission function as declared in fitz/document.h:566
func FzHasPermission(ctx *FzContext, doc *FzDocument, p FzPermission) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.fz_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cp, _ := (C.fz_permission)(p), cgoAllocsUnknown
	__ret := C.fz_has_permission(cctx, cdoc, cp)
	__v := (int32)(__ret)
	return __v
}

// FzLookupMetadata function as declared in fitz/document.h:596
func FzLookupMetadata(ctx *FzContext, doc *FzDocument, key string, buf []byte, size int32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.fz_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	key = safeString(key)
	ckey, _ := unpackPCharString(key)
	cbuf, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buf)).Data)), cgoAllocsUnknown
	csize, _ := (C.int)(size), cgoAllocsUnknown
	__ret := C.fz_lookup_metadata(cctx, cdoc, ckey, cbuf, csize)
	runtime.KeepAlive(key)
	__v := (int32)(__ret)
	return __v
}

// FzDocumentOutputIntent function as declared in fitz/document.h:607
func FzDocumentOutputIntent(ctx *FzContext, doc *FzDocument) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.fz_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.fz_document_output_intent(cctx, cdoc)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// FzPageSeparations function as declared in fitz/document.h:617
func FzPageSeparations(ctx *FzContext, page *FzPage) *FzSeparations {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	__ret := C.fz_page_separations(cctx, cpage)
	__v := *(**FzSeparations)(unsafe.Pointer(&__ret))
	return __v
}

// FzPageUsesOverprint function as declared in fitz/document.h:623
func FzPageUsesOverprint(ctx *FzContext, page *FzPage) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	__ret := C.fz_page_uses_overprint(cctx, cpage)
	__v := (int32)(__ret)
	return __v
}

// FzSaveGproof function as declared in fitz/document.h:641
func FzSaveGproof(ctx *FzContext, docFilename string, doc []FzDocument, filename string, res int32, printProfile string, displayProfile string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	docFilename = safeString(docFilename)
	cdocFilename, _ := unpackPCharString(docFilename)
	cdoc, _ := (*C.fz_document)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&doc)).Data)), cgoAllocsUnknown
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	cres, _ := (C.int)(res), cgoAllocsUnknown
	printProfile = safeString(printProfile)
	cprintProfile, _ := unpackPCharString(printProfile)
	displayProfile = safeString(displayProfile)
	cdisplayProfile, _ := unpackPCharString(displayProfile)
	C.fz_save_gproof(cctx, cdocFilename, cdoc, cfilename, cres, cprintProfile, cdisplayProfile)
	runtime.KeepAlive(displayProfile)
	runtime.KeepAlive(printProfile)
	runtime.KeepAlive(filename)
	runtime.KeepAlive(docFilename)
}

// FzNewAnnotOfSize function as declared in fitz/annotation.h:12
func FzNewAnnotOfSize(ctx *FzContext, size int32) *FzAnnot {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csize, _ := (C.int)(size), cgoAllocsUnknown
	__ret := C.fz_new_annot_of_size(cctx, csize)
	__v := *(**FzAnnot)(unsafe.Pointer(&__ret))
	return __v
}

// FzKeepAnnot function as declared in fitz/annotation.h:20
func FzKeepAnnot(ctx *FzContext, annot *FzAnnot) *FzAnnot {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.fz_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.fz_keep_annot(cctx, cannot)
	__v := *(**FzAnnot)(unsafe.Pointer(&__ret))
	return __v
}

// FzDropAnnot function as declared in fitz/annotation.h:26
func FzDropAnnot(ctx *FzContext, annot *FzAnnot) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.fz_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	C.fz_drop_annot(cctx, cannot)
}

// FzFirstAnnot function as declared in fitz/annotation.h:31
func FzFirstAnnot(ctx *FzContext, page *FzPage) *FzAnnot {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	__ret := C.fz_first_annot(cctx, cpage)
	__v := *(**FzAnnot)(unsafe.Pointer(&__ret))
	return __v
}

// FzNextAnnot function as declared in fitz/annotation.h:36
func FzNextAnnot(ctx *FzContext, annot *FzAnnot) *FzAnnot {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.fz_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.fz_next_annot(cctx, cannot)
	__v := *(**FzAnnot)(unsafe.Pointer(&__ret))
	return __v
}

// FzBoundAnnot function as declared in fitz/annotation.h:41
func FzBoundAnnot(ctx *FzContext, annot *FzAnnot, rect []FzRect) *FzRect {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.fz_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	crect, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rect)).Data)), cgoAllocsUnknown
	__ret := C.fz_bound_annot(cctx, cannot, crect)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewDisplayListFromPage function as declared in fitz/util.h:15
func FzNewDisplayListFromPage(ctx *FzContext, page *FzPage) *FzDisplayList {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	__ret := C.fz_new_display_list_from_page(cctx, cpage)
	__v := *(**FzDisplayList)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewDisplayListFromPageNumber function as declared in fitz/util.h:16
func FzNewDisplayListFromPageNumber(ctx *FzContext, doc *FzDocument, number int32) *FzDisplayList {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.fz_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnumber, _ := (C.int)(number), cgoAllocsUnknown
	__ret := C.fz_new_display_list_from_page_number(cctx, cdoc, cnumber)
	__v := *(**FzDisplayList)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewDisplayListFromPageContents function as declared in fitz/util.h:17
func FzNewDisplayListFromPageContents(ctx *FzContext, page *FzPage) *FzDisplayList {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	__ret := C.fz_new_display_list_from_page_contents(cctx, cpage)
	__v := *(**FzDisplayList)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewDisplayListFromAnnot function as declared in fitz/util.h:18
func FzNewDisplayListFromAnnot(ctx *FzContext, annot *FzAnnot) *FzDisplayList {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.fz_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.fz_new_display_list_from_annot(cctx, cannot)
	__v := *(**FzDisplayList)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPixmapFromDisplayList function as declared in fitz/util.h:23
func FzNewPixmapFromDisplayList(ctx *FzContext, list *FzDisplayList, ctm []FzMatrix, cs []FzColorspace, alpha int32) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	clist, _ := (*C.fz_display_list)(unsafe.Pointer(list)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cs)).Data)), cgoAllocsUnknown
	calpha, _ := (C.int)(alpha), cgoAllocsUnknown
	__ret := C.fz_new_pixmap_from_display_list(cctx, clist, cctm, ccs, calpha)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPixmapFromPage function as declared in fitz/util.h:24
func FzNewPixmapFromPage(ctx *FzContext, page *FzPage, ctm []FzMatrix, cs []FzColorspace, alpha int32) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cs)).Data)), cgoAllocsUnknown
	calpha, _ := (C.int)(alpha), cgoAllocsUnknown
	__ret := C.fz_new_pixmap_from_page(cctx, cpage, cctm, ccs, calpha)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPixmapFromPageNumber function as declared in fitz/util.h:25
func FzNewPixmapFromPageNumber(ctx *FzContext, doc *FzDocument, number int32, ctm []FzMatrix, cs []FzColorspace, alpha int32) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.fz_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnumber, _ := (C.int)(number), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cs)).Data)), cgoAllocsUnknown
	calpha, _ := (C.int)(alpha), cgoAllocsUnknown
	__ret := C.fz_new_pixmap_from_page_number(cctx, cdoc, cnumber, cctm, ccs, calpha)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPixmapFromPageContents function as declared in fitz/util.h:30
func FzNewPixmapFromPageContents(ctx *FzContext, page *FzPage, ctm []FzMatrix, cs []FzColorspace, alpha int32) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cs)).Data)), cgoAllocsUnknown
	calpha, _ := (C.int)(alpha), cgoAllocsUnknown
	__ret := C.fz_new_pixmap_from_page_contents(cctx, cpage, cctm, ccs, calpha)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPixmapFromAnnot function as declared in fitz/util.h:36
func FzNewPixmapFromAnnot(ctx *FzContext, annot *FzAnnot, ctm []FzMatrix, cs []FzColorspace, alpha int32) *FzPixmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.fz_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cs)).Data)), cgoAllocsUnknown
	calpha, _ := (C.int)(alpha), cgoAllocsUnknown
	__ret := C.fz_new_pixmap_from_annot(cctx, cannot, cctm, ccs, calpha)
	__v := *(**FzPixmap)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewStextPageFromPage function as declared in fitz/util.h:41
func FzNewStextPageFromPage(ctx *FzContext, page *FzPage, options []FzStextOptions) *FzStextPage {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	coptions, _ := (*C.fz_stext_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&options)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_stext_page_from_page(cctx, cpage, coptions)
	__v := *(**FzStextPage)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewStextPageFromPageNumber function as declared in fitz/util.h:42
func FzNewStextPageFromPageNumber(ctx *FzContext, doc *FzDocument, number int32, options []FzStextOptions) *FzStextPage {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.fz_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnumber, _ := (C.int)(number), cgoAllocsUnknown
	coptions, _ := (*C.fz_stext_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&options)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_stext_page_from_page_number(cctx, cdoc, cnumber, coptions)
	__v := *(**FzStextPage)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewStextPageFromDisplayList function as declared in fitz/util.h:43
func FzNewStextPageFromDisplayList(ctx *FzContext, list *FzDisplayList, options []FzStextOptions) *FzStextPage {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	clist, _ := (*C.fz_display_list)(unsafe.Pointer(list)), cgoAllocsUnknown
	coptions, _ := (*C.fz_stext_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&options)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_stext_page_from_display_list(cctx, clist, coptions)
	__v := *(**FzStextPage)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewBufferFromStextPage function as declared in fitz/util.h:48
func FzNewBufferFromStextPage(ctx *FzContext, text *FzStextPage) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctext, _ := (*C.fz_stext_page)(unsafe.Pointer(text)), cgoAllocsUnknown
	__ret := C.fz_new_buffer_from_stext_page(cctx, ctext)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewBufferFromPage function as declared in fitz/util.h:49
func FzNewBufferFromPage(ctx *FzContext, page *FzPage, options []FzStextOptions) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	coptions, _ := (*C.fz_stext_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&options)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_buffer_from_page(cctx, cpage, coptions)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewBufferFromPageNumber function as declared in fitz/util.h:50
func FzNewBufferFromPageNumber(ctx *FzContext, doc *FzDocument, number int32, options []FzStextOptions) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.fz_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnumber, _ := (C.int)(number), cgoAllocsUnknown
	coptions, _ := (*C.fz_stext_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&options)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_buffer_from_page_number(cctx, cdoc, cnumber, coptions)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewBufferFromDisplayList function as declared in fitz/util.h:51
func FzNewBufferFromDisplayList(ctx *FzContext, list *FzDisplayList, options []FzStextOptions) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	clist, _ := (*C.fz_display_list)(unsafe.Pointer(list)), cgoAllocsUnknown
	coptions, _ := (*C.fz_stext_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&options)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_buffer_from_display_list(cctx, clist, coptions)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// FzSearchPage function as declared in fitz/util.h:58
func FzSearchPage(ctx *FzContext, page *FzPage, needle string, hitBbox []FzRect, hitMax int32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.fz_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	needle = safeString(needle)
	cneedle, _ := unpackPCharString(needle)
	chitBbox, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&hitBbox)).Data)), cgoAllocsUnknown
	chitMax, _ := (C.int)(hitMax), cgoAllocsUnknown
	__ret := C.fz_search_page(cctx, cpage, cneedle, chitBbox, chitMax)
	runtime.KeepAlive(needle)
	__v := (int32)(__ret)
	return __v
}

// FzSearchPageNumber function as declared in fitz/util.h:59
func FzSearchPageNumber(ctx *FzContext, doc *FzDocument, number int32, needle string, hitBbox []FzRect, hitMax int32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.fz_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnumber, _ := (C.int)(number), cgoAllocsUnknown
	needle = safeString(needle)
	cneedle, _ := unpackPCharString(needle)
	chitBbox, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&hitBbox)).Data)), cgoAllocsUnknown
	chitMax, _ := (C.int)(hitMax), cgoAllocsUnknown
	__ret := C.fz_search_page_number(cctx, cdoc, cnumber, cneedle, chitBbox, chitMax)
	runtime.KeepAlive(needle)
	__v := (int32)(__ret)
	return __v
}

// FzSearchDisplayList function as declared in fitz/util.h:60
func FzSearchDisplayList(ctx *FzContext, list *FzDisplayList, needle string, hitBbox []FzRect, hitMax int32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	clist, _ := (*C.fz_display_list)(unsafe.Pointer(list)), cgoAllocsUnknown
	needle = safeString(needle)
	cneedle, _ := unpackPCharString(needle)
	chitBbox, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&hitBbox)).Data)), cgoAllocsUnknown
	chitMax, _ := (C.int)(hitMax), cgoAllocsUnknown
	__ret := C.fz_search_display_list(cctx, clist, cneedle, chitBbox, chitMax)
	runtime.KeepAlive(needle)
	__v := (int32)(__ret)
	return __v
}

// FzNewDisplayListFromSvg function as declared in fitz/util.h:65
func FzNewDisplayListFromSvg(ctx *FzContext, buf *FzBuffer, w []float32, h []float32) *FzDisplayList {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	cw, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&w)).Data)), cgoAllocsUnknown
	ch, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&h)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_display_list_from_svg(cctx, cbuf, cw, ch)
	__v := *(**FzDisplayList)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewImageFromSvg function as declared in fitz/util.h:70
func FzNewImageFromSvg(ctx *FzContext, buf *FzBuffer) *FzImage {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	__ret := C.fz_new_image_from_svg(cctx, cbuf)
	__v := *(**FzImage)(unsafe.Pointer(&__ret))
	return __v
}

// FzWriteImageAsDataUri function as declared in fitz/util.h:75
func FzWriteImageAsDataUri(ctx *FzContext, out *FzOutput, image []FzImage) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cimage, _ := (*C.fz_image)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&image)).Data)), cgoAllocsUnknown
	C.fz_write_image_as_data_uri(cctx, cout, cimage)
}

// FzHasOption function as declared in fitz/writer.h:78
func FzHasOption(ctx *FzContext, opts string, key string, val []string) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	opts = safeString(opts)
	copts, _ := unpackPCharString(opts)
	key = safeString(key)
	ckey, _ := unpackPCharString(key)
	cval, _ := unpackArgSString(val)
	__ret := C.fz_has_option(cctx, copts, ckey, cval)
	packSString(val, cval)
	runtime.KeepAlive(key)
	runtime.KeepAlive(opts)
	__v := (int32)(__ret)
	return __v
}

// FzOptionEq function as declared in fitz/writer.h:79
func FzOptionEq(a string, b string) int32 {
	a = safeString(a)
	ca, _ := unpackPCharString(a)
	b = safeString(b)
	cb, _ := unpackPCharString(b)
	__ret := C.fz_option_eq(ca, cb)
	runtime.KeepAlive(b)
	runtime.KeepAlive(a)
	__v := (int32)(__ret)
	return __v
}

// FzNewDocumentWriter function as declared in fitz/writer.h:93
func FzNewDocumentWriter(ctx *FzContext, path string, format string, options string) *FzDocumentWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	format = safeString(format)
	cformat, _ := unpackPCharString(format)
	options = safeString(options)
	coptions, _ := unpackPCharString(options)
	__ret := C.fz_new_document_writer(cctx, cpath, cformat, coptions)
	runtime.KeepAlive(options)
	runtime.KeepAlive(format)
	runtime.KeepAlive(path)
	__v := *(**FzDocumentWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPDFWriter function as declared in fitz/writer.h:95
func FzNewPDFWriter(ctx *FzContext, path string, options string) *FzDocumentWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	options = safeString(options)
	coptions, _ := unpackPCharString(options)
	__ret := C.fz_new_pdf_writer(cctx, cpath, coptions)
	runtime.KeepAlive(options)
	runtime.KeepAlive(path)
	__v := *(**FzDocumentWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewSvgWriter function as declared in fitz/writer.h:96
func FzNewSvgWriter(ctx *FzContext, path string, options string) *FzDocumentWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	options = safeString(options)
	coptions, _ := unpackPCharString(options)
	__ret := C.fz_new_svg_writer(cctx, cpath, coptions)
	runtime.KeepAlive(options)
	runtime.KeepAlive(path)
	__v := *(**FzDocumentWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewTextWriter function as declared in fitz/writer.h:98
func FzNewTextWriter(ctx *FzContext, format string, path string, options string) *FzDocumentWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	format = safeString(format)
	cformat, _ := unpackPCharString(format)
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	options = safeString(options)
	coptions, _ := unpackPCharString(options)
	__ret := C.fz_new_text_writer(cctx, cformat, cpath, coptions)
	runtime.KeepAlive(options)
	runtime.KeepAlive(path)
	runtime.KeepAlive(format)
	__v := *(**FzDocumentWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPsWriter function as declared in fitz/writer.h:100
func FzNewPsWriter(ctx *FzContext, path string, options string) *FzDocumentWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	options = safeString(options)
	coptions, _ := unpackPCharString(options)
	__ret := C.fz_new_ps_writer(cctx, cpath, coptions)
	runtime.KeepAlive(options)
	runtime.KeepAlive(path)
	__v := *(**FzDocumentWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPclWriter function as declared in fitz/writer.h:101
func FzNewPclWriter(ctx *FzContext, path string, options string) *FzDocumentWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	options = safeString(options)
	coptions, _ := unpackPCharString(options)
	__ret := C.fz_new_pcl_writer(cctx, cpath, coptions)
	runtime.KeepAlive(options)
	runtime.KeepAlive(path)
	__v := *(**FzDocumentWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPwgWriter function as declared in fitz/writer.h:102
func FzNewPwgWriter(ctx *FzContext, path string, options string) *FzDocumentWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	options = safeString(options)
	coptions, _ := unpackPCharString(options)
	__ret := C.fz_new_pwg_writer(cctx, cpath, coptions)
	runtime.KeepAlive(options)
	runtime.KeepAlive(path)
	__v := *(**FzDocumentWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewCbzWriter function as declared in fitz/writer.h:104
func FzNewCbzWriter(ctx *FzContext, path string, options string) *FzDocumentWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	options = safeString(options)
	coptions, _ := unpackPCharString(options)
	__ret := C.fz_new_cbz_writer(cctx, cpath, coptions)
	runtime.KeepAlive(options)
	runtime.KeepAlive(path)
	__v := *(**FzDocumentWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPngPixmapWriter function as declared in fitz/writer.h:105
func FzNewPngPixmapWriter(ctx *FzContext, path string, options string) *FzDocumentWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	options = safeString(options)
	coptions, _ := unpackPCharString(options)
	__ret := C.fz_new_png_pixmap_writer(cctx, cpath, coptions)
	runtime.KeepAlive(options)
	runtime.KeepAlive(path)
	__v := *(**FzDocumentWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewTgaPixmapWriter function as declared in fitz/writer.h:106
func FzNewTgaPixmapWriter(ctx *FzContext, path string, options string) *FzDocumentWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	options = safeString(options)
	coptions, _ := unpackPCharString(options)
	__ret := C.fz_new_tga_pixmap_writer(cctx, cpath, coptions)
	runtime.KeepAlive(options)
	runtime.KeepAlive(path)
	__v := *(**FzDocumentWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPamPixmapWriter function as declared in fitz/writer.h:107
func FzNewPamPixmapWriter(ctx *FzContext, path string, options string) *FzDocumentWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	options = safeString(options)
	coptions, _ := unpackPCharString(options)
	__ret := C.fz_new_pam_pixmap_writer(cctx, cpath, coptions)
	runtime.KeepAlive(options)
	runtime.KeepAlive(path)
	__v := *(**FzDocumentWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPnmPixmapWriter function as declared in fitz/writer.h:108
func FzNewPnmPixmapWriter(ctx *FzContext, path string, options string) *FzDocumentWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	options = safeString(options)
	coptions, _ := unpackPCharString(options)
	__ret := C.fz_new_pnm_pixmap_writer(cctx, cpath, coptions)
	runtime.KeepAlive(options)
	runtime.KeepAlive(path)
	__v := *(**FzDocumentWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPgmPixmapWriter function as declared in fitz/writer.h:109
func FzNewPgmPixmapWriter(ctx *FzContext, path string, options string) *FzDocumentWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	options = safeString(options)
	coptions, _ := unpackPCharString(options)
	__ret := C.fz_new_pgm_pixmap_writer(cctx, cpath, coptions)
	runtime.KeepAlive(options)
	runtime.KeepAlive(path)
	__v := *(**FzDocumentWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPpmPixmapWriter function as declared in fitz/writer.h:110
func FzNewPpmPixmapWriter(ctx *FzContext, path string, options string) *FzDocumentWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	options = safeString(options)
	coptions, _ := unpackPCharString(options)
	__ret := C.fz_new_ppm_pixmap_writer(cctx, cpath, coptions)
	runtime.KeepAlive(options)
	runtime.KeepAlive(path)
	__v := *(**FzDocumentWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPbmPixmapWriter function as declared in fitz/writer.h:111
func FzNewPbmPixmapWriter(ctx *FzContext, path string, options string) *FzDocumentWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	options = safeString(options)
	coptions, _ := unpackPCharString(options)
	__ret := C.fz_new_pbm_pixmap_writer(cctx, cpath, coptions)
	runtime.KeepAlive(options)
	runtime.KeepAlive(path)
	__v := *(**FzDocumentWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPkmPixmapWriter function as declared in fitz/writer.h:112
func FzNewPkmPixmapWriter(ctx *FzContext, path string, options string) *FzDocumentWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	options = safeString(options)
	coptions, _ := unpackPCharString(options)
	__ret := C.fz_new_pkm_pixmap_writer(cctx, cpath, coptions)
	runtime.KeepAlive(options)
	runtime.KeepAlive(path)
	__v := *(**FzDocumentWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzBeginPage function as declared in fitz/writer.h:122
func FzBeginPage(ctx *FzContext, wri *FzDocumentWriter, mediabox []FzRect) *FzDevice {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cwri, _ := (*C.fz_document_writer)(unsafe.Pointer(wri)), cgoAllocsUnknown
	cmediabox, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&mediabox)).Data)), cgoAllocsUnknown
	__ret := C.fz_begin_page(cctx, cwri, cmediabox)
	__v := *(**FzDevice)(unsafe.Pointer(&__ret))
	return __v
}

// FzEndPage function as declared in fitz/writer.h:128
func FzEndPage(ctx *FzContext, wri *FzDocumentWriter) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cwri, _ := (*C.fz_document_writer)(unsafe.Pointer(wri)), cgoAllocsUnknown
	C.fz_end_page(cctx, cwri)
}

// FzCloseDocumentWriter function as declared in fitz/writer.h:137
func FzCloseDocumentWriter(ctx *FzContext, wri *FzDocumentWriter) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cwri, _ := (*C.fz_document_writer)(unsafe.Pointer(wri)), cgoAllocsUnknown
	C.fz_close_document_writer(cctx, cwri)
}

// FzDropDocumentWriter function as declared in fitz/writer.h:147
func FzDropDocumentWriter(ctx *FzContext, wri *FzDocumentWriter) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cwri, _ := (*C.fz_document_writer)(unsafe.Pointer(wri)), cgoAllocsUnknown
	C.fz_drop_document_writer(cctx, cwri)
}

// FzNewBandWriterOfSize function as declared in fitz/band-writer.h:37
func FzNewBandWriterOfSize(ctx *FzContext, size uint, out []FzOutput) *FzBandWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&out)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_band_writer_of_size(cctx, csize, cout)
	__v := *(**FzBandWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzWriteHeader function as declared in fitz/band-writer.h:62
func FzWriteHeader(ctx *FzContext, writer *FzBandWriter, w int32, h int32, n int32, alpha int32, xres int32, yres int32, pagenum int32, cs []FzColorspace, seps []FzSeparations) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cwriter, _ := (*C.fz_band_writer)(unsafe.Pointer(writer)), cgoAllocsUnknown
	cw, _ := (C.int)(w), cgoAllocsUnknown
	ch, _ := (C.int)(h), cgoAllocsUnknown
	cn, _ := (C.int)(n), cgoAllocsUnknown
	calpha, _ := (C.int)(alpha), cgoAllocsUnknown
	cxres, _ := (C.int)(xres), cgoAllocsUnknown
	cyres, _ := (C.int)(yres), cgoAllocsUnknown
	cpagenum, _ := (C.int)(pagenum), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cs)).Data)), cgoAllocsUnknown
	cseps, _ := (*C.fz_separations)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&seps)).Data)), cgoAllocsUnknown
	C.fz_write_header(cctx, cwriter, cw, ch, cn, calpha, cxres, cyres, cpagenum, ccs, cseps)
}

// FzWriteBand function as declared in fitz/band-writer.h:76
func FzWriteBand(ctx *FzContext, writer *FzBandWriter, stride int32, bandHeight int32, samples string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cwriter, _ := (*C.fz_band_writer)(unsafe.Pointer(writer)), cgoAllocsUnknown
	cstride, _ := (C.int)(stride), cgoAllocsUnknown
	cbandHeight, _ := (C.int)(bandHeight), cgoAllocsUnknown
	samples = safeString(samples)
	csamples, _ := unpackPUcharString(samples)
	C.fz_write_band(cctx, cwriter, cstride, cbandHeight, csamples)
	runtime.KeepAlive(samples)
}

// FzDropBandWriter function as declared in fitz/band-writer.h:78
func FzDropBandWriter(ctx *FzContext, writer *FzBandWriter) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cwriter, _ := (*C.fz_band_writer)(unsafe.Pointer(writer)), cgoAllocsUnknown
	C.fz_drop_band_writer(cctx, cwriter)
}

// FzSavePixmapAsPnm function as declared in fitz/output-pnm.h:14
func FzSavePixmapAsPnm(ctx *FzContext, pixmap *FzPixmap, filename string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpixmap, _ := pixmap.PassRef()
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	C.fz_save_pixmap_as_pnm(cctx, cpixmap, cfilename)
	runtime.KeepAlive(filename)
}

// FzWritePixmapAsPnm function as declared in fitz/output-pnm.h:16
func FzWritePixmapAsPnm(ctx *FzContext, out *FzOutput, pixmap []FzPixmap) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cpixmap, _ := unpackArgSFzPixmap(pixmap)
	C.fz_write_pixmap_as_pnm(cctx, cout, cpixmap)
	packSFzPixmap(pixmap, cpixmap)
}

// FzNewPnmBandWriter function as declared in fitz/output-pnm.h:18
func FzNewPnmBandWriter(ctx *FzContext, out *FzOutput) *FzBandWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	__ret := C.fz_new_pnm_band_writer(cctx, cout)
	__v := *(**FzBandWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzSavePixmapAsPam function as declared in fitz/output-pnm.h:23
func FzSavePixmapAsPam(ctx *FzContext, pixmap *FzPixmap, filename string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpixmap, _ := pixmap.PassRef()
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	C.fz_save_pixmap_as_pam(cctx, cpixmap, cfilename)
	runtime.KeepAlive(filename)
}

// FzWritePixmapAsPam function as declared in fitz/output-pnm.h:25
func FzWritePixmapAsPam(ctx *FzContext, out *FzOutput, pixmap []FzPixmap) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cpixmap, _ := unpackArgSFzPixmap(pixmap)
	C.fz_write_pixmap_as_pam(cctx, cout, cpixmap)
	packSFzPixmap(pixmap, cpixmap)
}

// FzNewPamBandWriter function as declared in fitz/output-pnm.h:27
func FzNewPamBandWriter(ctx *FzContext, out *FzOutput) *FzBandWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	__ret := C.fz_new_pam_band_writer(cctx, cout)
	__v := *(**FzBandWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzSaveBitmapAsPbm function as declared in fitz/output-pnm.h:32
func FzSaveBitmapAsPbm(ctx *FzContext, bitmap *FzBitmap, filename string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbitmap, _ := (*C.fz_bitmap)(unsafe.Pointer(bitmap)), cgoAllocsUnknown
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	C.fz_save_bitmap_as_pbm(cctx, cbitmap, cfilename)
	runtime.KeepAlive(filename)
}

// FzWriteBitmapAsPbm function as declared in fitz/output-pnm.h:34
func FzWriteBitmapAsPbm(ctx *FzContext, out *FzOutput, bitmap []FzBitmap) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cbitmap, _ := (*C.fz_bitmap)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&bitmap)).Data)), cgoAllocsUnknown
	C.fz_write_bitmap_as_pbm(cctx, cout, cbitmap)
}

// FzNewPbmBandWriter function as declared in fitz/output-pnm.h:36
func FzNewPbmBandWriter(ctx *FzContext, out *FzOutput) *FzBandWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	__ret := C.fz_new_pbm_band_writer(cctx, cout)
	__v := *(**FzBandWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzSavePixmapAsPbm function as declared in fitz/output-pnm.h:38
func FzSavePixmapAsPbm(ctx *FzContext, pixmap *FzPixmap, filename string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpixmap, _ := pixmap.PassRef()
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	C.fz_save_pixmap_as_pbm(cctx, cpixmap, cfilename)
	runtime.KeepAlive(filename)
}

// FzSaveBitmapAsPkm function as declared in fitz/output-pnm.h:43
func FzSaveBitmapAsPkm(ctx *FzContext, bitmap *FzBitmap, filename string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbitmap, _ := (*C.fz_bitmap)(unsafe.Pointer(bitmap)), cgoAllocsUnknown
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	C.fz_save_bitmap_as_pkm(cctx, cbitmap, cfilename)
	runtime.KeepAlive(filename)
}

// FzWriteBitmapAsPkm function as declared in fitz/output-pnm.h:45
func FzWriteBitmapAsPkm(ctx *FzContext, out *FzOutput, bitmap []FzBitmap) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cbitmap, _ := (*C.fz_bitmap)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&bitmap)).Data)), cgoAllocsUnknown
	C.fz_write_bitmap_as_pkm(cctx, cout, cbitmap)
}

// FzNewPkmBandWriter function as declared in fitz/output-pnm.h:47
func FzNewPkmBandWriter(ctx *FzContext, out *FzOutput) *FzBandWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	__ret := C.fz_new_pkm_band_writer(cctx, cout)
	__v := *(**FzBandWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzSavePixmapAsPkm function as declared in fitz/output-pnm.h:49
func FzSavePixmapAsPkm(ctx *FzContext, pixmap *FzPixmap, filename string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpixmap, _ := pixmap.PassRef()
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	C.fz_save_pixmap_as_pkm(cctx, cpixmap, cfilename)
	runtime.KeepAlive(filename)
}

// FzSavePixmapAsPng function as declared in fitz/output-png.h:17
func FzSavePixmapAsPng(ctx *FzContext, pixmap *FzPixmap, filename string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpixmap, _ := pixmap.PassRef()
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	C.fz_save_pixmap_as_png(cctx, cpixmap, cfilename)
	runtime.KeepAlive(filename)
}

// FzWritePixmapAsPng function as declared in fitz/output-png.h:22
func FzWritePixmapAsPng(ctx *FzContext, out *FzOutput, pixmap []FzPixmap) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cpixmap, _ := unpackArgSFzPixmap(pixmap)
	C.fz_write_pixmap_as_png(cctx, cout, cpixmap)
	packSFzPixmap(pixmap, cpixmap)
}

// FzNewPngBandWriter function as declared in fitz/output-png.h:28
func FzNewPngBandWriter(ctx *FzContext, out *FzOutput) *FzBandWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	__ret := C.fz_new_png_band_writer(cctx, cout)
	__v := *(**FzBandWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewBufferFromImageAsPng function as declared in fitz/output-png.h:33
func FzNewBufferFromImageAsPng(ctx *FzContext, image *FzImage, colorParams []FzColorParams) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cimage, _ := (*C.fz_image)(unsafe.Pointer(image)), cgoAllocsUnknown
	ccolorParams, _ := (*C.fz_color_params)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorParams)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_buffer_from_image_as_png(cctx, cimage, ccolorParams)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewBufferFromPixmapAsPng function as declared in fitz/output-png.h:34
func FzNewBufferFromPixmapAsPng(ctx *FzContext, pixmap *FzPixmap, colorParams []FzColorParams) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpixmap, _ := pixmap.PassRef()
	ccolorParams, _ := (*C.fz_color_params)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorParams)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_buffer_from_pixmap_as_png(cctx, cpixmap, ccolorParams)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// FzSavePixmapAsPwg function as declared in fitz/output-pwg.h:65
func FzSavePixmapAsPwg(ctx *FzContext, pixmap *FzPixmap, filename []byte, append int32, pwg []FzPwgOptions) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpixmap, _ := pixmap.PassRef()
	cfilename, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&filename)).Data)), cgoAllocsUnknown
	cappend, _ := (C.int)(append), cgoAllocsUnknown
	cpwg, _ := (*C.fz_pwg_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&pwg)).Data)), cgoAllocsUnknown
	C.fz_save_pixmap_as_pwg(cctx, cpixmap, cfilename, cappend, cpwg)
}

// FzSaveBitmapAsPwg function as declared in fitz/output-pwg.h:77
func FzSaveBitmapAsPwg(ctx *FzContext, bitmap *FzBitmap, filename []byte, append int32, pwg []FzPwgOptions) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbitmap, _ := (*C.fz_bitmap)(unsafe.Pointer(bitmap)), cgoAllocsUnknown
	cfilename, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&filename)).Data)), cgoAllocsUnknown
	cappend, _ := (C.int)(append), cgoAllocsUnknown
	cpwg, _ := (*C.fz_pwg_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&pwg)).Data)), cgoAllocsUnknown
	C.fz_save_bitmap_as_pwg(cctx, cbitmap, cfilename, cappend, cpwg)
}

// FzWritePixmapAsPwg function as declared in fitz/output-pwg.h:82
func FzWritePixmapAsPwg(ctx *FzContext, out *FzOutput, pixmap []FzPixmap, pwg []FzPwgOptions) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cpixmap, _ := unpackArgSFzPixmap(pixmap)
	cpwg, _ := (*C.fz_pwg_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&pwg)).Data)), cgoAllocsUnknown
	C.fz_write_pixmap_as_pwg(cctx, cout, cpixmap, cpwg)
	packSFzPixmap(pixmap, cpixmap)
}

// FzWriteBitmapAsPwg function as declared in fitz/output-pwg.h:87
func FzWriteBitmapAsPwg(ctx *FzContext, out *FzOutput, bitmap []FzBitmap, pwg []FzPwgOptions) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cbitmap, _ := (*C.fz_bitmap)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&bitmap)).Data)), cgoAllocsUnknown
	cpwg, _ := (*C.fz_pwg_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&pwg)).Data)), cgoAllocsUnknown
	C.fz_write_bitmap_as_pwg(cctx, cout, cbitmap, cpwg)
}

// FzWritePwgFileHeader function as declared in fitz/output-pwg.h:92
func FzWritePwgFileHeader(ctx *FzContext, out *FzOutput) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	C.fz_write_pwg_file_header(cctx, cout)
}

// FzWritePixmapAsPwgPage function as declared in fitz/output-pwg.h:97
func FzWritePixmapAsPwgPage(ctx *FzContext, out *FzOutput, pixmap []FzPixmap, pwg []FzPwgOptions) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cpixmap, _ := unpackArgSFzPixmap(pixmap)
	cpwg, _ := (*C.fz_pwg_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&pwg)).Data)), cgoAllocsUnknown
	C.fz_write_pixmap_as_pwg_page(cctx, cout, cpixmap, cpwg)
	packSFzPixmap(pixmap, cpixmap)
}

// FzWriteBitmapAsPwgPage function as declared in fitz/output-pwg.h:102
func FzWriteBitmapAsPwgPage(ctx *FzContext, out *FzOutput, bitmap []FzBitmap, pwg []FzPwgOptions) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cbitmap, _ := (*C.fz_bitmap)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&bitmap)).Data)), cgoAllocsUnknown
	cpwg, _ := (*C.fz_pwg_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&pwg)).Data)), cgoAllocsUnknown
	C.fz_write_bitmap_as_pwg_page(cctx, cout, cbitmap, cpwg)
}

// FzNewMonoPwgBandWriter function as declared in fitz/output-pwg.h:108
func FzNewMonoPwgBandWriter(ctx *FzContext, out *FzOutput, pwg []FzPwgOptions) *FzBandWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cpwg, _ := (*C.fz_pwg_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&pwg)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_mono_pwg_band_writer(cctx, cout, cpwg)
	__v := *(**FzBandWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPwgBandWriter function as declared in fitz/output-pwg.h:114
func FzNewPwgBandWriter(ctx *FzContext, out *FzOutput, pwg []FzPwgOptions) *FzBandWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cpwg, _ := (*C.fz_pwg_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&pwg)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_pwg_band_writer(cctx, cout, cpwg)
	__v := *(**FzBandWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzPclPreset function as declared in fitz/output-pcl.h:57
func FzPclPreset(ctx *FzContext, opts *FzPclOptions, preset string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	copts, _ := (*C.fz_pcl_options)(unsafe.Pointer(opts)), cgoAllocsUnknown
	preset = safeString(preset)
	cpreset, _ := unpackPCharString(preset)
	C.fz_pcl_preset(cctx, copts, cpreset)
	runtime.KeepAlive(preset)
}

// FzParsePclOptions function as declared in fitz/output-pcl.h:78
func FzParsePclOptions(ctx *FzContext, opts *FzPclOptions, args string) *FzPclOptions {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	copts, _ := (*C.fz_pcl_options)(unsafe.Pointer(opts)), cgoAllocsUnknown
	args = safeString(args)
	cargs, _ := unpackPCharString(args)
	__ret := C.fz_parse_pcl_options(cctx, copts, cargs)
	runtime.KeepAlive(args)
	__v := *(**FzPclOptions)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewMonoPclBandWriter function as declared in fitz/output-pcl.h:80
func FzNewMonoPclBandWriter(ctx *FzContext, out *FzOutput, options []FzPclOptions) *FzBandWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	coptions, _ := (*C.fz_pcl_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&options)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_mono_pcl_band_writer(cctx, cout, coptions)
	__v := *(**FzBandWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzWriteBitmapAsPcl function as declared in fitz/output-pcl.h:81
func FzWriteBitmapAsPcl(ctx *FzContext, out *FzOutput, bitmap []FzBitmap, pcl []FzPclOptions) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cbitmap, _ := (*C.fz_bitmap)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&bitmap)).Data)), cgoAllocsUnknown
	cpcl, _ := (*C.fz_pcl_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&pcl)).Data)), cgoAllocsUnknown
	C.fz_write_bitmap_as_pcl(cctx, cout, cbitmap, cpcl)
}

// FzSaveBitmapAsPcl function as declared in fitz/output-pcl.h:82
func FzSaveBitmapAsPcl(ctx *FzContext, bitmap *FzBitmap, filename []byte, append int32, pcl []FzPclOptions) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbitmap, _ := (*C.fz_bitmap)(unsafe.Pointer(bitmap)), cgoAllocsUnknown
	cfilename, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&filename)).Data)), cgoAllocsUnknown
	cappend, _ := (C.int)(append), cgoAllocsUnknown
	cpcl, _ := (*C.fz_pcl_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&pcl)).Data)), cgoAllocsUnknown
	C.fz_save_bitmap_as_pcl(cctx, cbitmap, cfilename, cappend, cpcl)
}

// FzNewColorPclBandWriter function as declared in fitz/output-pcl.h:84
func FzNewColorPclBandWriter(ctx *FzContext, out *FzOutput, options []FzPclOptions) *FzBandWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	coptions, _ := (*C.fz_pcl_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&options)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_color_pcl_band_writer(cctx, cout, coptions)
	__v := *(**FzBandWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzWritePixmapAsPcl function as declared in fitz/output-pcl.h:85
func FzWritePixmapAsPcl(ctx *FzContext, out *FzOutput, pixmap []FzPixmap, pcl []FzPclOptions) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cpixmap, _ := unpackArgSFzPixmap(pixmap)
	cpcl, _ := (*C.fz_pcl_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&pcl)).Data)), cgoAllocsUnknown
	C.fz_write_pixmap_as_pcl(cctx, cout, cpixmap, cpcl)
	packSFzPixmap(pixmap, cpixmap)
}

// FzSavePixmapAsPcl function as declared in fitz/output-pcl.h:86
func FzSavePixmapAsPcl(ctx *FzContext, pixmap *FzPixmap, filename []byte, append int32, pcl []FzPclOptions) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpixmap, _ := pixmap.PassRef()
	cfilename, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&filename)).Data)), cgoAllocsUnknown
	cappend, _ := (C.int)(append), cgoAllocsUnknown
	cpcl, _ := (*C.fz_pcl_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&pcl)).Data)), cgoAllocsUnknown
	C.fz_save_pixmap_as_pcl(cctx, cpixmap, cfilename, cappend, cpcl)
}

// FzParsePclmOptions function as declared in fitz/output-pclm.h:34
func FzParsePclmOptions(ctx *FzContext, opts *FzPclmOptions, args string) *FzPclmOptions {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	copts, _ := (*C.fz_pclm_options)(unsafe.Pointer(opts)), cgoAllocsUnknown
	args = safeString(args)
	cargs, _ := unpackPCharString(args)
	__ret := C.fz_parse_pclm_options(cctx, copts, cargs)
	runtime.KeepAlive(args)
	__v := *(**FzPclmOptions)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPclmBandWriter function as declared in fitz/output-pclm.h:36
func FzNewPclmBandWriter(ctx *FzContext, out *FzOutput, options []FzPclmOptions) *FzBandWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	coptions, _ := (*C.fz_pclm_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&options)).Data)), cgoAllocsUnknown
	__ret := C.fz_new_pclm_band_writer(cctx, cout, coptions)
	__v := *(**FzBandWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewPclmWriter function as declared in fitz/output-pclm.h:37
func FzNewPclmWriter(ctx *FzContext, path string, options string) *FzDocumentWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	options = safeString(options)
	coptions, _ := unpackPCharString(options)
	__ret := C.fz_new_pclm_writer(cctx, cpath, coptions)
	runtime.KeepAlive(options)
	runtime.KeepAlive(path)
	__v := *(**FzDocumentWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzWritePixmapAsPclm function as declared in fitz/output-pclm.h:38
func FzWritePixmapAsPclm(ctx *FzContext, out *FzOutput, pixmap []FzPixmap, options []FzPclmOptions) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cpixmap, _ := unpackArgSFzPixmap(pixmap)
	coptions, _ := (*C.fz_pclm_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&options)).Data)), cgoAllocsUnknown
	C.fz_write_pixmap_as_pclm(cctx, cout, cpixmap, coptions)
	packSFzPixmap(pixmap, cpixmap)
}

// FzSavePixmapAsPclm function as declared in fitz/output-pclm.h:39
func FzSavePixmapAsPclm(ctx *FzContext, pixmap *FzPixmap, filename []byte, append int32, options []FzPclmOptions) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpixmap, _ := pixmap.PassRef()
	cfilename, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&filename)).Data)), cgoAllocsUnknown
	cappend, _ := (C.int)(append), cgoAllocsUnknown
	coptions, _ := (*C.fz_pclm_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&options)).Data)), cgoAllocsUnknown
	C.fz_save_pixmap_as_pclm(cctx, cpixmap, cfilename, cappend, coptions)
}

// FzWritePixmapAsPs function as declared in fitz/output-ps.h:13
func FzWritePixmapAsPs(ctx *FzContext, out *FzOutput, pixmap []FzPixmap) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cpixmap, _ := unpackArgSFzPixmap(pixmap)
	C.fz_write_pixmap_as_ps(cctx, cout, cpixmap)
	packSFzPixmap(pixmap, cpixmap)
}

// FzSavePixmapAsPs function as declared in fitz/output-ps.h:15
func FzSavePixmapAsPs(ctx *FzContext, pixmap *FzPixmap, filename []byte, append int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpixmap, _ := pixmap.PassRef()
	cfilename, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&filename)).Data)), cgoAllocsUnknown
	cappend, _ := (C.int)(append), cgoAllocsUnknown
	C.fz_save_pixmap_as_ps(cctx, cpixmap, cfilename, cappend)
}

// FzWritePsFileHeader function as declared in fitz/output-ps.h:17
func FzWritePsFileHeader(ctx *FzContext, out *FzOutput) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	C.fz_write_ps_file_header(cctx, cout)
}

// FzNewPsBandWriter function as declared in fitz/output-ps.h:19
func FzNewPsBandWriter(ctx *FzContext, out *FzOutput) *FzBandWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	__ret := C.fz_new_ps_band_writer(cctx, cout)
	__v := *(**FzBandWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzWritePsFileTrailer function as declared in fitz/output-ps.h:21
func FzWritePsFileTrailer(ctx *FzContext, out *FzOutput, pages int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cpages, _ := (C.int)(pages), cgoAllocsUnknown
	C.fz_write_ps_file_trailer(cctx, cout, cpages)
}

// FzSavePixmapAsPsd function as declared in fitz/output-psd.h:17
func FzSavePixmapAsPsd(ctx *FzContext, pixmap *FzPixmap, filename string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpixmap, _ := pixmap.PassRef()
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	C.fz_save_pixmap_as_psd(cctx, cpixmap, cfilename)
	runtime.KeepAlive(filename)
}

// FzWritePixmapAsPsd function as declared in fitz/output-psd.h:22
func FzWritePixmapAsPsd(ctx *FzContext, out *FzOutput, pixmap []FzPixmap) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cpixmap, _ := unpackArgSFzPixmap(pixmap)
	C.fz_write_pixmap_as_psd(cctx, cout, cpixmap)
	packSFzPixmap(pixmap, cpixmap)
}

// FzNewPsdBandWriter function as declared in fitz/output-psd.h:28
func FzNewPsdBandWriter(ctx *FzContext, out *FzOutput) *FzBandWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	__ret := C.fz_new_psd_band_writer(cctx, cout)
	__v := *(**FzBandWriter)(unsafe.Pointer(&__ret))
	return __v
}

// FzNewSvgDevice function as declared in fitz/output-svg.h:28
func FzNewSvgDevice(ctx *FzContext, out *FzOutput, pageWidth float32, pageHeight float32, textFormat int32, reuseImages int32) *FzDevice {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cpageWidth, _ := (C.float)(pageWidth), cgoAllocsUnknown
	cpageHeight, _ := (C.float)(pageHeight), cgoAllocsUnknown
	ctextFormat, _ := (C.int)(textFormat), cgoAllocsUnknown
	creuseImages, _ := (C.int)(reuseImages), cgoAllocsUnknown
	__ret := C.fz_new_svg_device(cctx, cout, cpageWidth, cpageHeight, ctextFormat, creuseImages)
	__v := *(**FzDevice)(unsafe.Pointer(&__ret))
	return __v
}

// FzSavePixmapAsTga function as declared in fitz/output-tga.h:15
func FzSavePixmapAsTga(ctx *FzContext, pixmap *FzPixmap, filename string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpixmap, _ := pixmap.PassRef()
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	C.fz_save_pixmap_as_tga(cctx, cpixmap, cfilename)
	runtime.KeepAlive(filename)
}

// FzWritePixmapAsTga function as declared in fitz/output-tga.h:22
func FzWritePixmapAsTga(ctx *FzContext, out *FzOutput, pixmap []FzPixmap) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cpixmap, _ := unpackArgSFzPixmap(pixmap)
	C.fz_write_pixmap_as_tga(cctx, cout, cpixmap)
	packSFzPixmap(pixmap, cpixmap)
}

// FzNewTgaBandWriter function as declared in fitz/output-tga.h:34
func FzNewTgaBandWriter(ctx *FzContext, out *FzOutput, isBgr int32) *FzBandWriter {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cisBgr, _ := (C.int)(isBgr), cgoAllocsUnknown
	__ret := C.fz_new_tga_band_writer(cctx, cout, cisBgr)
	__v := *(**FzBandWriter)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewNull function as declared in pdf/object.h:14
func PDFNewNull(ctx *FzContext, doc *PDFDocument) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_new_null(cctx, cdoc)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewBool function as declared in pdf/object.h:15
func PDFNewBool(ctx *FzContext, doc *PDFDocument, b int32) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cb, _ := (C.int)(b), cgoAllocsUnknown
	__ret := C.pdf_new_bool(cctx, cdoc, cb)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewInt function as declared in pdf/object.h:16
func PDFNewInt(ctx *FzContext, doc *PDFDocument, i int) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	ci, _ := (C.int64_t)(i), cgoAllocsUnknown
	__ret := C.pdf_new_int(cctx, cdoc, ci)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewReal function as declared in pdf/object.h:17
func PDFNewReal(ctx *FzContext, doc *PDFDocument, f float32) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cf, _ := (C.float)(f), cgoAllocsUnknown
	__ret := C.pdf_new_real(cctx, cdoc, cf)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewName function as declared in pdf/object.h:18
func PDFNewName(ctx *FzContext, doc *PDFDocument, str string) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	str = safeString(str)
	cstr, _ := unpackPCharString(str)
	__ret := C.pdf_new_name(cctx, cdoc, cstr)
	runtime.KeepAlive(str)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewString function as declared in pdf/object.h:19
func PDFNewString(ctx *FzContext, doc *PDFDocument, str string, len uint) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	str = safeString(str)
	cstr, _ := unpackPCharString(str)
	clen, _ := (C.size_t)(len), cgoAllocsUnknown
	__ret := C.pdf_new_string(cctx, cdoc, cstr, clen)
	runtime.KeepAlive(str)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewTextString function as declared in pdf/object.h:20
func PDFNewTextString(ctx *FzContext, doc *PDFDocument, s string) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	s = safeString(s)
	cs, _ := unpackPCharString(s)
	__ret := C.pdf_new_text_string(cctx, cdoc, cs)
	runtime.KeepAlive(s)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewIndirect function as declared in pdf/object.h:21
func PDFNewIndirect(ctx *FzContext, doc *PDFDocument, num int32, gen int32) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	cgen, _ := (C.int)(gen), cgoAllocsUnknown
	__ret := C.pdf_new_indirect(cctx, cdoc, cnum, cgen)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewArray function as declared in pdf/object.h:22
func PDFNewArray(ctx *FzContext, doc *PDFDocument, initialcap int32) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cinitialcap, _ := (C.int)(initialcap), cgoAllocsUnknown
	__ret := C.pdf_new_array(cctx, cdoc, cinitialcap)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewDict function as declared in pdf/object.h:23
func PDFNewDict(ctx *FzContext, doc *PDFDocument, initialcap int32) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cinitialcap, _ := (C.int)(initialcap), cgoAllocsUnknown
	__ret := C.pdf_new_dict(cctx, cdoc, cinitialcap)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewRect function as declared in pdf/object.h:24
func PDFNewRect(ctx *FzContext, doc *PDFDocument, rect []FzRect) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	crect, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rect)).Data)), cgoAllocsUnknown
	__ret := C.pdf_new_rect(cctx, cdoc, crect)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewMatrix function as declared in pdf/object.h:25
func PDFNewMatrix(ctx *FzContext, doc *PDFDocument, mtx []FzMatrix) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cmtx, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&mtx)).Data)), cgoAllocsUnknown
	__ret := C.pdf_new_matrix(cctx, cdoc, cmtx)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFCopyArray function as declared in pdf/object.h:26
func PDFCopyArray(ctx *FzContext, array *PDFObj) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carray, _ := (*C.pdf_obj)(unsafe.Pointer(array)), cgoAllocsUnknown
	__ret := C.pdf_copy_array(cctx, carray)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFCopyDict function as declared in pdf/object.h:27
func PDFCopyDict(ctx *FzContext, dict *PDFObj) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer(dict)), cgoAllocsUnknown
	__ret := C.pdf_copy_dict(cctx, cdict)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDeepCopyObj function as declared in pdf/object.h:28
func PDFDeepCopyObj(ctx *FzContext, obj *PDFObj) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_deep_copy_obj(cctx, cobj)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewObjFromStr function as declared in pdf/object.h:30
func PDFNewObjFromStr(ctx *FzContext, doc *PDFDocument, src string) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	src = safeString(src)
	csrc, _ := unpackPCharString(src)
	__ret := C.pdf_new_obj_from_str(cctx, cdoc, csrc)
	runtime.KeepAlive(src)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFKeepObj function as declared in pdf/object.h:32
func PDFKeepObj(ctx *FzContext, obj *PDFObj) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_keep_obj(cctx, cobj)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDropObj function as declared in pdf/object.h:33
func PDFDropObj(ctx *FzContext, obj *PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	C.pdf_drop_obj(cctx, cobj)
}

// PDFIsNull function as declared in pdf/object.h:36
func PDFIsNull(ctx *FzContext, obj *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_is_null(cctx, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFIsBool function as declared in pdf/object.h:37
func PDFIsBool(ctx *FzContext, obj *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_is_bool(cctx, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFIsInt function as declared in pdf/object.h:38
func PDFIsInt(ctx *FzContext, obj *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_is_int(cctx, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFIsReal function as declared in pdf/object.h:39
func PDFIsReal(ctx *FzContext, obj *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_is_real(cctx, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFIsNumber function as declared in pdf/object.h:40
func PDFIsNumber(ctx *FzContext, obj *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_is_number(cctx, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFIsName function as declared in pdf/object.h:41
func PDFIsName(ctx *FzContext, obj *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_is_name(cctx, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFIsString function as declared in pdf/object.h:42
func PDFIsString(ctx *FzContext, obj *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_is_string(cctx, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFIsArray function as declared in pdf/object.h:43
func PDFIsArray(ctx *FzContext, obj *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_is_array(cctx, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFIsDict function as declared in pdf/object.h:44
func PDFIsDict(ctx *FzContext, obj *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_is_dict(cctx, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFIsIndirect function as declared in pdf/object.h:45
func PDFIsIndirect(ctx *FzContext, obj *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_is_indirect(cctx, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFObjNumIsStream function as declared in pdf/object.h:46
func PDFObjNumIsStream(ctx *FzContext, doc *PDFDocument, num int32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	__ret := C.pdf_obj_num_is_stream(cctx, cdoc, cnum)
	__v := (int32)(__ret)
	return __v
}

// PDFIsStream function as declared in pdf/object.h:47
func PDFIsStream(ctx *FzContext, obj *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_is_stream(cctx, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFObjcmp function as declared in pdf/object.h:49
func PDFObjcmp(ctx *FzContext, a *PDFObj, b []PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ca, _ := (*C.pdf_obj)(unsafe.Pointer(a)), cgoAllocsUnknown
	cb, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&b)).Data)), cgoAllocsUnknown
	__ret := C.pdf_objcmp(cctx, ca, cb)
	__v := (int32)(__ret)
	return __v
}

// PDFObjcmpResolve function as declared in pdf/object.h:50
func PDFObjcmpResolve(ctx *FzContext, a *PDFObj, b []PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ca, _ := (*C.pdf_obj)(unsafe.Pointer(a)), cgoAllocsUnknown
	cb, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&b)).Data)), cgoAllocsUnknown
	__ret := C.pdf_objcmp_resolve(cctx, ca, cb)
	__v := (int32)(__ret)
	return __v
}

// PDFNameEq function as declared in pdf/object.h:52
func PDFNameEq(ctx *FzContext, a *PDFObj, b []PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ca, _ := (*C.pdf_obj)(unsafe.Pointer(a)), cgoAllocsUnknown
	cb, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&b)).Data)), cgoAllocsUnknown
	__ret := C.pdf_name_eq(cctx, ca, cb)
	__v := (int32)(__ret)
	return __v
}

// PDFObjMarked function as declared in pdf/object.h:62
func PDFObjMarked(ctx *FzContext, obj *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_obj_marked(cctx, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFMarkObj function as declared in pdf/object.h:63
func PDFMarkObj(ctx *FzContext, obj *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_mark_obj(cctx, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFUnmarkObj function as declared in pdf/object.h:64
func PDFUnmarkObj(ctx *FzContext, obj *PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	C.pdf_unmark_obj(cctx, cobj)
}

// PDFSetObjMemo function as declared in pdf/object.h:76
func PDFSetObjMemo(ctx *FzContext, obj *PDFObj, bit int32, memo int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	cbit, _ := (C.int)(bit), cgoAllocsUnknown
	cmemo, _ := (C.int)(memo), cgoAllocsUnknown
	C.pdf_set_obj_memo(cctx, cobj, cbit, cmemo)
}

// PDFObjMemo function as declared in pdf/object.h:77
func PDFObjMemo(ctx *FzContext, obj *PDFObj, bit int32, memo []int32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	cbit, _ := (C.int)(bit), cgoAllocsUnknown
	cmemo, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&memo)).Data)), cgoAllocsUnknown
	__ret := C.pdf_obj_memo(cctx, cobj, cbit, cmemo)
	__v := (int32)(__ret)
	return __v
}

// PDFObjIsDirty function as declared in pdf/object.h:80
func PDFObjIsDirty(ctx *FzContext, obj *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_obj_is_dirty(cctx, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFDirtyObj function as declared in pdf/object.h:81
func PDFDirtyObj(ctx *FzContext, obj *PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	C.pdf_dirty_obj(cctx, cobj)
}

// PDFCleanObj function as declared in pdf/object.h:82
func PDFCleanObj(ctx *FzContext, obj *PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	C.pdf_clean_obj(cctx, cobj)
}

// PDFToBool function as declared in pdf/object.h:85
func PDFToBool(ctx *FzContext, obj *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_to_bool(cctx, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFToInt function as declared in pdf/object.h:86
func PDFToInt(ctx *FzContext, obj *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_to_int(cctx, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFToInt64 function as declared in pdf/object.h:87
func PDFToInt64(ctx *FzContext, obj *PDFObj) int {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_to_int64(cctx, cobj)
	__v := (int)(__ret)
	return __v
}

// PDFToReal function as declared in pdf/object.h:88
func PDFToReal(ctx *FzContext, obj *PDFObj) float32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_to_real(cctx, cobj)
	__v := (float32)(__ret)
	return __v
}

// PDFToName function as declared in pdf/object.h:89
func PDFToName(ctx *FzContext, obj *PDFObj) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_to_name(cctx, cobj)
	__v := packPCharString(__ret)
	return __v
}

// PDFToStrBuf function as declared in pdf/object.h:90
func PDFToStrBuf(ctx *FzContext, obj *PDFObj) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_to_str_buf(cctx, cobj)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// PDFToStrLen function as declared in pdf/object.h:91
func PDFToStrLen(ctx *FzContext, obj *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_to_str_len(cctx, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFToNum function as declared in pdf/object.h:92
func PDFToNum(ctx *FzContext, obj *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_to_num(cctx, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFToGen function as declared in pdf/object.h:93
func PDFToGen(ctx *FzContext, obj *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_to_gen(cctx, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFArrayLen function as declared in pdf/object.h:95
func PDFArrayLen(ctx *FzContext, array *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carray, _ := (*C.pdf_obj)(unsafe.Pointer(array)), cgoAllocsUnknown
	__ret := C.pdf_array_len(cctx, carray)
	__v := (int32)(__ret)
	return __v
}

// PDFArrayGet function as declared in pdf/object.h:96
func PDFArrayGet(ctx *FzContext, array *PDFObj, i int32) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carray, _ := (*C.pdf_obj)(unsafe.Pointer(array)), cgoAllocsUnknown
	ci, _ := (C.int)(i), cgoAllocsUnknown
	__ret := C.pdf_array_get(cctx, carray, ci)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFArrayPut function as declared in pdf/object.h:97
func PDFArrayPut(ctx *FzContext, array *PDFObj, i int32, obj []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carray, _ := (*C.pdf_obj)(unsafe.Pointer(array)), cgoAllocsUnknown
	ci, _ := (C.int)(i), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	C.pdf_array_put(cctx, carray, ci, cobj)
}

// PDFArrayPutDrop function as declared in pdf/object.h:98
func PDFArrayPutDrop(ctx *FzContext, array *PDFObj, i int32, obj []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carray, _ := (*C.pdf_obj)(unsafe.Pointer(array)), cgoAllocsUnknown
	ci, _ := (C.int)(i), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	C.pdf_array_put_drop(cctx, carray, ci, cobj)
}

// PDFArrayPush function as declared in pdf/object.h:99
func PDFArrayPush(ctx *FzContext, array *PDFObj, obj []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carray, _ := (*C.pdf_obj)(unsafe.Pointer(array)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	C.pdf_array_push(cctx, carray, cobj)
}

// PDFArrayPushDrop function as declared in pdf/object.h:100
func PDFArrayPushDrop(ctx *FzContext, array *PDFObj, obj []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carray, _ := (*C.pdf_obj)(unsafe.Pointer(array)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	C.pdf_array_push_drop(cctx, carray, cobj)
}

// PDFArrayInsert function as declared in pdf/object.h:101
func PDFArrayInsert(ctx *FzContext, array *PDFObj, obj []PDFObj, index int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carray, _ := (*C.pdf_obj)(unsafe.Pointer(array)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	cindex, _ := (C.int)(index), cgoAllocsUnknown
	C.pdf_array_insert(cctx, carray, cobj, cindex)
}

// PDFArrayInsertDrop function as declared in pdf/object.h:102
func PDFArrayInsertDrop(ctx *FzContext, array *PDFObj, obj []PDFObj, index int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carray, _ := (*C.pdf_obj)(unsafe.Pointer(array)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	cindex, _ := (C.int)(index), cgoAllocsUnknown
	C.pdf_array_insert_drop(cctx, carray, cobj, cindex)
}

// PDFArrayDelete function as declared in pdf/object.h:103
func PDFArrayDelete(ctx *FzContext, array *PDFObj, index int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carray, _ := (*C.pdf_obj)(unsafe.Pointer(array)), cgoAllocsUnknown
	cindex, _ := (C.int)(index), cgoAllocsUnknown
	C.pdf_array_delete(cctx, carray, cindex)
}

// PDFArrayFind function as declared in pdf/object.h:104
func PDFArrayFind(ctx *FzContext, array *PDFObj, obj []PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carray, _ := (*C.pdf_obj)(unsafe.Pointer(array)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	__ret := C.pdf_array_find(cctx, carray, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFArrayContains function as declared in pdf/object.h:105
func PDFArrayContains(ctx *FzContext, array *PDFObj, obj []PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carray, _ := (*C.pdf_obj)(unsafe.Pointer(array)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	__ret := C.pdf_array_contains(cctx, carray, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFDictLen function as declared in pdf/object.h:107
func PDFDictLen(ctx *FzContext, dict *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer(dict)), cgoAllocsUnknown
	__ret := C.pdf_dict_len(cctx, cdict)
	__v := (int32)(__ret)
	return __v
}

// PDFDictGetKey function as declared in pdf/object.h:108
func PDFDictGetKey(ctx *FzContext, dict *PDFObj, idx int32) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer(dict)), cgoAllocsUnknown
	cidx, _ := (C.int)(idx), cgoAllocsUnknown
	__ret := C.pdf_dict_get_key(cctx, cdict, cidx)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDictGetVal function as declared in pdf/object.h:109
func PDFDictGetVal(ctx *FzContext, dict *PDFObj, idx int32) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer(dict)), cgoAllocsUnknown
	cidx, _ := (C.int)(idx), cgoAllocsUnknown
	__ret := C.pdf_dict_get_val(cctx, cdict, cidx)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDictGet function as declared in pdf/object.h:110
func PDFDictGet(ctx *FzContext, dict *PDFObj, key []PDFObj) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer(dict)), cgoAllocsUnknown
	ckey, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&key)).Data)), cgoAllocsUnknown
	__ret := C.pdf_dict_get(cctx, cdict, ckey)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDictGetp function as declared in pdf/object.h:111
func PDFDictGetp(ctx *FzContext, dict *PDFObj, path string) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer(dict)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	__ret := C.pdf_dict_getp(cctx, cdict, cpath)
	runtime.KeepAlive(path)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDictGeta function as declared in pdf/object.h:113
func PDFDictGeta(ctx *FzContext, dict *PDFObj, key []PDFObj, abbrev []PDFObj) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer(dict)), cgoAllocsUnknown
	ckey, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&key)).Data)), cgoAllocsUnknown
	cabbrev, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&abbrev)).Data)), cgoAllocsUnknown
	__ret := C.pdf_dict_geta(cctx, cdict, ckey, cabbrev)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDictGets function as declared in pdf/object.h:114
func PDFDictGets(ctx *FzContext, dict *PDFObj, key string) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer(dict)), cgoAllocsUnknown
	key = safeString(key)
	ckey, _ := unpackPCharString(key)
	__ret := C.pdf_dict_gets(cctx, cdict, ckey)
	runtime.KeepAlive(key)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDictGetsa function as declared in pdf/object.h:115
func PDFDictGetsa(ctx *FzContext, dict *PDFObj, key string, abbrev string) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer(dict)), cgoAllocsUnknown
	key = safeString(key)
	ckey, _ := unpackPCharString(key)
	abbrev = safeString(abbrev)
	cabbrev, _ := unpackPCharString(abbrev)
	__ret := C.pdf_dict_getsa(cctx, cdict, ckey, cabbrev)
	runtime.KeepAlive(abbrev)
	runtime.KeepAlive(key)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDictPut function as declared in pdf/object.h:116
func PDFDictPut(ctx *FzContext, dict *PDFObj, key []PDFObj, val []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer(dict)), cgoAllocsUnknown
	ckey, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&key)).Data)), cgoAllocsUnknown
	cval, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&val)).Data)), cgoAllocsUnknown
	C.pdf_dict_put(cctx, cdict, ckey, cval)
}

// PDFDictPutDrop function as declared in pdf/object.h:117
func PDFDictPutDrop(ctx *FzContext, dict *PDFObj, key []PDFObj, val []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer(dict)), cgoAllocsUnknown
	ckey, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&key)).Data)), cgoAllocsUnknown
	cval, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&val)).Data)), cgoAllocsUnknown
	C.pdf_dict_put_drop(cctx, cdict, ckey, cval)
}

// PDFDictGetPutDrop function as declared in pdf/object.h:118
func PDFDictGetPutDrop(ctx *FzContext, dict *PDFObj, key []PDFObj, val []PDFObj, oldVal [][]PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer(dict)), cgoAllocsUnknown
	ckey, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&key)).Data)), cgoAllocsUnknown
	cval, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&val)).Data)), cgoAllocsUnknown
	coldVal, _ := unpackArgSSPDFObj(oldVal)
	C.pdf_dict_get_put_drop(cctx, cdict, ckey, cval, coldVal)
	packSSPDFObj(oldVal, coldVal)
}

// PDFDictPuts function as declared in pdf/object.h:119
func PDFDictPuts(ctx *FzContext, dict *PDFObj, key string, val []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer(dict)), cgoAllocsUnknown
	key = safeString(key)
	ckey, _ := unpackPCharString(key)
	cval, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&val)).Data)), cgoAllocsUnknown
	C.pdf_dict_puts(cctx, cdict, ckey, cval)
	runtime.KeepAlive(key)
}

// PDFDictPutsDrop function as declared in pdf/object.h:120
func PDFDictPutsDrop(ctx *FzContext, dict *PDFObj, key string, val []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer(dict)), cgoAllocsUnknown
	key = safeString(key)
	ckey, _ := unpackPCharString(key)
	cval, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&val)).Data)), cgoAllocsUnknown
	C.pdf_dict_puts_drop(cctx, cdict, ckey, cval)
	runtime.KeepAlive(key)
}

// PDFDictPutp function as declared in pdf/object.h:121
func PDFDictPutp(ctx *FzContext, dict *PDFObj, path string, val []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer(dict)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	cval, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&val)).Data)), cgoAllocsUnknown
	C.pdf_dict_putp(cctx, cdict, cpath, cval)
	runtime.KeepAlive(path)
}

// PDFDictPutpDrop function as declared in pdf/object.h:122
func PDFDictPutpDrop(ctx *FzContext, dict *PDFObj, path string, val []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer(dict)), cgoAllocsUnknown
	path = safeString(path)
	cpath, _ := unpackPCharString(path)
	cval, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&val)).Data)), cgoAllocsUnknown
	C.pdf_dict_putp_drop(cctx, cdict, cpath, cval)
	runtime.KeepAlive(path)
}

// PDFDictDel function as declared in pdf/object.h:125
func PDFDictDel(ctx *FzContext, dict *PDFObj, key []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer(dict)), cgoAllocsUnknown
	ckey, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&key)).Data)), cgoAllocsUnknown
	C.pdf_dict_del(cctx, cdict, ckey)
}

// PDFDictDels function as declared in pdf/object.h:126
func PDFDictDels(ctx *FzContext, dict *PDFObj, key string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer(dict)), cgoAllocsUnknown
	key = safeString(key)
	ckey, _ := unpackPCharString(key)
	C.pdf_dict_dels(cctx, cdict, ckey)
	runtime.KeepAlive(key)
}

// PDFSortDict function as declared in pdf/object.h:127
func PDFSortDict(ctx *FzContext, dict *PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer(dict)), cgoAllocsUnknown
	C.pdf_sort_dict(cctx, cdict)
}

// PDFSetObjParent function as declared in pdf/object.h:135
func PDFSetObjParent(ctx *FzContext, obj *PDFObj, num int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	C.pdf_set_obj_parent(cctx, cobj, cnum)
}

// PDFObjRefs function as declared in pdf/object.h:137
func PDFObjRefs(ctx *FzContext, ref *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cref, _ := (*C.pdf_obj)(unsafe.Pointer(ref)), cgoAllocsUnknown
	__ret := C.pdf_obj_refs(cctx, cref)
	__v := (int32)(__ret)
	return __v
}

// PDFObjParentNum function as declared in pdf/object.h:139
func PDFObjParentNum(ctx *FzContext, obj *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_obj_parent_num(cctx, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFSprintObj function as declared in pdf/object.h:141
func PDFSprintObj(ctx *FzContext, s *byte, n int32, obj []PDFObj, tight int32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cs, _ := (*C.char)(unsafe.Pointer(s)), cgoAllocsUnknown
	cn, _ := (C.int)(n), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	ctight, _ := (C.int)(tight), cgoAllocsUnknown
	__ret := C.pdf_sprint_obj(cctx, cs, cn, cobj, ctight)
	__v := (int32)(__ret)
	return __v
}

// PDFPrintObj function as declared in pdf/object.h:142
func PDFPrintObj(ctx *FzContext, out *FzOutput, obj []PDFObj, tight int32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	ctight, _ := (C.int)(tight), cgoAllocsUnknown
	__ret := C.pdf_print_obj(cctx, cout, cobj, ctight)
	__v := (int32)(__ret)
	return __v
}

// PDFToUtf8 function as declared in pdf/object.h:144
func PDFToUtf8(ctx *FzContext, src *PDFObj) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csrc, _ := (*C.pdf_obj)(unsafe.Pointer(src)), cgoAllocsUnknown
	__ret := C.pdf_to_utf8(cctx, csrc)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadStreamAsUtf8 function as declared in pdf/object.h:145
func PDFLoadStreamAsUtf8(ctx *FzContext, src *PDFObj) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csrc, _ := (*C.pdf_obj)(unsafe.Pointer(src)), cgoAllocsUnknown
	__ret := C.pdf_load_stream_as_utf8(cctx, csrc)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadStreamOrStringAsUtf8 function as declared in pdf/object.h:146
func PDFLoadStreamOrStringAsUtf8(ctx *FzContext, src *PDFObj) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csrc, _ := (*C.pdf_obj)(unsafe.Pointer(src)), cgoAllocsUnknown
	__ret := C.pdf_load_stream_or_string_as_utf8(cctx, csrc)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// PDFToUcs2 function as declared in pdf/object.h:147
func PDFToUcs2(ctx *FzContext, src *PDFObj) *uint16 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csrc, _ := (*C.pdf_obj)(unsafe.Pointer(src)), cgoAllocsUnknown
	__ret := C.pdf_to_ucs2(cctx, csrc)
	__v := *(**uint16)(unsafe.Pointer(&__ret))
	return __v
}

// PDFToUtf8Name function as declared in pdf/object.h:148
func PDFToUtf8Name(ctx *FzContext, doc *PDFDocument, src []PDFObj) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	csrc, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&src)).Data)), cgoAllocsUnknown
	__ret := C.pdf_to_utf8_name(cctx, cdoc, csrc)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFFromUcs2 function as declared in pdf/object.h:149
func PDFFromUcs2(ctx *FzContext, str *uint16) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstr, _ := (*C.ushort)(unsafe.Pointer(str)), cgoAllocsUnknown
	__ret := C.pdf_from_ucs2(cctx, cstr)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// PDFToUcs2Buf function as declared in pdf/object.h:150
func PDFToUcs2Buf(ctx *FzContext, buffer *uint16, src []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuffer, _ := (*C.ushort)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	csrc, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&src)).Data)), cgoAllocsUnknown
	C.pdf_to_ucs2_buf(cctx, cbuffer, csrc)
}

// PDFToRect function as declared in pdf/object.h:152
func PDFToRect(ctx *FzContext, array *PDFObj, rect []FzRect) *FzRect {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carray, _ := (*C.pdf_obj)(unsafe.Pointer(array)), cgoAllocsUnknown
	crect, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rect)).Data)), cgoAllocsUnknown
	__ret := C.pdf_to_rect(cctx, carray, crect)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

// PDFToMatrix function as declared in pdf/object.h:153
func PDFToMatrix(ctx *FzContext, array *PDFObj, mat []FzMatrix) *FzMatrix {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carray, _ := (*C.pdf_obj)(unsafe.Pointer(array)), cgoAllocsUnknown
	cmat, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&mat)).Data)), cgoAllocsUnknown
	__ret := C.pdf_to_matrix(cctx, carray, cmat)
	__v := *(**FzMatrix)(unsafe.Pointer(&__ret))
	return __v
}

// PDFGetIndirectDocument function as declared in pdf/object.h:155
func PDFGetIndirectDocument(ctx *FzContext, obj *PDFObj) *PDFDocument {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_get_indirect_document(cctx, cobj)
	__v := *(**PDFDocument)(unsafe.Pointer(&__ret))
	return __v
}

// PDFGetBoundDocument function as declared in pdf/object.h:156
func PDFGetBoundDocument(ctx *FzContext, obj *PDFObj) *PDFDocument {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_get_bound_document(cctx, cobj)
	__v := *(**PDFDocument)(unsafe.Pointer(&__ret))
	return __v
}

// PDFSetStrLen function as declared in pdf/object.h:157
func PDFSetStrLen(ctx *FzContext, obj *PDFObj, newlen int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	cnewlen, _ := (C.int)(newlen), cgoAllocsUnknown
	C.pdf_set_str_len(cctx, cobj, cnewlen)
}

// PDFSetInt function as declared in pdf/object.h:158
func PDFSetInt(ctx *FzContext, obj *PDFObj, i int) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	ci, _ := (C.int64_t)(i), cgoAllocsUnknown
	C.pdf_set_int(cctx, cobj, ci)
}

// PDFOpenDocument function as declared in pdf/document.h:75
func PDFOpenDocument(ctx *FzContext, filename string) *PDFDocument {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	__ret := C.pdf_open_document(cctx, cfilename)
	runtime.KeepAlive(filename)
	__v := *(**PDFDocument)(unsafe.Pointer(&__ret))
	return __v
}

// PDFOpenDocumentWithStream function as declared in pdf/document.h:86
func PDFOpenDocumentWithStream(ctx *FzContext, file *FzStream) *PDFDocument {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfile, _ := (*C.fz_stream)(unsafe.Pointer(file)), cgoAllocsUnknown
	__ret := C.pdf_open_document_with_stream(cctx, cfile)
	__v := *(**PDFDocument)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDropDocument function as declared in pdf/document.h:94
func PDFDropDocument(ctx *FzContext, doc *PDFDocument) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	C.pdf_drop_document(cctx, cdoc)
}

// PDFKeepDocument function as declared in pdf/document.h:99
func PDFKeepDocument(ctx *FzContext, doc *PDFDocument) *PDFDocument {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_keep_document(cctx, cdoc)
	__v := *(**PDFDocument)(unsafe.Pointer(&__ret))
	return __v
}

// PDFSpecifics function as declared in pdf/document.h:105
func PDFSpecifics(ctx *FzContext, doc *FzDocument) *PDFDocument {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.fz_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_specifics(cctx, cdoc)
	__v := *(**PDFDocument)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDocumentFromFzDocument function as declared in pdf/document.h:114
func PDFDocumentFromFzDocument(ctx *FzContext, ptr *FzDocument) *PDFDocument {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cptr, _ := (*C.fz_document)(unsafe.Pointer(ptr)), cgoAllocsUnknown
	__ret := C.pdf_document_from_fz_document(cctx, cptr)
	__v := *(**PDFDocument)(unsafe.Pointer(&__ret))
	return __v
}

// PDFPageFromFzPage function as declared in pdf/document.h:115
func PDFPageFromFzPage(ctx *FzContext, ptr *FzPage) *PDFPage {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cptr, _ := (*C.fz_page)(unsafe.Pointer(ptr)), cgoAllocsUnknown
	__ret := C.pdf_page_from_fz_page(cctx, cptr)
	__v := *(**PDFPage)(unsafe.Pointer(&__ret))
	return __v
}

// PDFAnnotFromFzAnnot function as declared in pdf/document.h:116
func PDFAnnotFromFzAnnot(ctx *FzContext, ptr *FzAnnot) *PDFAnnot {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cptr, _ := (*C.fz_annot)(unsafe.Pointer(ptr)), cgoAllocsUnknown
	__ret := C.pdf_annot_from_fz_annot(cctx, cptr)
	__v := *(**PDFAnnot)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNeedsPassword function as declared in pdf/document.h:118
func PDFNeedsPassword(ctx *FzContext, doc *PDFDocument) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_needs_password(cctx, cdoc)
	__v := (int32)(__ret)
	return __v
}

// PDFAuthenticatePassword function as declared in pdf/document.h:131
func PDFAuthenticatePassword(ctx *FzContext, doc *PDFDocument, pw string) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	pw = safeString(pw)
	cpw, _ := unpackPCharString(pw)
	__ret := C.pdf_authenticate_password(cctx, cdoc, cpw)
	runtime.KeepAlive(pw)
	__v := (int32)(__ret)
	return __v
}

// PDFHasPermission function as declared in pdf/document.h:133
func PDFHasPermission(ctx *FzContext, doc *PDFDocument, p FzPermission) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cp, _ := (C.fz_permission)(p), cgoAllocsUnknown
	__ret := C.pdf_has_permission(cctx, cdoc, cp)
	__v := (int32)(__ret)
	return __v
}

// PDFLookupMetadata function as declared in pdf/document.h:134
func PDFLookupMetadata(ctx *FzContext, doc *PDFDocument, key string, ptr []byte, size int32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	key = safeString(key)
	ckey, _ := unpackPCharString(key)
	cptr, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ptr)).Data)), cgoAllocsUnknown
	csize, _ := (C.int)(size), cgoAllocsUnknown
	__ret := C.pdf_lookup_metadata(cctx, cdoc, ckey, cptr, csize)
	runtime.KeepAlive(key)
	__v := (int32)(__ret)
	return __v
}

// PDFLoadOutline function as declared in pdf/document.h:136
func PDFLoadOutline(ctx *FzContext, doc *PDFDocument) *FzOutline {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_load_outline(cctx, cdoc)
	__v := *(**FzOutline)(unsafe.Pointer(&__ret))
	return __v
}

// PDFCountLayerConfigs function as declared in pdf/document.h:144
func PDFCountLayerConfigs(ctx *FzContext, doc *PDFDocument) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_count_layer_configs(cctx, cdoc)
	__v := (int32)(__ret)
	return __v
}

// PDFLayerConfigInfo function as declared in pdf/document.h:165
func PDFLayerConfigInfo(ctx *FzContext, doc *PDFDocument, configNum int32, info []PDFLayerConfig) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cconfigNum, _ := (C.int)(configNum), cgoAllocsUnknown
	cinfo, _ := (*C.pdf_layer_config)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&info)).Data)), cgoAllocsUnknown
	C.pdf_layer_config_info(cctx, cdoc, cconfigNum, cinfo)
}

// PDFSelectLayerConfig function as declared in pdf/document.h:177
func PDFSelectLayerConfig(ctx *FzContext, doc *PDFDocument, configNum int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cconfigNum, _ := (C.int)(configNum), cgoAllocsUnknown
	C.pdf_select_layer_config(cctx, cdoc, cconfigNum)
}

// PDFCountLayerConfigUi function as declared in pdf/document.h:185
func PDFCountLayerConfigUi(ctx *FzContext, doc *PDFDocument) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_count_layer_config_ui(cctx, cdoc)
	__v := (int32)(__ret)
	return __v
}

// PDFSelectLayerConfigUi function as declared in pdf/document.h:199
func PDFSelectLayerConfigUi(ctx *FzContext, doc *PDFDocument, ui int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cui, _ := (C.int)(ui), cgoAllocsUnknown
	C.pdf_select_layer_config_ui(cctx, cdoc, cui)
}

// PDFDeselectLayerConfigUi function as declared in pdf/document.h:210
func PDFDeselectLayerConfigUi(ctx *FzContext, doc *PDFDocument, ui int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cui, _ := (C.int)(ui), cgoAllocsUnknown
	C.pdf_deselect_layer_config_ui(cctx, cdoc, cui)
}

// PDFToggleLayerConfigUi function as declared in pdf/document.h:224
func PDFToggleLayerConfigUi(ctx *FzContext, doc *PDFDocument, ui int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cui, _ := (C.int)(ui), cgoAllocsUnknown
	C.pdf_toggle_layer_config_ui(cctx, cdoc, cui)
}

// PDFLayerConfigUiInfo function as declared in pdf/document.h:254
func PDFLayerConfigUiInfo(ctx *FzContext, doc *PDFDocument, ui int32, info []PDFLayerConfigUi) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cui, _ := (C.int)(ui), cgoAllocsUnknown
	cinfo, _ := (*C.pdf_layer_config_ui)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&info)).Data)), cgoAllocsUnknown
	C.pdf_layer_config_ui_info(cctx, cdoc, cui, cinfo)
}

// PDFSetLayerConfigAsDefault function as declared in pdf/document.h:260
func PDFSetLayerConfigAsDefault(ctx *FzContext, doc *PDFDocument) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	C.pdf_set_layer_config_as_default(cctx, cdoc)
}

// PDFCountPortfolioSchema function as declared in pdf/document.h:284
func PDFCountPortfolioSchema(ctx *FzContext, doc *PDFDocument) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_count_portfolio_schema(cctx, cdoc)
	__v := (int32)(__ret)
	return __v
}

// PDFPortfolioSchemaInfo function as declared in pdf/document.h:320
func PDFPortfolioSchemaInfo(ctx *FzContext, doc *PDFDocument, entry int32, info []PDFPortfolioSchema) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	centry, _ := (C.int)(entry), cgoAllocsUnknown
	cinfo, _ := (*C.pdf_portfolio_schema)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&info)).Data)), cgoAllocsUnknown
	C.pdf_portfolio_schema_info(cctx, cdoc, centry, cinfo)
}

// PDFReorderPortfolioSchema function as declared in pdf/document.h:335
func PDFReorderPortfolioSchema(ctx *FzContext, doc *PDFDocument, entry int32, newPos int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	centry, _ := (C.int)(entry), cgoAllocsUnknown
	cnewPos, _ := (C.int)(newPos), cgoAllocsUnknown
	C.pdf_reorder_portfolio_schema(cctx, cdoc, centry, cnewPos)
}

// PDFRenamePortfolioSchema function as declared in pdf/document.h:349
func PDFRenamePortfolioSchema(ctx *FzContext, doc *PDFDocument, entry int32, name string, nameLen int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	centry, _ := (C.int)(entry), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	cnameLen, _ := (C.int)(nameLen), cgoAllocsUnknown
	C.pdf_rename_portfolio_schema(cctx, cdoc, centry, cname, cnameLen)
	runtime.KeepAlive(name)
}

// PDFDeletePortfolioSchema function as declared in pdf/document.h:359
func PDFDeletePortfolioSchema(ctx *FzContext, doc *PDFDocument, entry int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	centry, _ := (C.int)(entry), cgoAllocsUnknown
	C.pdf_delete_portfolio_schema(cctx, cdoc, centry)
}

// PDFAddPortfolioSchema function as declared in pdf/document.h:372
func PDFAddPortfolioSchema(ctx *FzContext, doc *PDFDocument, entry int32, info []PDFPortfolioSchema) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	centry, _ := (C.int)(entry), cgoAllocsUnknown
	cinfo, _ := (*C.pdf_portfolio_schema)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&info)).Data)), cgoAllocsUnknown
	C.pdf_add_portfolio_schema(cctx, cdoc, centry, cinfo)
}

// PDFCountPortfolioEntries function as declared in pdf/document.h:380
func PDFCountPortfolioEntries(ctx *FzContext, doc *PDFDocument) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_count_portfolio_entries(cctx, cdoc)
	__v := (int32)(__ret)
	return __v
}

// PDFPortfolioEntry function as declared in pdf/document.h:394
func PDFPortfolioEntry(ctx *FzContext, doc *PDFDocument, entry int32) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	centry, _ := (C.int)(entry), cgoAllocsUnknown
	__ret := C.pdf_portfolio_entry(cctx, cdoc, centry)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// PDFPortfolioEntryObjName function as declared in pdf/document.h:413
func PDFPortfolioEntryObjName(ctx *FzContext, doc *PDFDocument, entry int32, name [][]PDFObj) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	centry, _ := (C.int)(entry), cgoAllocsUnknown
	cname, _ := unpackArgSSPDFObj(name)
	__ret := C.pdf_portfolio_entry_obj_name(cctx, cdoc, centry, cname)
	packSSPDFObj(name, cname)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFPortfolioEntryObj function as declared in pdf/document.h:428
func PDFPortfolioEntryObj(ctx *FzContext, doc *PDFDocument, entry int32) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	centry, _ := (C.int)(entry), cgoAllocsUnknown
	__ret := C.pdf_portfolio_entry_obj(cctx, cdoc, centry)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFPortfolioEntryName function as declared in pdf/document.h:447
func PDFPortfolioEntryName(ctx *FzContext, doc *PDFDocument, entry int32) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	centry, _ := (C.int)(entry), cgoAllocsUnknown
	__ret := C.pdf_portfolio_entry_name(cctx, cdoc, centry)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFPortfolioEntryInfo function as declared in pdf/document.h:462
func PDFPortfolioEntryInfo(ctx *FzContext, doc *PDFDocument, entry int32, schemaEntry int32) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	centry, _ := (C.int)(entry), cgoAllocsUnknown
	cschemaEntry, _ := (C.int)(schemaEntry), cgoAllocsUnknown
	__ret := C.pdf_portfolio_entry_info(cctx, cdoc, centry, cschemaEntry)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFAddPortfolioEntry function as declared in pdf/document.h:493
func PDFAddPortfolioEntry(ctx *FzContext, doc *PDFDocument, name string, nameLen int32, desc string, descLen int32, filename string, filenameLen int32, unifile string, unifileLen int32, buf []FzBuffer) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	cnameLen, _ := (C.int)(nameLen), cgoAllocsUnknown
	desc = safeString(desc)
	cdesc, _ := unpackPCharString(desc)
	cdescLen, _ := (C.int)(descLen), cgoAllocsUnknown
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	cfilenameLen, _ := (C.int)(filenameLen), cgoAllocsUnknown
	unifile = safeString(unifile)
	cunifile, _ := unpackPCharString(unifile)
	cunifileLen, _ := (C.int)(unifileLen), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buf)).Data)), cgoAllocsUnknown
	__ret := C.pdf_add_portfolio_entry(cctx, cdoc, cname, cnameLen, cdesc, cdescLen, cfilename, cfilenameLen, cunifile, cunifileLen, cbuf)
	runtime.KeepAlive(unifile)
	runtime.KeepAlive(filename)
	runtime.KeepAlive(desc)
	runtime.KeepAlive(name)
	__v := (int32)(__ret)
	return __v
}

// PDFSetPortfolioEntryInfo function as declared in pdf/document.h:515
func PDFSetPortfolioEntryInfo(ctx *FzContext, doc *PDFDocument, entry int32, schemaEntry int32, data []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	centry, _ := (C.int)(entry), cgoAllocsUnknown
	cschemaEntry, _ := (C.int)(schemaEntry), cgoAllocsUnknown
	cdata, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&data)).Data)), cgoAllocsUnknown
	C.pdf_set_portfolio_entry_info(cctx, cdoc, centry, cschemaEntry, cdata)
}

// PDFUpdatePage function as declared in pdf/document.h:531
func PDFUpdatePage(ctx *FzContext, page *PDFPage) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	C.pdf_update_page(cctx, cpage)
}

// PDFHasUnsavedChanges function as declared in pdf/document.h:537
func PDFHasUnsavedChanges(ctx *FzContext, doc *PDFDocument) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_has_unsaved_changes(cctx, cdoc)
	__v := (int32)(__ret)
	return __v
}

// PDFCreateDocument function as declared in pdf/document.h:678
func PDFCreateDocument(ctx *FzContext) *PDFDocument {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.pdf_create_document(cctx)
	__v := *(**PDFDocument)(unsafe.Pointer(&__ret))
	return __v
}

// PDFGraftObject function as declared in pdf/document.h:696
func PDFGraftObject(ctx *FzContext, dst *PDFDocument, obj []PDFObj) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdst, _ := (*C.pdf_document)(unsafe.Pointer(dst)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	__ret := C.pdf_graft_object(cctx, cdst, cobj)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewGraftMap function as declared in pdf/document.h:707
func PDFNewGraftMap(ctx *FzContext, dst *PDFDocument) *PDFGraftMap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdst, _ := (*C.pdf_document)(unsafe.Pointer(dst)), cgoAllocsUnknown
	__ret := C.pdf_new_graft_map(cctx, cdst)
	__v := *(**PDFGraftMap)(unsafe.Pointer(&__ret))
	return __v
}

// PDFKeepGraftMap function as declared in pdf/document.h:712
func PDFKeepGraftMap(ctx *FzContext, _map *PDFGraftMap) *PDFGraftMap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	c_map, _ := (*C.pdf_graft_map)(unsafe.Pointer(_map)), cgoAllocsUnknown
	__ret := C.pdf_keep_graft_map(cctx, c_map)
	__v := *(**PDFGraftMap)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDropGraftMap function as declared in pdf/document.h:717
func PDFDropGraftMap(ctx *FzContext, _map *PDFGraftMap) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	c_map, _ := (*C.pdf_graft_map)(unsafe.Pointer(_map)), cgoAllocsUnknown
	C.pdf_drop_graft_map(cctx, c_map)
}

// PDFGraftMappedObject function as declared in pdf/document.h:732
func PDFGraftMappedObject(ctx *FzContext, _map *PDFGraftMap, obj []PDFObj) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	c_map, _ := (*C.pdf_graft_map)(unsafe.Pointer(_map)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	__ret := C.pdf_graft_mapped_object(cctx, c_map, cobj)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFPageWrite function as declared in pdf/document.h:751
func PDFPageWrite(ctx *FzContext, doc *PDFDocument, mediabox []FzRect, presources [][]PDFObj, pcontents [][]FzBuffer) *FzDevice {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cmediabox, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&mediabox)).Data)), cgoAllocsUnknown
	cpresources, _ := unpackArgSSPDFObj(presources)
	cpcontents, _ := unpackArgSSFzBuffer(pcontents)
	__ret := C.pdf_page_write(cctx, cdoc, cmediabox, cpresources, cpcontents)
	packSSFzBuffer(pcontents, cpcontents)
	packSSPDFObj(presources, cpresources)
	__v := *(**FzDevice)(unsafe.Pointer(&__ret))
	return __v
}

// PDFAddPage function as declared in pdf/document.h:777
func PDFAddPage(ctx *FzContext, doc *PDFDocument, mediabox []FzRect, rotate int32, resources []PDFObj, contents []FzBuffer) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cmediabox, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&mediabox)).Data)), cgoAllocsUnknown
	crotate, _ := (C.int)(rotate), cgoAllocsUnknown
	cresources, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&resources)).Data)), cgoAllocsUnknown
	ccontents, _ := (*C.fz_buffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&contents)).Data)), cgoAllocsUnknown
	__ret := C.pdf_add_page(cctx, cdoc, cmediabox, crotate, cresources, ccontents)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFInsertPage function as declared in pdf/document.h:791
func PDFInsertPage(ctx *FzContext, doc *PDFDocument, at int32, page []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cat, _ := (C.int)(at), cgoAllocsUnknown
	cpage, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&page)).Data)), cgoAllocsUnknown
	C.pdf_insert_page(cctx, cdoc, cat, cpage)
}

// PDFDeletePage function as declared in pdf/document.h:802
func PDFDeletePage(ctx *FzContext, doc *PDFDocument, number int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnumber, _ := (C.int)(number), cgoAllocsUnknown
	C.pdf_delete_page(cctx, cdoc, cnumber)
}

// PDFDeletePageRange function as declared in pdf/document.h:816
func PDFDeletePageRange(ctx *FzContext, doc *PDFDocument, start int32, end int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cstart, _ := (C.int)(start), cgoAllocsUnknown
	cend, _ := (C.int)(end), cgoAllocsUnknown
	C.pdf_delete_page_range(cctx, cdoc, cstart, cend)
}

// PDFFinishEdit function as declared in pdf/document.h:825
func PDFFinishEdit(ctx *FzContext, doc *PDFDocument) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	C.pdf_finish_edit(cctx, cdoc)
}

// PDFParseWriteOptions function as declared in pdf/document.h:862
func PDFParseWriteOptions(ctx *FzContext, opts *PDFWriteOptions, args string) *PDFWriteOptions {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	copts, _ := (*C.pdf_write_options)(unsafe.Pointer(opts)), cgoAllocsUnknown
	args = safeString(args)
	cargs, _ := unpackPCharString(args)
	__ret := C.pdf_parse_write_options(cctx, copts, cargs)
	runtime.KeepAlive(args)
	__v := *(**PDFWriteOptions)(unsafe.Pointer(&__ret))
	return __v
}

// PDFHasUnsavedSigs function as declared in pdf/document.h:868
func PDFHasUnsavedSigs(ctx *FzContext, doc *PDFDocument) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_has_unsaved_sigs(cctx, cdoc)
	__v := (int32)(__ret)
	return __v
}

// PDFWriteDocument function as declared in pdf/document.h:875
func PDFWriteDocument(ctx *FzContext, doc *PDFDocument, out []FzOutput, opts []PDFWriteOptions) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&out)).Data)), cgoAllocsUnknown
	copts, _ := (*C.pdf_write_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&opts)).Data)), cgoAllocsUnknown
	C.pdf_write_document(cctx, cdoc, cout, copts)
}

// PDFSaveDocument function as declared in pdf/document.h:880
func PDFSaveDocument(ctx *FzContext, doc *PDFDocument, filename string, opts []PDFWriteOptions) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	copts, _ := (*C.pdf_write_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&opts)).Data)), cgoAllocsUnknown
	C.pdf_save_document(cctx, cdoc, cfilename, copts)
	runtime.KeepAlive(filename)
}

// PDFCanBeSavedIncrementally function as declared in pdf/document.h:886
func PDFCanBeSavedIncrementally(ctx *FzContext, doc *PDFDocument) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_can_be_saved_incrementally(cctx, cdoc)
	__v := (int32)(__ret)
	return __v
}

// PDFLexbufInit function as declared in pdf/parse.h:22
func PDFLexbufInit(ctx *FzContext, lexbuf *PDFLexbuf, size int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	clexbuf, _ := (*C.pdf_lexbuf)(unsafe.Pointer(lexbuf)), cgoAllocsUnknown
	csize, _ := (C.int)(size), cgoAllocsUnknown
	C.pdf_lexbuf_init(cctx, clexbuf, csize)
}

// PDFLexbufFin function as declared in pdf/parse.h:23
func PDFLexbufFin(ctx *FzContext, lexbuf *PDFLexbuf) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	clexbuf, _ := (*C.pdf_lexbuf)(unsafe.Pointer(lexbuf)), cgoAllocsUnknown
	C.pdf_lexbuf_fin(cctx, clexbuf)
}

// PDFLexbufGrow function as declared in pdf/parse.h:24
func PDFLexbufGrow(ctx *FzContext, lexbuf *PDFLexbuf) int {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	clexbuf, _ := (*C.pdf_lexbuf)(unsafe.Pointer(lexbuf)), cgoAllocsUnknown
	__ret := C.pdf_lexbuf_grow(cctx, clexbuf)
	__v := (int)(__ret)
	return __v
}

// PDFLex function as declared in pdf/parse.h:26
func PDFLex(ctx *FzContext, f *FzStream, lexbuf []PDFLexbuf) PDFToken {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cf, _ := (*C.fz_stream)(unsafe.Pointer(f)), cgoAllocsUnknown
	clexbuf, _ := (*C.pdf_lexbuf)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&lexbuf)).Data)), cgoAllocsUnknown
	__ret := C.pdf_lex(cctx, cf, clexbuf)
	__v := (PDFToken)(__ret)
	return __v
}

// PDFLexNoString function as declared in pdf/parse.h:27
func PDFLexNoString(ctx *FzContext, f *FzStream, lexbuf []PDFLexbuf) PDFToken {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cf, _ := (*C.fz_stream)(unsafe.Pointer(f)), cgoAllocsUnknown
	clexbuf, _ := (*C.pdf_lexbuf)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&lexbuf)).Data)), cgoAllocsUnknown
	__ret := C.pdf_lex_no_string(cctx, cf, clexbuf)
	__v := (PDFToken)(__ret)
	return __v
}

// PDFParseArray function as declared in pdf/parse.h:29
func PDFParseArray(ctx *FzContext, doc *PDFDocument, f []FzStream, buf []PDFLexbuf) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cf, _ := (*C.fz_stream)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&f)).Data)), cgoAllocsUnknown
	cbuf, _ := (*C.pdf_lexbuf)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buf)).Data)), cgoAllocsUnknown
	__ret := C.pdf_parse_array(cctx, cdoc, cf, cbuf)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFParseDict function as declared in pdf/parse.h:30
func PDFParseDict(ctx *FzContext, doc *PDFDocument, f []FzStream, buf []PDFLexbuf) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cf, _ := (*C.fz_stream)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&f)).Data)), cgoAllocsUnknown
	cbuf, _ := (*C.pdf_lexbuf)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buf)).Data)), cgoAllocsUnknown
	__ret := C.pdf_parse_dict(cctx, cdoc, cf, cbuf)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFParseStmObj function as declared in pdf/parse.h:31
func PDFParseStmObj(ctx *FzContext, doc *PDFDocument, f []FzStream, buf []PDFLexbuf) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cf, _ := (*C.fz_stream)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&f)).Data)), cgoAllocsUnknown
	cbuf, _ := (*C.pdf_lexbuf)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buf)).Data)), cgoAllocsUnknown
	__ret := C.pdf_parse_stm_obj(cctx, cdoc, cf, cbuf)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFParseIndObj function as declared in pdf/parse.h:32
func PDFParseIndObj(ctx *FzContext, doc *PDFDocument, f []FzStream, buf []PDFLexbuf, num []int32, gen []int32, stmOfs []int, tryRepair []int32) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cf, _ := (*C.fz_stream)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&f)).Data)), cgoAllocsUnknown
	cbuf, _ := (*C.pdf_lexbuf)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buf)).Data)), cgoAllocsUnknown
	cnum, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&num)).Data)), cgoAllocsUnknown
	cgen, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&gen)).Data)), cgoAllocsUnknown
	cstmOfs, _ := (*C.int64_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&stmOfs)).Data)), cgoAllocsUnknown
	ctryRepair, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&tryRepair)).Data)), cgoAllocsUnknown
	__ret := C.pdf_parse_ind_obj(cctx, cdoc, cf, cbuf, cnum, cgen, cstmOfs, ctryRepair)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFAppendToken function as declared in pdf/parse.h:37
func PDFAppendToken(ctx *FzContext, buf *FzBuffer, tok int32, lex []PDFLexbuf) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer(buf)), cgoAllocsUnknown
	ctok, _ := (C.int)(tok), cgoAllocsUnknown
	clex, _ := (*C.pdf_lexbuf)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&lex)).Data)), cgoAllocsUnknown
	C.pdf_append_token(cctx, cbuf, ctok, clex)
}

// PDFCreateObject function as declared in pdf/xref.h:7
func PDFCreateObject(ctx *FzContext, doc *PDFDocument) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_create_object(cctx, cdoc)
	__v := (int32)(__ret)
	return __v
}

// PDFDeleteObject function as declared in pdf/xref.h:12
func PDFDeleteObject(ctx *FzContext, doc *PDFDocument, num int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	C.pdf_delete_object(cctx, cdoc, cnum)
}

// PDFUpdateObject function as declared in pdf/xref.h:17
func PDFUpdateObject(ctx *FzContext, doc *PDFDocument, num int32, obj []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	C.pdf_update_object(cctx, cdoc, cnum, cobj)
}

// PDFUpdateStream function as declared in pdf/xref.h:26
func PDFUpdateStream(ctx *FzContext, doc *PDFDocument, ref []PDFObj, buf []FzBuffer, compressed int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cref, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ref)).Data)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buf)).Data)), cgoAllocsUnknown
	ccompressed, _ := (C.int)(compressed), cgoAllocsUnknown
	C.pdf_update_stream(cctx, cdoc, cref, cbuf, ccompressed)
}

// PDFAddObject function as declared in pdf/xref.h:28
func PDFAddObject(ctx *FzContext, doc *PDFDocument, obj []PDFObj) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	__ret := C.pdf_add_object(cctx, cdoc, cobj)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFAddObjectDrop function as declared in pdf/xref.h:29
func PDFAddObjectDrop(ctx *FzContext, doc *PDFDocument, obj []PDFObj) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	__ret := C.pdf_add_object_drop(cctx, cdoc, cobj)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFAddStream function as declared in pdf/xref.h:30
func PDFAddStream(ctx *FzContext, doc *PDFDocument, buf []FzBuffer, obj []PDFObj, compressed int32) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cbuf, _ := (*C.fz_buffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buf)).Data)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	ccompressed, _ := (C.int)(compressed), cgoAllocsUnknown
	__ret := C.pdf_add_stream(cctx, cdoc, cbuf, cobj, ccompressed)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFCacheObject function as declared in pdf/xref.h:76
func PDFCacheObject(ctx *FzContext, doc *PDFDocument, num int32) *PDFXrefEntry {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	__ret := C.pdf_cache_object(cctx, cdoc, cnum)
	__v := *(**PDFXrefEntry)(unsafe.Pointer(&__ret))
	return __v
}

// PDFCountObjects function as declared in pdf/xref.h:78
func PDFCountObjects(ctx *FzContext, doc *PDFDocument) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_count_objects(cctx, cdoc)
	__v := (int32)(__ret)
	return __v
}

// PDFResolveIndirect function as declared in pdf/xref.h:79
func PDFResolveIndirect(ctx *FzContext, ref *PDFObj) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cref, _ := (*C.pdf_obj)(unsafe.Pointer(ref)), cgoAllocsUnknown
	__ret := C.pdf_resolve_indirect(cctx, cref)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFResolveIndirectChain function as declared in pdf/xref.h:80
func PDFResolveIndirectChain(ctx *FzContext, ref *PDFObj) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cref, _ := (*C.pdf_obj)(unsafe.Pointer(ref)), cgoAllocsUnknown
	__ret := C.pdf_resolve_indirect_chain(cctx, cref)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadObject function as declared in pdf/xref.h:81
func PDFLoadObject(ctx *FzContext, doc *PDFDocument, num int32) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	__ret := C.pdf_load_object(cctx, cdoc, cnum)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadRawStreamNumber function as declared in pdf/xref.h:83
func PDFLoadRawStreamNumber(ctx *FzContext, doc *PDFDocument, num int32) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	__ret := C.pdf_load_raw_stream_number(cctx, cdoc, cnum)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadRawStream function as declared in pdf/xref.h:84
func PDFLoadRawStream(ctx *FzContext, ref *PDFObj) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cref, _ := (*C.pdf_obj)(unsafe.Pointer(ref)), cgoAllocsUnknown
	__ret := C.pdf_load_raw_stream(cctx, cref)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadStreamNumber function as declared in pdf/xref.h:85
func PDFLoadStreamNumber(ctx *FzContext, doc *PDFDocument, num int32) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	__ret := C.pdf_load_stream_number(cctx, cdoc, cnum)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadStream function as declared in pdf/xref.h:86
func PDFLoadStream(ctx *FzContext, ref *PDFObj) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cref, _ := (*C.pdf_obj)(unsafe.Pointer(ref)), cgoAllocsUnknown
	__ret := C.pdf_load_stream(cctx, cref)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// PDFOpenRawStreamNumber function as declared in pdf/xref.h:87
func PDFOpenRawStreamNumber(ctx *FzContext, doc *PDFDocument, num int32) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	__ret := C.pdf_open_raw_stream_number(cctx, cdoc, cnum)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// PDFOpenRawStream function as declared in pdf/xref.h:88
func PDFOpenRawStream(ctx *FzContext, ref *PDFObj) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cref, _ := (*C.pdf_obj)(unsafe.Pointer(ref)), cgoAllocsUnknown
	__ret := C.pdf_open_raw_stream(cctx, cref)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// PDFOpenStreamNumber function as declared in pdf/xref.h:89
func PDFOpenStreamNumber(ctx *FzContext, doc *PDFDocument, num int32) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	__ret := C.pdf_open_stream_number(cctx, cdoc, cnum)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// PDFOpenStream function as declared in pdf/xref.h:90
func PDFOpenStream(ctx *FzContext, ref *PDFObj) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cref, _ := (*C.pdf_obj)(unsafe.Pointer(ref)), cgoAllocsUnknown
	__ret := C.pdf_open_stream(cctx, cref)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// PDFOpenInlineStream function as declared in pdf/xref.h:92
func PDFOpenInlineStream(ctx *FzContext, doc *PDFDocument, stmobj []PDFObj, length int32, chain []FzStream, params []FzCompressionParams) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cstmobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&stmobj)).Data)), cgoAllocsUnknown
	clength, _ := (C.int)(length), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&chain)).Data)), cgoAllocsUnknown
	cparams, _ := (*C.fz_compression_params)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&params)).Data)), cgoAllocsUnknown
	__ret := C.pdf_open_inline_stream(cctx, cdoc, cstmobj, clength, cchain, cparams)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadCompressedStream function as declared in pdf/xref.h:93
func PDFLoadCompressedStream(ctx *FzContext, doc *PDFDocument, num int32) *FzCompressedBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	__ret := C.pdf_load_compressed_stream(cctx, cdoc, cnum)
	__v := *(**FzCompressedBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadCompressedInlineImage function as declared in pdf/xref.h:94
func PDFLoadCompressedInlineImage(ctx *FzContext, doc *PDFDocument, dict []PDFObj, length int32, cstm []FzStream, indexed int32, image []FzCompressedImage) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dict)).Data)), cgoAllocsUnknown
	clength, _ := (C.int)(length), cgoAllocsUnknown
	ccstm, _ := (*C.fz_stream)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cstm)).Data)), cgoAllocsUnknown
	cindexed, _ := (C.int)(indexed), cgoAllocsUnknown
	cimage, _ := (*C.fz_compressed_image)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&image)).Data)), cgoAllocsUnknown
	C.pdf_load_compressed_inline_image(cctx, cdoc, cdict, clength, ccstm, cindexed, cimage)
}

// PDFOpenStreamWithOffset function as declared in pdf/xref.h:95
func PDFOpenStreamWithOffset(ctx *FzContext, doc *PDFDocument, num int32, dict []PDFObj, stmOfs int) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dict)).Data)), cgoAllocsUnknown
	cstmOfs, _ := (C.int64_t)(stmOfs), cgoAllocsUnknown
	__ret := C.pdf_open_stream_with_offset(cctx, cdoc, cnum, cdict, cstmOfs)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// PDFOpenContentsStream function as declared in pdf/xref.h:97
func PDFOpenContentsStream(ctx *FzContext, doc *PDFDocument, obj []PDFObj) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	__ret := C.pdf_open_contents_stream(cctx, cdoc, cobj)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadStreamTruncated function as declared in pdf/xref.h:98
func PDFLoadStreamTruncated(ctx *FzContext, doc *PDFDocument, num int32, truncated []int32) *FzBuffer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	ctruncated, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&truncated)).Data)), cgoAllocsUnknown
	__ret := C.pdf_load_stream_truncated(cctx, cdoc, cnum, ctruncated)
	__v := *(**FzBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// PDFTrailer function as declared in pdf/xref.h:100
func PDFTrailer(ctx *FzContext, doc *PDFDocument) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_trailer(cctx, cdoc)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFSetPopulatingXrefTrailer function as declared in pdf/xref.h:101
func PDFSetPopulatingXrefTrailer(ctx *FzContext, doc *PDFDocument, trailer []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	ctrailer, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&trailer)).Data)), cgoAllocsUnknown
	C.pdf_set_populating_xref_trailer(cctx, cdoc, ctrailer)
}

// PDFXrefLen function as declared in pdf/xref.h:102
func PDFXrefLen(ctx *FzContext, doc *PDFDocument) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_xref_len(cctx, cdoc)
	__v := (int32)(__ret)
	return __v
}

// PDFGetPopulatingXrefEntry function as declared in pdf/xref.h:103
func PDFGetPopulatingXrefEntry(ctx *FzContext, doc *PDFDocument, i int32) *PDFXrefEntry {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	ci, _ := (C.int)(i), cgoAllocsUnknown
	__ret := C.pdf_get_populating_xref_entry(cctx, cdoc, ci)
	__v := *(**PDFXrefEntry)(unsafe.Pointer(&__ret))
	return __v
}

// PDFGetXrefEntry function as declared in pdf/xref.h:104
func PDFGetXrefEntry(ctx *FzContext, doc *PDFDocument, i int32) *PDFXrefEntry {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	ci, _ := (C.int)(i), cgoAllocsUnknown
	__ret := C.pdf_get_xref_entry(cctx, cdoc, ci)
	__v := *(**PDFXrefEntry)(unsafe.Pointer(&__ret))
	return __v
}

// PDFReplaceXref function as declared in pdf/xref.h:105
func PDFReplaceXref(ctx *FzContext, doc *PDFDocument, entries []PDFXrefEntry, n int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	centries, _ := (*C.pdf_xref_entry)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&entries)).Data)), cgoAllocsUnknown
	cn, _ := (C.int)(n), cgoAllocsUnknown
	C.pdf_replace_xref(cctx, cdoc, centries, cn)
}

// PDFXrefEnsureIncrementalObject function as declared in pdf/xref.h:106
func PDFXrefEnsureIncrementalObject(ctx *FzContext, doc *PDFDocument, num int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	C.pdf_xref_ensure_incremental_object(cctx, cdoc, cnum)
}

// PDFXrefIsIncremental function as declared in pdf/xref.h:107
func PDFXrefIsIncremental(ctx *FzContext, doc *PDFDocument, num int32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	__ret := C.pdf_xref_is_incremental(cctx, cdoc, cnum)
	__v := (int32)(__ret)
	return __v
}

// PDFXrefStoreUnsavedSignature function as declared in pdf/xref.h:108
func PDFXrefStoreUnsavedSignature(ctx *FzContext, doc *PDFDocument, field []PDFObj, signer []PDFSigner) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cfield, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&field)).Data)), cgoAllocsUnknown
	csigner, _ := (*C.pdf_signer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&signer)).Data)), cgoAllocsUnknown
	C.pdf_xref_store_unsaved_signature(cctx, cdoc, cfield, csigner)
}

// PDFXrefObjIsUnsavedSignature function as declared in pdf/xref.h:109
func PDFXrefObjIsUnsavedSignature(doc *PDFDocument, obj *PDFObj) int32 {
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_xref_obj_is_unsaved_signature(cdoc, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFRepairXref function as declared in pdf/xref.h:111
func PDFRepairXref(ctx *FzContext, doc *PDFDocument) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	C.pdf_repair_xref(cctx, cdoc)
}

// PDFRepairObjStms function as declared in pdf/xref.h:112
func PDFRepairObjStms(ctx *FzContext, doc *PDFDocument) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	C.pdf_repair_obj_stms(cctx, cdoc)
}

// PDFEnsureSolidXref function as declared in pdf/xref.h:113
func PDFEnsureSolidXref(ctx *FzContext, doc *PDFDocument, num int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	C.pdf_ensure_solid_xref(cctx, cdoc, cnum)
}

// PDFMarkXref function as declared in pdf/xref.h:114
func PDFMarkXref(ctx *FzContext, doc *PDFDocument) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	C.pdf_mark_xref(cctx, cdoc)
}

// PDFClearXref function as declared in pdf/xref.h:115
func PDFClearXref(ctx *FzContext, doc *PDFDocument) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	C.pdf_clear_xref(cctx, cdoc)
}

// PDFClearXrefToMark function as declared in pdf/xref.h:116
func PDFClearXrefToMark(ctx *FzContext, doc *PDFDocument) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	C.pdf_clear_xref_to_mark(cctx, cdoc)
}

// PDFRepairObj function as declared in pdf/xref.h:118
func PDFRepairObj(ctx *FzContext, doc *PDFDocument, buf []PDFLexbuf, stmofsp []int, stmlenp []int32, encrypt [][]PDFObj, id [][]PDFObj, page [][]PDFObj, tmpofs []int, root [][]PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cbuf, _ := (*C.pdf_lexbuf)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buf)).Data)), cgoAllocsUnknown
	cstmofsp, _ := (*C.int64_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&stmofsp)).Data)), cgoAllocsUnknown
	cstmlenp, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&stmlenp)).Data)), cgoAllocsUnknown
	cencrypt, _ := unpackArgSSPDFObj(encrypt)
	cid, _ := unpackArgSSPDFObj(id)
	cpage, _ := unpackArgSSPDFObj(page)
	ctmpofs, _ := (*C.int64_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&tmpofs)).Data)), cgoAllocsUnknown
	croot, _ := unpackArgSSPDFObj(root)
	__ret := C.pdf_repair_obj(cctx, cdoc, cbuf, cstmofsp, cstmlenp, cencrypt, cid, cpage, ctmpofs, croot)
	packSSPDFObj(root, croot)
	packSSPDFObj(page, cpage)
	packSSPDFObj(id, cid)
	packSSPDFObj(encrypt, cencrypt)
	__v := (int32)(__ret)
	return __v
}

// PDFProgressiveAdvance function as declared in pdf/xref.h:120
func PDFProgressiveAdvance(ctx *FzContext, doc *PDFDocument, pagenum int32) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cpagenum, _ := (C.int)(pagenum), cgoAllocsUnknown
	__ret := C.pdf_progressive_advance(cctx, cdoc, cpagenum)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewCrypt function as declared in pdf/crypt.h:8
func PDFNewCrypt(ctx *FzContext, enc *PDFObj, id []PDFObj) *PDFCrypt {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cenc, _ := (*C.pdf_obj)(unsafe.Pointer(enc)), cgoAllocsUnknown
	cid, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&id)).Data)), cgoAllocsUnknown
	__ret := C.pdf_new_crypt(cctx, cenc, cid)
	__v := *(**PDFCrypt)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDropCrypt function as declared in pdf/crypt.h:9
func PDFDropCrypt(ctx *FzContext, crypt *PDFCrypt) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccrypt, _ := (*C.pdf_crypt)(unsafe.Pointer(crypt)), cgoAllocsUnknown
	C.pdf_drop_crypt(cctx, ccrypt)
}

// PDFCryptObj function as declared in pdf/crypt.h:11
func PDFCryptObj(ctx *FzContext, crypt *PDFCrypt, obj []PDFObj, num int32, gen int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccrypt, _ := (*C.pdf_crypt)(unsafe.Pointer(crypt)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	cgen, _ := (C.int)(gen), cgoAllocsUnknown
	C.pdf_crypt_obj(cctx, ccrypt, cobj, cnum, cgen)
}

// PDFOpenCrypt function as declared in pdf/crypt.h:13
func PDFOpenCrypt(ctx *FzContext, chain *FzStream, crypt []PDFCrypt, num int32, gen int32) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer(chain)), cgoAllocsUnknown
	ccrypt, _ := (*C.pdf_crypt)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&crypt)).Data)), cgoAllocsUnknown
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	cgen, _ := (C.int)(gen), cgoAllocsUnknown
	__ret := C.pdf_open_crypt(cctx, cchain, ccrypt, cnum, cgen)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// PDFOpenCryptWithFilter function as declared in pdf/crypt.h:14
func PDFOpenCryptWithFilter(ctx *FzContext, chain *FzStream, crypt []PDFCrypt, name []PDFObj, num int32, gen int32) *FzStream {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cchain, _ := (*C.fz_stream)(unsafe.Pointer(chain)), cgoAllocsUnknown
	ccrypt, _ := (*C.pdf_crypt)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&crypt)).Data)), cgoAllocsUnknown
	cname, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&name)).Data)), cgoAllocsUnknown
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	cgen, _ := (C.int)(gen), cgoAllocsUnknown
	__ret := C.pdf_open_crypt_with_filter(cctx, cchain, ccrypt, cname, cnum, cgen)
	__v := *(**FzStream)(unsafe.Pointer(&__ret))
	return __v
}

// PDFCryptVersion function as declared in pdf/crypt.h:16
func PDFCryptVersion(ctx *FzContext, doc *PDFDocument) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_crypt_version(cctx, cdoc)
	__v := (int32)(__ret)
	return __v
}

// PDFCryptRevision function as declared in pdf/crypt.h:17
func PDFCryptRevision(ctx *FzContext, doc *PDFDocument) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_crypt_revision(cctx, cdoc)
	__v := (int32)(__ret)
	return __v
}

// PDFCryptMethod function as declared in pdf/crypt.h:18
func PDFCryptMethod(ctx *FzContext, doc *PDFDocument) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_crypt_method(cctx, cdoc)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// PDFCryptLength function as declared in pdf/crypt.h:19
func PDFCryptLength(ctx *FzContext, doc *PDFDocument) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_crypt_length(cctx, cdoc)
	__v := (int32)(__ret)
	return __v
}

// PDFCryptKey function as declared in pdf/crypt.h:20
func PDFCryptKey(ctx *FzContext, doc *PDFDocument) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_crypt_key(cctx, cdoc)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// PDFPrintCrypt function as declared in pdf/crypt.h:22
func PDFPrintCrypt(ctx *FzContext, out *FzOutput, crypt []PDFCrypt) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	ccrypt, _ := (*C.pdf_crypt)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&crypt)).Data)), cgoAllocsUnknown
	C.pdf_print_crypt(cctx, cout, ccrypt)
}

// PDFKeepSigner function as declared in pdf/crypt.h:37
func PDFKeepSigner(ctx *FzContext, signer *PDFSigner) *PDFSigner {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csigner, _ := (*C.pdf_signer)(unsafe.Pointer(signer)), cgoAllocsUnknown
	__ret := C.pdf_keep_signer(cctx, csigner)
	__v := *(**PDFSigner)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDropSigner function as declared in pdf/crypt.h:38
func PDFDropSigner(ctx *FzContext, signer *PDFSigner) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csigner, _ := (*C.pdf_signer)(unsafe.Pointer(signer)), cgoAllocsUnknown
	C.pdf_drop_signer(cctx, csigner)
}

// PDFWriteDigest function as declared in pdf/crypt.h:40
func PDFWriteDigest(ctx *FzContext, doc *PDFDocument, filename string, byteRange []PDFObj, digestOffset int32, digestLength int32, signer []PDFSigner) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	filename = safeString(filename)
	cfilename, _ := unpackPCharString(filename)
	cbyteRange, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&byteRange)).Data)), cgoAllocsUnknown
	cdigestOffset, _ := (C.int)(digestOffset), cgoAllocsUnknown
	cdigestLength, _ := (C.int)(digestLength), cgoAllocsUnknown
	csigner, _ := (*C.pdf_signer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&signer)).Data)), cgoAllocsUnknown
	C.pdf_write_digest(cctx, cdoc, cfilename, cbyteRange, cdigestOffset, cdigestLength, csigner)
	runtime.KeepAlive(filename)
}

// PDFCheckSignature function as declared in pdf/crypt.h:55
func PDFCheckSignature(ctx *FzContext, doc *PDFDocument, widget []PDFWidget, file []byte, ebuf []byte, ebufsize int32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cwidget, _ := (*C.pdf_widget)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&widget)).Data)), cgoAllocsUnknown
	cfile, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&file)).Data)), cgoAllocsUnknown
	cebuf, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ebuf)).Data)), cgoAllocsUnknown
	cebufsize, _ := (C.int)(ebufsize), cgoAllocsUnknown
	__ret := C.pdf_check_signature(cctx, cdoc, cwidget, cfile, cebuf, cebufsize)
	__v := (int32)(__ret)
	return __v
}

// PDFSignSignature function as declared in pdf/crypt.h:60
func PDFSignSignature(ctx *FzContext, doc *PDFDocument, widget []PDFWidget, sigfile string, password string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cwidget, _ := (*C.pdf_widget)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&widget)).Data)), cgoAllocsUnknown
	sigfile = safeString(sigfile)
	csigfile, _ := unpackPCharString(sigfile)
	password = safeString(password)
	cpassword, _ := unpackPCharString(password)
	C.pdf_sign_signature(cctx, cdoc, cwidget, csigfile, cpassword)
	runtime.KeepAlive(password)
	runtime.KeepAlive(sigfile)
}

// PDFLookupPageNumber function as declared in pdf/page.h:6
func PDFLookupPageNumber(ctx *FzContext, doc *PDFDocument, pageobj []PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cpageobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&pageobj)).Data)), cgoAllocsUnknown
	__ret := C.pdf_lookup_page_number(cctx, cdoc, cpageobj)
	__v := (int32)(__ret)
	return __v
}

// PDFCountPages function as declared in pdf/page.h:7
func PDFCountPages(ctx *FzContext, doc *PDFDocument) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_count_pages(cctx, cdoc)
	__v := (int32)(__ret)
	return __v
}

// PDFLookupPageObj function as declared in pdf/page.h:8
func PDFLookupPageObj(ctx *FzContext, doc *PDFDocument, needle int32) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cneedle, _ := (C.int)(needle), cgoAllocsUnknown
	__ret := C.pdf_lookup_page_obj(cctx, cdoc, cneedle)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadPageTree function as declared in pdf/page.h:9
func PDFLoadPageTree(ctx *FzContext, doc *PDFDocument) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	C.pdf_load_page_tree(cctx, cdoc)
}

// PDFDropPageTree function as declared in pdf/page.h:10
func PDFDropPageTree(ctx *FzContext, doc *PDFDocument) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	C.pdf_drop_page_tree(cctx, cdoc)
}

// PDFLookupAnchor function as declared in pdf/page.h:18
func PDFLookupAnchor(ctx *FzContext, doc *PDFDocument, name string, xp []float32, yp []float32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	cxp, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&xp)).Data)), cgoAllocsUnknown
	cyp, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&yp)).Data)), cgoAllocsUnknown
	__ret := C.pdf_lookup_anchor(cctx, cdoc, cname, cxp, cyp)
	runtime.KeepAlive(name)
	__v := (int32)(__ret)
	return __v
}

// PDFFlattenInheritablePageItems function as declared in pdf/page.h:26
func PDFFlattenInheritablePageItems(ctx *FzContext, page *PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_obj)(unsafe.Pointer(page)), cgoAllocsUnknown
	C.pdf_flatten_inheritable_page_items(cctx, cpage)
}

// PDFLoadPage function as declared in pdf/page.h:38
func PDFLoadPage(ctx *FzContext, doc *PDFDocument, number int32) *PDFPage {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cnumber, _ := (C.int)(number), cgoAllocsUnknown
	__ret := C.pdf_load_page(cctx, cdoc, cnumber)
	__v := *(**PDFPage)(unsafe.Pointer(&__ret))
	return __v
}

// PDFPageObjTransform function as declared in pdf/page.h:40
func PDFPageObjTransform(ctx *FzContext, pageobj *PDFObj, pageMediabox []FzRect, pageCtm []FzMatrix) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpageobj, _ := (*C.pdf_obj)(unsafe.Pointer(pageobj)), cgoAllocsUnknown
	cpageMediabox, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&pageMediabox)).Data)), cgoAllocsUnknown
	cpageCtm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&pageCtm)).Data)), cgoAllocsUnknown
	C.pdf_page_obj_transform(cctx, cpageobj, cpageMediabox, cpageCtm)
}

// PDFPageTransform function as declared in pdf/page.h:41
func PDFPageTransform(ctx *FzContext, page *PDFPage, mediabox []FzRect, ctm []FzMatrix) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	cmediabox, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&mediabox)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	C.pdf_page_transform(cctx, cpage, cmediabox, cctm)
}

// PDFPageResources function as declared in pdf/page.h:42
func PDFPageResources(ctx *FzContext, page *PDFPage) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	__ret := C.pdf_page_resources(cctx, cpage)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFPageContents function as declared in pdf/page.h:43
func PDFPageContents(ctx *FzContext, page *PDFPage) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	__ret := C.pdf_page_contents(cctx, cpage)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFPageGroup function as declared in pdf/page.h:44
func PDFPageGroup(ctx *FzContext, page *PDFPage) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	__ret := C.pdf_page_group(cctx, cpage)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFPageSeparations function as declared in pdf/page.h:49
func PDFPageSeparations(ctx *FzContext, page *PDFPage) *FzSeparations {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	__ret := C.pdf_page_separations(cctx, cpage)
	__v := *(**FzSeparations)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadLinks function as declared in pdf/page.h:51
func PDFLoadLinks(ctx *FzContext, page *PDFPage) *FzLink {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	__ret := C.pdf_load_links(cctx, cpage)
	__v := *(**FzLink)(unsafe.Pointer(&__ret))
	return __v
}

// PDFBoundPage function as declared in pdf/page.h:61
func PDFBoundPage(ctx *FzContext, page *PDFPage, arg2 []FzRect) *FzRect {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	carg2, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&arg2)).Data)), cgoAllocsUnknown
	__ret := C.pdf_bound_page(cctx, cpage, carg2)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

// PDFRunPage function as declared in pdf/page.h:73
func PDFRunPage(ctx *FzContext, page *PDFPage, dev []FzDevice, ctm []FzMatrix, cookie []FzCookie) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dev)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	ccookie, _ := (*C.fz_cookie)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cookie)).Data)), cgoAllocsUnknown
	C.pdf_run_page(cctx, cpage, cdev, cctm, ccookie)
}

// PDFRunPageWithUsage function as declared in pdf/page.h:91
func PDFRunPageWithUsage(ctx *FzContext, doc *PDFDocument, page []PDFPage, dev []FzDevice, ctm []FzMatrix, usage string, cookie []FzCookie) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&page)).Data)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dev)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	usage = safeString(usage)
	cusage, _ := unpackPCharString(usage)
	ccookie, _ := (*C.fz_cookie)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cookie)).Data)), cgoAllocsUnknown
	C.pdf_run_page_with_usage(cctx, cdoc, cpage, cdev, cctm, cusage, ccookie)
	runtime.KeepAlive(usage)
}

// PDFRunPageContents function as declared in pdf/page.h:104
func PDFRunPageContents(ctx *FzContext, page *PDFPage, dev []FzDevice, ctm []FzMatrix, cookie []FzCookie) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dev)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	ccookie, _ := (*C.fz_cookie)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cookie)).Data)), cgoAllocsUnknown
	C.pdf_run_page_contents(cctx, cpage, cdev, cctm, ccookie)
}

// PDFFilterPageContents function as declared in pdf/page.h:186
//func PDFFilterPageContents(ctx *FzContext, doc *PDFDocument, page []PDFPage, cookie []FzCookie, procFn PDFPageContentsProcessFn, textFilter PDFTextFilterFn, afterText PDFAfterTextObjectFn, arg unsafe.Pointer, ascii int32) {
//	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
//	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
//	cpage, _ := (*C.pdf_page)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&page)).Data)), cgoAllocsUnknown
//	ccookie, _ := (*C.fz_cookie)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cookie)).Data)), cgoAllocsUnknown
//	cprocFn, _ := *(**[0]byte)(unsafe.Pointer(procFn)), cgoAllocsUnknown
//	ctextFilter, _ := *(**[0]byte)(unsafe.Pointer(textFilter)), cgoAllocsUnknown
//	cafterText, _ := *(**[0]byte)(unsafe.Pointer(afterText)), cgoAllocsUnknown
//	carg, _ := arg, cgoAllocsUnknown
//	cascii, _ := (C.int)(ascii), cgoAllocsUnknown
//	C.pdf_filter_page_contents(cctx, cdoc, cpage, ccookie, cprocFn, ctextFilter, cafterText, carg, cascii)
//}

// PDFFilterAnnotContents function as declared in pdf/page.h:202
//func PDFFilterAnnotContents(ctx *FzContext, doc *PDFDocument, annot []PDFAnnot, cookie []FzCookie, proc PDFPageContentsProcessFn, textFilter PDFTextFilterFn, afterText PDFAfterTextObjectFn, arg unsafe.Pointer, ascii int32) {
//	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
//	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
//	cannot, _ := (*C.pdf_annot)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&annot)).Data)), cgoAllocsUnknown
//	ccookie, _ := (*C.fz_cookie)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cookie)).Data)), cgoAllocsUnknown
//	cproc, _ := *(**[0]byte)(unsafe.Pointer(proc)), cgoAllocsUnknown
//	ctextFilter, _ := *(**[0]byte)(unsafe.Pointer(textFilter)), cgoAllocsUnknown
//	cafterText, _ := *(**[0]byte)(unsafe.Pointer(afterText)), cgoAllocsUnknown
//	carg, _ := arg, cgoAllocsUnknown
//	cascii, _ := (C.int)(ascii), cgoAllocsUnknown
//	C.pdf_filter_annot_contents(cctx, cdoc, cannot, ccookie, cproc, ctextFilter, cafterText, carg, cascii)
//}

// PDFPagePresentation function as declared in pdf/page.h:208
func PDFPagePresentation(ctx *FzContext, page *PDFPage, transition []FzTransition, duration []float32) *FzTransition {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	ctransition, _ := (*C.fz_transition)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&transition)).Data)), cgoAllocsUnknown
	cduration, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&duration)).Data)), cgoAllocsUnknown
	__ret := C.pdf_page_presentation(cctx, cpage, ctransition, cduration)
	__v := *(**FzTransition)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadDefaultColorspaces function as declared in pdf/page.h:213
func PDFLoadDefaultColorspaces(ctx *FzContext, doc *PDFDocument, page []PDFPage) *FzDefaultColorspaces {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&page)).Data)), cgoAllocsUnknown
	__ret := C.pdf_load_default_colorspaces(cctx, cdoc, cpage)
	__v := *(**FzDefaultColorspaces)(unsafe.Pointer(&__ret))
	return __v
}

// PDFUpdateDefaultColorspaces function as declared in pdf/page.h:218
func PDFUpdateDefaultColorspaces(ctx *FzContext, oldCs *FzDefaultColorspaces, res []PDFObj) *FzDefaultColorspaces {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	coldCs, _ := (*C.fz_default_colorspaces)(unsafe.Pointer(oldCs)), cgoAllocsUnknown
	cres, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&res)).Data)), cgoAllocsUnknown
	__ret := C.pdf_update_default_colorspaces(cctx, coldCs, cres)
	__v := *(**FzDefaultColorspaces)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewProcessor function as declared in pdf/interpret.h:11
func PDFNewProcessor(ctx *FzContext, size int32) unsafe.Pointer {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csize, _ := (C.int)(size), cgoAllocsUnknown
	__ret := C.pdf_new_processor(cctx, csize)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// PDFCloseProcessor function as declared in pdf/interpret.h:12
func PDFCloseProcessor(ctx *FzContext, proc *PDFProcessor) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cproc, _ := (*C.pdf_processor)(unsafe.Pointer(proc)), cgoAllocsUnknown
	C.pdf_close_processor(cctx, cproc)
}

// PDFDropProcessor function as declared in pdf/interpret.h:13
func PDFDropProcessor(ctx *FzContext, proc *PDFProcessor) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cproc, _ := (*C.pdf_processor)(unsafe.Pointer(proc)), cgoAllocsUnknown
	C.pdf_drop_processor(cctx, cproc)
}

// PDFNewRunProcessor function as declared in pdf/interpret.h:187
func PDFNewRunProcessor(ctx *FzContext, dev *FzDevice, ctm []FzMatrix, usage string, gstate []PDFGstate, nested int32, defaultCs []FzDefaultColorspaces) *PDFProcessor {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer(dev)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	usage = safeString(usage)
	cusage, _ := unpackPCharString(usage)
	cgstate, _ := (*C.pdf_gstate)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&gstate)).Data)), cgoAllocsUnknown
	cnested, _ := (C.int)(nested), cgoAllocsUnknown
	cdefaultCs, _ := (*C.fz_default_colorspaces)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&defaultCs)).Data)), cgoAllocsUnknown
	__ret := C.pdf_new_run_processor(cctx, cdev, cctm, cusage, cgstate, cnested, cdefaultCs)
	runtime.KeepAlive(usage)
	__v := *(**PDFProcessor)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewBufferProcessor function as declared in pdf/interpret.h:199
func PDFNewBufferProcessor(ctx *FzContext, buffer *FzBuffer, ahxencode int32) *PDFProcessor {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cbuffer, _ := (*C.fz_buffer)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	cahxencode, _ := (C.int)(ahxencode), cgoAllocsUnknown
	__ret := C.pdf_new_buffer_processor(cctx, cbuffer, cahxencode)
	__v := *(**PDFProcessor)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewOutputProcessor function as declared in pdf/interpret.h:210
func PDFNewOutputProcessor(ctx *FzContext, out *FzOutput, ahxencode int32) *PDFProcessor {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cahxencode, _ := (C.int)(ahxencode), cgoAllocsUnknown
	__ret := C.pdf_new_output_processor(cctx, cout, cahxencode)
	__v := *(**PDFProcessor)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewFilterProcessor function as declared in pdf/interpret.h:247
func PDFNewFilterProcessor(ctx *FzContext, doc *PDFDocument, chain []PDFProcessor, oldRes []PDFObj, newRes []PDFObj) *PDFProcessor {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cchain, _ := (*C.pdf_processor)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&chain)).Data)), cgoAllocsUnknown
	coldRes, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&oldRes)).Data)), cgoAllocsUnknown
	cnewRes, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&newRes)).Data)), cgoAllocsUnknown
	__ret := C.pdf_new_filter_processor(cctx, cdoc, cchain, coldRes, cnewRes)
	__v := *(**PDFProcessor)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewFilterProcessorWithTextFilter function as declared in pdf/interpret.h:271
//func PDFNewFilterProcessorWithTextFilter(ctx *FzContext, doc *PDFDocument, chain []PDFProcessor, oldRdb []PDFObj, newRdb []PDFObj, textFilter PDFTextFilterFn, after PDFAfterTextObjectFn, textFilterOpaque unsafe.Pointer) *PDFProcessor {
//	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
//	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
//	cchain, _ := (*C.pdf_processor)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&chain)).Data)), cgoAllocsUnknown
//	coldRdb, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&oldRdb)).Data)), cgoAllocsUnknown
//	cnewRdb, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&newRdb)).Data)), cgoAllocsUnknown
//	ctextFilter, _ := *(**[0]byte)(unsafe.Pointer(textFilter)), cgoAllocsUnknown
//	cafter, _ := *(**[0]byte)(unsafe.Pointer(after)), cgoAllocsUnknown
//	ctextFilterOpaque, _ := textFilterOpaque, cgoAllocsUnknown
//	__ret := C.pdf_new_filter_processor_with_text_filter(cctx, cdoc, cchain, coldRdb, cnewRdb, ctextFilter, cafter, ctextFilterOpaque)
//	__v := *(**PDFProcessor)(unsafe.Pointer(&__ret))
//	return __v
//}

// PDFProcessContents function as declared in pdf/interpret.h:275
func PDFProcessContents(ctx *FzContext, proc *PDFProcessor, doc []PDFDocument, obj []PDFObj, res []PDFObj, cookie []FzCookie) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cproc, _ := (*C.pdf_processor)(unsafe.Pointer(proc)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&doc)).Data)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	cres, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&res)).Data)), cgoAllocsUnknown
	ccookie, _ := (*C.fz_cookie)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cookie)).Data)), cgoAllocsUnknown
	C.pdf_process_contents(cctx, cproc, cdoc, cobj, cres, ccookie)
}

// PDFProcessAnnot function as declared in pdf/interpret.h:276
func PDFProcessAnnot(ctx *FzContext, proc *PDFProcessor, doc []PDFDocument, page []PDFPage, annot []PDFAnnot, cookie []FzCookie) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cproc, _ := (*C.pdf_processor)(unsafe.Pointer(proc)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&doc)).Data)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&page)).Data)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&annot)).Data)), cgoAllocsUnknown
	ccookie, _ := (*C.fz_cookie)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cookie)).Data)), cgoAllocsUnknown
	C.pdf_process_annot(cctx, cproc, cdoc, cpage, cannot, ccookie)
}

// PDFProcessGlyph function as declared in pdf/interpret.h:277
func PDFProcessGlyph(ctx *FzContext, proc *PDFProcessor, doc []PDFDocument, resources []PDFObj, contents []FzBuffer) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cproc, _ := (*C.pdf_processor)(unsafe.Pointer(proc)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&doc)).Data)), cgoAllocsUnknown
	cresources, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&resources)).Data)), cgoAllocsUnknown
	ccontents, _ := (*C.fz_buffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&contents)).Data)), cgoAllocsUnknown
	C.pdf_process_glyph(cctx, cproc, cdoc, cresources, ccontents)
}

// PDFTosSave function as declared in pdf/interpret.h:308
func PDFTosSave(ctx *FzContext, tos *PDFTextObjectState, save *[2]FzMatrix) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctos, _ := (*C.pdf_text_object_state)(unsafe.Pointer(tos)), cgoAllocsUnknown
	csave, _ := *(**C.fz_matrix)(unsafe.Pointer(&save)), cgoAllocsUnknown
	C.pdf_tos_save(cctx, ctos, csave)
	if save != nil {
		*save = *(*[2]FzMatrix)(unsafe.Pointer(&csave))
	}
}

// PDFTosRestore function as declared in pdf/interpret.h:309
func PDFTosRestore(ctx *FzContext, tos *PDFTextObjectState, save *[2]FzMatrix) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctos, _ := (*C.pdf_text_object_state)(unsafe.Pointer(tos)), cgoAllocsUnknown
	csave, _ := *(**C.fz_matrix)(unsafe.Pointer(&save)), cgoAllocsUnknown
	C.pdf_tos_restore(cctx, ctos, csave)
	if save != nil {
		*save = *(*[2]FzMatrix)(unsafe.Pointer(&csave))
	}
}

// PDFTosGetText function as declared in pdf/interpret.h:310
func PDFTosGetText(ctx *FzContext, tos *PDFTextObjectState) *FzText {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctos, _ := (*C.pdf_text_object_state)(unsafe.Pointer(tos)), cgoAllocsUnknown
	__ret := C.pdf_tos_get_text(cctx, ctos)
	__v := *(**FzText)(unsafe.Pointer(&__ret))
	return __v
}

// PDFTosReset function as declared in pdf/interpret.h:311
func PDFTosReset(ctx *FzContext, tos *PDFTextObjectState, render int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctos, _ := (*C.pdf_text_object_state)(unsafe.Pointer(tos)), cgoAllocsUnknown
	crender, _ := (C.int)(render), cgoAllocsUnknown
	C.pdf_tos_reset(cctx, ctos, crender)
}

// PDFTosMakeTrm function as declared in pdf/interpret.h:312
func PDFTosMakeTrm(ctx *FzContext, tos *PDFTextObjectState, text []PDFTextState, fontdesc []PDFFontDesc, cid int32, trm []FzMatrix) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctos, _ := (*C.pdf_text_object_state)(unsafe.Pointer(tos)), cgoAllocsUnknown
	ctext, _ := (*C.pdf_text_state)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&text)).Data)), cgoAllocsUnknown
	cfontdesc, _ := (*C.pdf_font_desc)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&fontdesc)).Data)), cgoAllocsUnknown
	ccid, _ := (C.int)(cid), cgoAllocsUnknown
	ctrm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&trm)).Data)), cgoAllocsUnknown
	__ret := C.pdf_tos_make_trm(cctx, ctos, ctext, cfontdesc, ccid, ctrm)
	__v := (int32)(__ret)
	return __v
}

// PDFTosMoveAfterChar function as declared in pdf/interpret.h:313
func PDFTosMoveAfterChar(ctx *FzContext, tos *PDFTextObjectState) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctos, _ := (*C.pdf_text_object_state)(unsafe.Pointer(tos)), cgoAllocsUnknown
	C.pdf_tos_move_after_char(cctx, ctos)
}

// PDFTosTranslate function as declared in pdf/interpret.h:314
func PDFTosTranslate(tos *PDFTextObjectState, tx float32, ty float32) {
	ctos, _ := (*C.pdf_text_object_state)(unsafe.Pointer(tos)), cgoAllocsUnknown
	ctx, _ := (C.float)(tx), cgoAllocsUnknown
	cty, _ := (C.float)(ty), cgoAllocsUnknown
	C.pdf_tos_translate(ctos, ctx, cty)
}

// PDFTosSetMatrix function as declared in pdf/interpret.h:315
func PDFTosSetMatrix(tos *PDFTextObjectState, a float32, b float32, c float32, d float32, e float32, f float32) {
	ctos, _ := (*C.pdf_text_object_state)(unsafe.Pointer(tos)), cgoAllocsUnknown
	ca, _ := (C.float)(a), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	ce, _ := (C.float)(e), cgoAllocsUnknown
	cf, _ := (C.float)(f), cgoAllocsUnknown
	C.pdf_tos_set_matrix(ctos, ca, cb, cc, cd, ce, cf)
}

// PDFTosNewline function as declared in pdf/interpret.h:316
func PDFTosNewline(tos *PDFTextObjectState, leading float32) {
	ctos, _ := (*C.pdf_text_object_state)(unsafe.Pointer(tos)), cgoAllocsUnknown
	cleading, _ := (C.float)(leading), cgoAllocsUnknown
	C.pdf_tos_newline(ctos, cleading)
}

// PDFLoadEncoding function as declared in pdf/font.h:23
func PDFLoadEncoding(estrings []string, encoding string) {
	cestrings, _ := unpackArgSString(estrings)
	encoding = safeString(encoding)
	cencoding, _ := unpackPCharString(encoding)
	C.pdf_load_encoding(cestrings, cencoding)
	runtime.KeepAlive(encoding)
	packSString(estrings, cestrings)
}

// PDFLookupAgl function as declared in pdf/font.h:24
func PDFLookupAgl(name string) int32 {
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	__ret := C.pdf_lookup_agl(cname)
	runtime.KeepAlive(name)
	__v := (int32)(__ret)
	return __v
}

// PDFLookupAglDuplicates function as declared in pdf/font.h:25
func PDFLookupAglDuplicates(ucs int32) []string {
	cucs, _ := (C.int)(ucs), cgoAllocsUnknown
	__ret := C.pdf_lookup_agl_duplicates(cucs)
	__v := (*(*[0x7fffffff]string)(unsafe.Pointer(__ret)))[:0]
	return __v
}

// PDFSetFontWmode function as declared in pdf/font.h:94
func PDFSetFontWmode(ctx *FzContext, font *PDFFontDesc, wmode int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.pdf_font_desc)(unsafe.Pointer(font)), cgoAllocsUnknown
	cwmode, _ := (C.int)(wmode), cgoAllocsUnknown
	C.pdf_set_font_wmode(cctx, cfont, cwmode)
}

// PDFSetDefaultHmtx function as declared in pdf/font.h:95
func PDFSetDefaultHmtx(ctx *FzContext, font *PDFFontDesc, w int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.pdf_font_desc)(unsafe.Pointer(font)), cgoAllocsUnknown
	cw, _ := (C.int)(w), cgoAllocsUnknown
	C.pdf_set_default_hmtx(cctx, cfont, cw)
}

// PDFSetDefaultVmtx function as declared in pdf/font.h:96
func PDFSetDefaultVmtx(ctx *FzContext, font *PDFFontDesc, y int32, w int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.pdf_font_desc)(unsafe.Pointer(font)), cgoAllocsUnknown
	cy, _ := (C.int)(y), cgoAllocsUnknown
	cw, _ := (C.int)(w), cgoAllocsUnknown
	C.pdf_set_default_vmtx(cctx, cfont, cy, cw)
}

// PDFAddHmtx function as declared in pdf/font.h:97
func PDFAddHmtx(ctx *FzContext, font *PDFFontDesc, lo int32, hi int32, w int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.pdf_font_desc)(unsafe.Pointer(font)), cgoAllocsUnknown
	clo, _ := (C.int)(lo), cgoAllocsUnknown
	chi, _ := (C.int)(hi), cgoAllocsUnknown
	cw, _ := (C.int)(w), cgoAllocsUnknown
	C.pdf_add_hmtx(cctx, cfont, clo, chi, cw)
}

// PDFAddVmtx function as declared in pdf/font.h:98
func PDFAddVmtx(ctx *FzContext, font *PDFFontDesc, lo int32, hi int32, x int32, y int32, w int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.pdf_font_desc)(unsafe.Pointer(font)), cgoAllocsUnknown
	clo, _ := (C.int)(lo), cgoAllocsUnknown
	chi, _ := (C.int)(hi), cgoAllocsUnknown
	cx, _ := (C.int)(x), cgoAllocsUnknown
	cy, _ := (C.int)(y), cgoAllocsUnknown
	cw, _ := (C.int)(w), cgoAllocsUnknown
	C.pdf_add_vmtx(cctx, cfont, clo, chi, cx, cy, cw)
}

// PDFEndHmtx function as declared in pdf/font.h:99
func PDFEndHmtx(ctx *FzContext, font *PDFFontDesc) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.pdf_font_desc)(unsafe.Pointer(font)), cgoAllocsUnknown
	C.pdf_end_hmtx(cctx, cfont)
}

// PDFEndVmtx function as declared in pdf/font.h:100
func PDFEndVmtx(ctx *FzContext, font *PDFFontDesc) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.pdf_font_desc)(unsafe.Pointer(font)), cgoAllocsUnknown
	C.pdf_end_vmtx(cctx, cfont)
}

// PDFLookupHmtx function as declared in pdf/font.h:101
func PDFLookupHmtx(ctx *FzContext, font *PDFFontDesc, cid int32) PDFHmtx {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.pdf_font_desc)(unsafe.Pointer(font)), cgoAllocsUnknown
	ccid, _ := (C.int)(cid), cgoAllocsUnknown
	__ret := C.pdf_lookup_hmtx(cctx, cfont, ccid)
	__v := *(*PDFHmtx)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLookupVmtx function as declared in pdf/font.h:102
func PDFLookupVmtx(ctx *FzContext, font *PDFFontDesc, cid int32) PDFVmtx {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.pdf_font_desc)(unsafe.Pointer(font)), cgoAllocsUnknown
	ccid, _ := (C.int)(cid), cgoAllocsUnknown
	__ret := C.pdf_lookup_vmtx(cctx, cfont, ccid)
	__v := *(*PDFVmtx)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadToUnicode function as declared in pdf/font.h:104
func PDFLoadToUnicode(ctx *FzContext, doc *PDFDocument, font []PDFFontDesc, strings []string, collection []byte, cmapstm []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cfont, _ := (*C.pdf_font_desc)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&font)).Data)), cgoAllocsUnknown
	cstrings, _ := unpackArgSString(strings)
	ccollection, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&collection)).Data)), cgoAllocsUnknown
	ccmapstm, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cmapstm)).Data)), cgoAllocsUnknown
	C.pdf_load_to_unicode(cctx, cdoc, cfont, cstrings, ccollection, ccmapstm)
	packSString(strings, cstrings)
}

// PDFFontCidToGid function as declared in pdf/font.h:106
func PDFFontCidToGid(ctx *FzContext, fontdesc *PDFFontDesc, cid int32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfontdesc, _ := (*C.pdf_font_desc)(unsafe.Pointer(fontdesc)), cgoAllocsUnknown
	ccid, _ := (C.int)(cid), cgoAllocsUnknown
	__ret := C.pdf_font_cid_to_gid(cctx, cfontdesc, ccid)
	__v := (int32)(__ret)
	return __v
}

// PDFLookupSubstituteFont function as declared in pdf/font.h:108
func PDFLookupSubstituteFont(ctx *FzContext, mono int32, serif int32, bold int32, italic int32, len []int32) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cmono, _ := (C.int)(mono), cgoAllocsUnknown
	cserif, _ := (C.int)(serif), cgoAllocsUnknown
	cbold, _ := (C.int)(bold), cgoAllocsUnknown
	citalic, _ := (C.int)(italic), cgoAllocsUnknown
	clen, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&len)).Data)), cgoAllocsUnknown
	__ret := C.pdf_lookup_substitute_font(cctx, cmono, cserif, cbold, citalic, clen)
	__v := packPUcharString(__ret)
	return __v
}

// PDFLoadType3Font function as declared in pdf/font.h:110
func PDFLoadType3Font(ctx *FzContext, doc *PDFDocument, rdb []PDFObj, obj []PDFObj) *PDFFontDesc {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	crdb, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rdb)).Data)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	__ret := C.pdf_load_type3_font(cctx, cdoc, crdb, cobj)
	__v := *(**PDFFontDesc)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadType3Glyphs function as declared in pdf/font.h:111
func PDFLoadType3Glyphs(ctx *FzContext, doc *PDFDocument, fontdesc []PDFFontDesc, nestedDepth int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cfontdesc, _ := (*C.pdf_font_desc)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&fontdesc)).Data)), cgoAllocsUnknown
	cnestedDepth, _ := (C.int)(nestedDepth), cgoAllocsUnknown
	C.pdf_load_type3_glyphs(cctx, cdoc, cfontdesc, cnestedDepth)
}

// PDFLoadFont function as declared in pdf/font.h:112
func PDFLoadFont(ctx *FzContext, doc *PDFDocument, rdb []PDFObj, obj []PDFObj, nestedDepth int32) *PDFFontDesc {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	crdb, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rdb)).Data)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	cnestedDepth, _ := (C.int)(nestedDepth), cgoAllocsUnknown
	__ret := C.pdf_load_font(cctx, cdoc, crdb, cobj, cnestedDepth)
	__v := *(**PDFFontDesc)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadHailMaryFont function as declared in pdf/font.h:113
func PDFLoadHailMaryFont(ctx *FzContext, doc *PDFDocument) *PDFFontDesc {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_load_hail_mary_font(cctx, cdoc)
	__v := *(**PDFFontDesc)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewFontDesc function as declared in pdf/font.h:115
func PDFNewFontDesc(ctx *FzContext) *PDFFontDesc {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.pdf_new_font_desc(cctx)
	__v := *(**PDFFontDesc)(unsafe.Pointer(&__ret))
	return __v
}

// PDFKeepFont function as declared in pdf/font.h:116
func PDFKeepFont(ctx *FzContext, fontdesc *PDFFontDesc) *PDFFontDesc {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfontdesc, _ := (*C.pdf_font_desc)(unsafe.Pointer(fontdesc)), cgoAllocsUnknown
	__ret := C.pdf_keep_font(cctx, cfontdesc)
	__v := *(**PDFFontDesc)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDropFont function as declared in pdf/font.h:117
func PDFDropFont(ctx *FzContext, font *PDFFontDesc) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, _ := (*C.pdf_font_desc)(unsafe.Pointer(font)), cgoAllocsUnknown
	C.pdf_drop_font(cctx, cfont)
}

// PDFPrintFont function as declared in pdf/font.h:119
func PDFPrintFont(ctx *FzContext, out *FzOutput, fontdesc []PDFFontDesc) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cout, _ := (*C.fz_output)(unsafe.Pointer(out)), cgoAllocsUnknown
	cfontdesc, _ := (*C.pdf_font_desc)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&fontdesc)).Data)), cgoAllocsUnknown
	C.pdf_print_font(cctx, cout, cfontdesc)
}

// PDFMeasureText function as declared in pdf/font.h:121
func PDFMeasureText(ctx *FzContext, fontdesc *PDFFontDesc, buf []byte, len uint, rect []FzRect) *FzRect {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfontdesc, _ := (*C.pdf_font_desc)(unsafe.Pointer(fontdesc)), cgoAllocsUnknown
	cbuf, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buf)).Data)), cgoAllocsUnknown
	clen, _ := (C.size_t)(len), cgoAllocsUnknown
	crect, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rect)).Data)), cgoAllocsUnknown
	__ret := C.pdf_measure_text(cctx, cfontdesc, cbuf, clen, crect)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

// PDFTextStride function as declared in pdf/font.h:122
func PDFTextStride(ctx *FzContext, fontdesc *PDFFontDesc, fontsize float32, buf []byte, len uint, room float32, count []uint) float32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfontdesc, _ := (*C.pdf_font_desc)(unsafe.Pointer(fontdesc)), cgoAllocsUnknown
	cfontsize, _ := (C.float)(fontsize), cgoAllocsUnknown
	cbuf, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buf)).Data)), cgoAllocsUnknown
	clen, _ := (C.size_t)(len), cgoAllocsUnknown
	croom, _ := (C.float)(room), cgoAllocsUnknown
	ccount, _ := (*C.size_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&count)).Data)), cgoAllocsUnknown
	__ret := C.pdf_text_stride(cctx, cfontdesc, cfontsize, cbuf, clen, croom, ccount)
	__v := (float32)(__ret)
	return __v
}

// PDFRunGlyph function as declared in pdf/font.h:124
func PDFRunGlyph(ctx *FzContext, doc *PDFDocument, resources []PDFObj, contents []FzBuffer, dev []FzDevice, ctm []FzMatrix, gstate unsafe.Pointer, nestedDepth int32, defaultCs []FzDefaultColorspaces) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cresources, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&resources)).Data)), cgoAllocsUnknown
	ccontents, _ := (*C.fz_buffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&contents)).Data)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dev)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	cgstate, _ := gstate, cgoAllocsUnknown
	cnestedDepth, _ := (C.int)(nestedDepth), cgoAllocsUnknown
	cdefaultCs, _ := (*C.fz_default_colorspaces)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&defaultCs)).Data)), cgoAllocsUnknown
	C.pdf_run_glyph(cctx, cdoc, cresources, ccontents, cdev, cctm, cgstate, cnestedDepth, cdefaultCs)
}

// PDFAddSimpleFont function as declared in pdf/font.h:126
func PDFAddSimpleFont(ctx *FzContext, doc *PDFDocument, font []FzFont) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&font)).Data)), cgoAllocsUnknown
	__ret := C.pdf_add_simple_font(cctx, cdoc, cfont)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFAddCidFont function as declared in pdf/font.h:127
func PDFAddCidFont(ctx *FzContext, doc *PDFDocument, font []FzFont) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cfont, _ := (*C.fz_font)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&font)).Data)), cgoAllocsUnknown
	__ret := C.pdf_add_cid_font(cctx, cdoc, cfont)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFFontWritingSupported function as declared in pdf/font.h:129
func PDFFontWritingSupported(font *FzFont) int32 {
	cfont, _ := (*C.fz_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	__ret := C.pdf_font_writing_supported(cfont)
	__v := (int32)(__ret)
	return __v
}

// PDFNewCmap function as declared in pdf/cmap.h:67
func PDFNewCmap(ctx *FzContext) *PDFCmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.pdf_new_cmap(cctx)
	__v := *(**PDFCmap)(unsafe.Pointer(&__ret))
	return __v
}

// PDFKeepCmap function as declared in pdf/cmap.h:68
func PDFKeepCmap(ctx *FzContext, cmap *PDFCmap) *PDFCmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccmap, _ := (*C.pdf_cmap)(unsafe.Pointer(cmap)), cgoAllocsUnknown
	__ret := C.pdf_keep_cmap(cctx, ccmap)
	__v := *(**PDFCmap)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDropCmap function as declared in pdf/cmap.h:69
func PDFDropCmap(ctx *FzContext, cmap *PDFCmap) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccmap, _ := (*C.pdf_cmap)(unsafe.Pointer(cmap)), cgoAllocsUnknown
	C.pdf_drop_cmap(cctx, ccmap)
}

// PDFDropCmapImp function as declared in pdf/cmap.h:70
func PDFDropCmapImp(ctx *FzContext, cmap *FzStorable) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccmap, _ := (*C.fz_storable)(unsafe.Pointer(cmap)), cgoAllocsUnknown
	C.pdf_drop_cmap_imp(cctx, ccmap)
}

// PDFCmapSize function as declared in pdf/cmap.h:71
func PDFCmapSize(ctx *FzContext, cmap *PDFCmap) uint {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccmap, _ := (*C.pdf_cmap)(unsafe.Pointer(cmap)), cgoAllocsUnknown
	__ret := C.pdf_cmap_size(cctx, ccmap)
	__v := (uint)(__ret)
	return __v
}

// PDFCmapWmode function as declared in pdf/cmap.h:73
func PDFCmapWmode(ctx *FzContext, cmap *PDFCmap) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccmap, _ := (*C.pdf_cmap)(unsafe.Pointer(cmap)), cgoAllocsUnknown
	__ret := C.pdf_cmap_wmode(cctx, ccmap)
	__v := (int32)(__ret)
	return __v
}

// PDFSetCmapWmode function as declared in pdf/cmap.h:74
func PDFSetCmapWmode(ctx *FzContext, cmap *PDFCmap, wmode int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccmap, _ := (*C.pdf_cmap)(unsafe.Pointer(cmap)), cgoAllocsUnknown
	cwmode, _ := (C.int)(wmode), cgoAllocsUnknown
	C.pdf_set_cmap_wmode(cctx, ccmap, cwmode)
}

// PDFSetUsecmap function as declared in pdf/cmap.h:75
func PDFSetUsecmap(ctx *FzContext, cmap *PDFCmap, usecmap []PDFCmap) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccmap, _ := (*C.pdf_cmap)(unsafe.Pointer(cmap)), cgoAllocsUnknown
	cusecmap, _ := (*C.pdf_cmap)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&usecmap)).Data)), cgoAllocsUnknown
	C.pdf_set_usecmap(cctx, ccmap, cusecmap)
}

// PDFAddCodespace function as declared in pdf/cmap.h:77
func PDFAddCodespace(ctx *FzContext, cmap *PDFCmap, low uint32, high uint32, n int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccmap, _ := (*C.pdf_cmap)(unsafe.Pointer(cmap)), cgoAllocsUnknown
	clow, _ := (C.uint)(low), cgoAllocsUnknown
	chigh, _ := (C.uint)(high), cgoAllocsUnknown
	cn, _ := (C.int)(n), cgoAllocsUnknown
	C.pdf_add_codespace(cctx, ccmap, clow, chigh, cn)
}

// PDFMapRangeToRange function as declared in pdf/cmap.h:78
func PDFMapRangeToRange(ctx *FzContext, cmap *PDFCmap, srclo uint32, srchi uint32, dstlo int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccmap, _ := (*C.pdf_cmap)(unsafe.Pointer(cmap)), cgoAllocsUnknown
	csrclo, _ := (C.uint)(srclo), cgoAllocsUnknown
	csrchi, _ := (C.uint)(srchi), cgoAllocsUnknown
	cdstlo, _ := (C.int)(dstlo), cgoAllocsUnknown
	C.pdf_map_range_to_range(cctx, ccmap, csrclo, csrchi, cdstlo)
}

// PDFMapOneToMany function as declared in pdf/cmap.h:79
func PDFMapOneToMany(ctx *FzContext, cmap *PDFCmap, one uint32, many []int32, len int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccmap, _ := (*C.pdf_cmap)(unsafe.Pointer(cmap)), cgoAllocsUnknown
	cone, _ := (C.uint)(one), cgoAllocsUnknown
	cmany, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&many)).Data)), cgoAllocsUnknown
	clen, _ := (C.int)(len), cgoAllocsUnknown
	C.pdf_map_one_to_many(cctx, ccmap, cone, cmany, clen)
}

// PDFSortCmap function as declared in pdf/cmap.h:80
func PDFSortCmap(ctx *FzContext, cmap *PDFCmap) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccmap, _ := (*C.pdf_cmap)(unsafe.Pointer(cmap)), cgoAllocsUnknown
	C.pdf_sort_cmap(cctx, ccmap)
}

// PDFLookupCmap function as declared in pdf/cmap.h:82
func PDFLookupCmap(cmap *PDFCmap, cpt uint32) int32 {
	ccmap, _ := (*C.pdf_cmap)(unsafe.Pointer(cmap)), cgoAllocsUnknown
	ccpt, _ := (C.uint)(cpt), cgoAllocsUnknown
	__ret := C.pdf_lookup_cmap(ccmap, ccpt)
	__v := (int32)(__ret)
	return __v
}

// PDFLookupCmapFull function as declared in pdf/cmap.h:83
func PDFLookupCmapFull(cmap *PDFCmap, cpt uint32, out []int32) int32 {
	ccmap, _ := (*C.pdf_cmap)(unsafe.Pointer(cmap)), cgoAllocsUnknown
	ccpt, _ := (C.uint)(cpt), cgoAllocsUnknown
	cout, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&out)).Data)), cgoAllocsUnknown
	__ret := C.pdf_lookup_cmap_full(ccmap, ccpt, cout)
	__v := (int32)(__ret)
	return __v
}

// PDFDecodeCmap function as declared in pdf/cmap.h:84
func PDFDecodeCmap(cmap *PDFCmap, s *byte, e []byte, cpt []uint32) int32 {
	ccmap, _ := (*C.pdf_cmap)(unsafe.Pointer(cmap)), cgoAllocsUnknown
	cs, _ := (*C.uchar)(unsafe.Pointer(s)), cgoAllocsUnknown
	ce, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&e)).Data)), cgoAllocsUnknown
	ccpt, _ := (*C.uint)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cpt)).Data)), cgoAllocsUnknown
	__ret := C.pdf_decode_cmap(ccmap, cs, ce, ccpt)
	__v := (int32)(__ret)
	return __v
}

// PDFNewIdentityCmap function as declared in pdf/cmap.h:86
func PDFNewIdentityCmap(ctx *FzContext, wmode int32, bytes int32) *PDFCmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cwmode, _ := (C.int)(wmode), cgoAllocsUnknown
	cbytes, _ := (C.int)(bytes), cgoAllocsUnknown
	__ret := C.pdf_new_identity_cmap(cctx, cwmode, cbytes)
	__v := *(**PDFCmap)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadCmap function as declared in pdf/cmap.h:87
func PDFLoadCmap(ctx *FzContext, file *FzStream) *PDFCmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfile, _ := (*C.fz_stream)(unsafe.Pointer(file)), cgoAllocsUnknown
	__ret := C.pdf_load_cmap(cctx, cfile)
	__v := *(**PDFCmap)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadSystemCmap function as declared in pdf/cmap.h:88
func PDFLoadSystemCmap(ctx *FzContext, name string) *PDFCmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	__ret := C.pdf_load_system_cmap(cctx, cname)
	runtime.KeepAlive(name)
	__v := *(**PDFCmap)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadBuiltinCmap function as declared in pdf/cmap.h:89
func PDFLoadBuiltinCmap(ctx *FzContext, name string) *PDFCmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	__ret := C.pdf_load_builtin_cmap(cctx, cname)
	runtime.KeepAlive(name)
	__v := *(**PDFCmap)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadEmbeddedCmap function as declared in pdf/cmap.h:90
func PDFLoadEmbeddedCmap(ctx *FzContext, doc *PDFDocument, ref []PDFObj) *PDFCmap {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cref, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ref)).Data)), cgoAllocsUnknown
	__ret := C.pdf_load_embedded_cmap(cctx, cdoc, cref)
	__v := *(**PDFCmap)(unsafe.Pointer(&__ret))
	return __v
}

// PDFStoreItem function as declared in pdf/resource.h:7
func PDFStoreItem(ctx *FzContext, key *PDFObj, val unsafe.Pointer, itemsize uint) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ckey, _ := (*C.pdf_obj)(unsafe.Pointer(key)), cgoAllocsUnknown
	cval, _ := val, cgoAllocsUnknown
	citemsize, _ := (C.size_t)(itemsize), cgoAllocsUnknown
	C.pdf_store_item(cctx, ckey, cval, citemsize)
}

// PDFEmptyStore function as declared in pdf/resource.h:10
func PDFEmptyStore(ctx *FzContext, doc *PDFDocument) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	C.pdf_empty_store(cctx, cdoc)
}

// PDFFindFontResource function as declared in pdf/resource.h:20
func PDFFindFontResource(ctx *FzContext, doc *PDFDocument, item []FzBuffer, md5 *[16]byte) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	citem, _ := (*C.fz_buffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&item)).Data)), cgoAllocsUnknown
	cmd5, _ := *(**C.uchar)(unsafe.Pointer(&md5)), cgoAllocsUnknown
	__ret := C.pdf_find_font_resource(cctx, cdoc, citem, cmd5)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFInsertFontResource function as declared in pdf/resource.h:21
func PDFInsertFontResource(ctx *FzContext, doc *PDFDocument, md5 *[16]byte, obj []PDFObj) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cmd5, _ := *(**C.uchar)(unsafe.Pointer(&md5)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	__ret := C.pdf_insert_font_resource(cctx, cdoc, cmd5, cobj)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFFindImageResource function as declared in pdf/resource.h:22
func PDFFindImageResource(ctx *FzContext, doc *PDFDocument, item []FzImage, md5 *[16]byte) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	citem, _ := (*C.fz_image)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&item)).Data)), cgoAllocsUnknown
	cmd5, _ := *(**C.uchar)(unsafe.Pointer(&md5)), cgoAllocsUnknown
	__ret := C.pdf_find_image_resource(cctx, cdoc, citem, cmd5)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFInsertImageResource function as declared in pdf/resource.h:23
func PDFInsertImageResource(ctx *FzContext, doc *PDFDocument, md5 *[16]byte, obj []PDFObj) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cmd5, _ := *(**C.uchar)(unsafe.Pointer(&md5)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	__ret := C.pdf_insert_image_resource(cctx, cdoc, cmd5, cobj)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDropResourceTables function as declared in pdf/resource.h:24
func PDFDropResourceTables(ctx *FzContext, doc *PDFDocument) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	C.pdf_drop_resource_tables(cctx, cdoc)
}

// PDFEvalFunction function as declared in pdf/resource.h:32
func PDFEvalFunction(ctx *FzContext, _func *PDFFunction, in []float32, inlen int32, out []float32, outlen int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	c_func, _ := (*C.pdf_function)(unsafe.Pointer(_func)), cgoAllocsUnknown
	cin, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&in)).Data)), cgoAllocsUnknown
	cinlen, _ := (C.int)(inlen), cgoAllocsUnknown
	cout, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&out)).Data)), cgoAllocsUnknown
	coutlen, _ := (C.int)(outlen), cgoAllocsUnknown
	C.pdf_eval_function(cctx, c_func, cin, cinlen, cout, coutlen)
}

// PDFKeepFunction function as declared in pdf/resource.h:33
func PDFKeepFunction(ctx *FzContext, _func *PDFFunction) *PDFFunction {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	c_func, _ := (*C.pdf_function)(unsafe.Pointer(_func)), cgoAllocsUnknown
	__ret := C.pdf_keep_function(cctx, c_func)
	__v := *(**PDFFunction)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDropFunction function as declared in pdf/resource.h:34
func PDFDropFunction(ctx *FzContext, _func *PDFFunction) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	c_func, _ := (*C.pdf_function)(unsafe.Pointer(_func)), cgoAllocsUnknown
	C.pdf_drop_function(cctx, c_func)
}

// PDFFunctionSize function as declared in pdf/resource.h:35
func PDFFunctionSize(ctx *FzContext, _func *PDFFunction) uint {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	c_func, _ := (*C.pdf_function)(unsafe.Pointer(_func)), cgoAllocsUnknown
	__ret := C.pdf_function_size(cctx, c_func)
	__v := (uint)(__ret)
	return __v
}

// PDFLoadFunction function as declared in pdf/resource.h:36
func PDFLoadFunction(ctx *FzContext, ref *PDFObj, in int32, out int32) *PDFFunction {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cref, _ := (*C.pdf_obj)(unsafe.Pointer(ref)), cgoAllocsUnknown
	cin, _ := (C.int)(in), cgoAllocsUnknown
	cout, _ := (C.int)(out), cgoAllocsUnknown
	__ret := C.pdf_load_function(cctx, cref, cin, cout)
	__v := *(**PDFFunction)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDocumentOutputIntent function as declared in pdf/resource.h:38
func PDFDocumentOutputIntent(ctx *FzContext, doc *PDFDocument) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_document_output_intent(cctx, cdoc)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadColorspace function as declared in pdf/resource.h:39
func PDFLoadColorspace(ctx *FzContext, obj *PDFObj) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer(obj)), cgoAllocsUnknown
	__ret := C.pdf_load_colorspace(cctx, cobj)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// PDFIsTintColorspace function as declared in pdf/resource.h:40
func PDFIsTintColorspace(ctx *FzContext, cs *FzColorspace) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccs, _ := (*C.fz_colorspace)(unsafe.Pointer(cs)), cgoAllocsUnknown
	__ret := C.pdf_is_tint_colorspace(cctx, ccs)
	__v := (int32)(__ret)
	return __v
}

// PDFLoadShading function as declared in pdf/resource.h:42
func PDFLoadShading(ctx *FzContext, doc *PDFDocument, obj []PDFObj) *FzShade {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	__ret := C.pdf_load_shading(cctx, cdoc, cobj)
	__v := *(**FzShade)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadInlineImage function as declared in pdf/resource.h:44
func PDFLoadInlineImage(ctx *FzContext, doc *PDFDocument, rdb []PDFObj, dict []PDFObj, file []FzStream) *FzImage {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	crdb, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rdb)).Data)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dict)).Data)), cgoAllocsUnknown
	cfile, _ := (*C.fz_stream)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&file)).Data)), cgoAllocsUnknown
	__ret := C.pdf_load_inline_image(cctx, cdoc, crdb, cdict, cfile)
	__v := *(**FzImage)(unsafe.Pointer(&__ret))
	return __v
}

// PDFIsJpxImage function as declared in pdf/resource.h:45
func PDFIsJpxImage(ctx *FzContext, dict *PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdict, _ := (*C.pdf_obj)(unsafe.Pointer(dict)), cgoAllocsUnknown
	__ret := C.pdf_is_jpx_image(cctx, cdict)
	__v := (int32)(__ret)
	return __v
}

// PDFLoadImage function as declared in pdf/resource.h:47
func PDFLoadImage(ctx *FzContext, doc *PDFDocument, obj []PDFObj) *FzImage {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	__ret := C.pdf_load_image(cctx, cdoc, cobj)
	__v := *(**FzImage)(unsafe.Pointer(&__ret))
	return __v
}

// PDFAddImage function as declared in pdf/resource.h:49
func PDFAddImage(ctx *FzContext, doc *PDFDocument, image []FzImage, mask int32) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cimage, _ := (*C.fz_image)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&image)).Data)), cgoAllocsUnknown
	cmask, _ := (C.int)(mask), cgoAllocsUnknown
	__ret := C.pdf_add_image(cctx, cdoc, cimage, cmask)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadPattern function as declared in pdf/resource.h:71
func PDFLoadPattern(ctx *FzContext, doc *PDFDocument, obj []PDFObj) *PDFPattern {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	__ret := C.pdf_load_pattern(cctx, cdoc, cobj)
	__v := *(**PDFPattern)(unsafe.Pointer(&__ret))
	return __v
}

// PDFKeepPattern function as declared in pdf/resource.h:72
func PDFKeepPattern(ctx *FzContext, pat *PDFPattern) *PDFPattern {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpat, _ := (*C.pdf_pattern)(unsafe.Pointer(pat)), cgoAllocsUnknown
	__ret := C.pdf_keep_pattern(cctx, cpat)
	__v := *(**PDFPattern)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDropPattern function as declared in pdf/resource.h:73
func PDFDropPattern(ctx *FzContext, pat *PDFPattern) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpat, _ := (*C.pdf_pattern)(unsafe.Pointer(pat)), cgoAllocsUnknown
	C.pdf_drop_pattern(cctx, cpat)
}

// PDFLoadXobject function as declared in pdf/resource.h:88
func PDFLoadXobject(ctx *FzContext, doc *PDFDocument, obj []PDFObj) *PDFXobject {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	__ret := C.pdf_load_xobject(cctx, cdoc, cobj)
	__v := *(**PDFXobject)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNewXobject function as declared in pdf/resource.h:89
func PDFNewXobject(ctx *FzContext, doc *PDFDocument, bbox []FzRect, mat []FzMatrix) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cbbox, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&bbox)).Data)), cgoAllocsUnknown
	cmat, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&mat)).Data)), cgoAllocsUnknown
	__ret := C.pdf_new_xobject(cctx, cdoc, cbbox, cmat)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFKeepXobject function as declared in pdf/resource.h:90
func PDFKeepXobject(ctx *FzContext, xobj *PDFXobject) *PDFXobject {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cxobj, _ := (*C.pdf_xobject)(unsafe.Pointer(xobj)), cgoAllocsUnknown
	__ret := C.pdf_keep_xobject(cctx, cxobj)
	__v := *(**PDFXobject)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDropXobject function as declared in pdf/resource.h:91
func PDFDropXobject(ctx *FzContext, xobj *PDFXobject) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cxobj, _ := (*C.pdf_xobject)(unsafe.Pointer(xobj)), cgoAllocsUnknown
	C.pdf_drop_xobject(cctx, cxobj)
}

// PDFUpdateXobjectContents function as declared in pdf/resource.h:92
func PDFUpdateXobjectContents(ctx *FzContext, doc *PDFDocument, form []PDFXobject, buffer []FzBuffer) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cform, _ := (*C.pdf_xobject)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&form)).Data)), cgoAllocsUnknown
	cbuffer, _ := (*C.fz_buffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buffer)).Data)), cgoAllocsUnknown
	C.pdf_update_xobject_contents(cctx, cdoc, cform, cbuffer)
}

// PDFUpdateAppearance function as declared in pdf/resource.h:94
func PDFUpdateAppearance(ctx *FzContext, doc *PDFDocument, annot []PDFAnnot) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&annot)).Data)), cgoAllocsUnknown
	C.pdf_update_appearance(cctx, cdoc, cannot)
}

// PDFXobjectResources function as declared in pdf/resource.h:96
func PDFXobjectResources(ctx *FzContext, xobj *PDFXobject) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cxobj, _ := (*C.pdf_xobject)(unsafe.Pointer(xobj)), cgoAllocsUnknown
	__ret := C.pdf_xobject_resources(cctx, cxobj)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFXobjectBbox function as declared in pdf/resource.h:97
func PDFXobjectBbox(ctx *FzContext, xobj *PDFXobject, bbox []FzRect) *FzRect {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cxobj, _ := (*C.pdf_xobject)(unsafe.Pointer(xobj)), cgoAllocsUnknown
	cbbox, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&bbox)).Data)), cgoAllocsUnknown
	__ret := C.pdf_xobject_bbox(cctx, cxobj, cbbox)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

// PDFXobjectMatrix function as declared in pdf/resource.h:98
func PDFXobjectMatrix(ctx *FzContext, xobj *PDFXobject, matrix []FzMatrix) *FzMatrix {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cxobj, _ := (*C.pdf_xobject)(unsafe.Pointer(xobj)), cgoAllocsUnknown
	cmatrix, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&matrix)).Data)), cgoAllocsUnknown
	__ret := C.pdf_xobject_matrix(cctx, cxobj, cmatrix)
	__v := *(**FzMatrix)(unsafe.Pointer(&__ret))
	return __v
}

// PDFXobjectIsolated function as declared in pdf/resource.h:99
func PDFXobjectIsolated(ctx *FzContext, xobj *PDFXobject) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cxobj, _ := (*C.pdf_xobject)(unsafe.Pointer(xobj)), cgoAllocsUnknown
	__ret := C.pdf_xobject_isolated(cctx, cxobj)
	__v := (int32)(__ret)
	return __v
}

// PDFXobjectKnockout function as declared in pdf/resource.h:100
func PDFXobjectKnockout(ctx *FzContext, xobj *PDFXobject) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cxobj, _ := (*C.pdf_xobject)(unsafe.Pointer(xobj)), cgoAllocsUnknown
	__ret := C.pdf_xobject_knockout(cctx, cxobj)
	__v := (int32)(__ret)
	return __v
}

// PDFXobjectTransparency function as declared in pdf/resource.h:101
func PDFXobjectTransparency(ctx *FzContext, xobj *PDFXobject) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cxobj, _ := (*C.pdf_xobject)(unsafe.Pointer(xobj)), cgoAllocsUnknown
	__ret := C.pdf_xobject_transparency(cctx, cxobj)
	__v := (int32)(__ret)
	return __v
}

// PDFXobjectColorspace function as declared in pdf/resource.h:102
func PDFXobjectColorspace(ctx *FzContext, xobj *PDFXobject) *FzColorspace {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cxobj, _ := (*C.pdf_xobject)(unsafe.Pointer(xobj)), cgoAllocsUnknown
	__ret := C.pdf_xobject_colorspace(cctx, cxobj)
	__v := *(**FzColorspace)(unsafe.Pointer(&__ret))
	return __v
}

// PDFStringFromAnnotType function as declared in pdf/annot.h:34
func PDFStringFromAnnotType(ctx *FzContext, kind FzAnnotType) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ckind, _ := (C.fz_annot_type)(kind), cgoAllocsUnknown
	__ret := C.pdf_string_from_annot_type(cctx, ckind)
	__v := packPCharString(__ret)
	return __v
}

// PDFAnnotTypeFromString function as declared in pdf/annot.h:35
func PDFAnnotTypeFromString(ctx *FzContext, subtype string) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	subtype = safeString(subtype)
	csubtype, _ := unpackPCharString(subtype)
	__ret := C.pdf_annot_type_from_string(cctx, csubtype)
	runtime.KeepAlive(subtype)
	__v := (int32)(__ret)
	return __v
}

// PDFFirstAnnot function as declared in pdf/annot.h:68
func PDFFirstAnnot(ctx *FzContext, page *PDFPage) *PDFAnnot {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	__ret := C.pdf_first_annot(cctx, cpage)
	__v := *(**PDFAnnot)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNextAnnot function as declared in pdf/annot.h:73
func PDFNextAnnot(ctx *FzContext, annot *PDFAnnot) *PDFAnnot {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.pdf_next_annot(cctx, cannot)
	__v := *(**PDFAnnot)(unsafe.Pointer(&__ret))
	return __v
}

// PDFBoundAnnot function as declared in pdf/annot.h:78
func PDFBoundAnnot(ctx *FzContext, annot *PDFAnnot, rect []FzRect) *FzRect {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	crect, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rect)).Data)), cgoAllocsUnknown
	__ret := C.pdf_bound_annot(cctx, cannot, crect)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

// PDFAnnotType function as declared in pdf/annot.h:83
func PDFAnnotType(ctx *FzContext, annot *PDFAnnot) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.pdf_annot_type(cctx, cannot)
	__v := (int32)(__ret)
	return __v
}

// PDFRunAnnot function as declared in pdf/annot.h:97
func PDFRunAnnot(ctx *FzContext, annot *PDFAnnot, dev []FzDevice, ctm []FzMatrix, cookie []FzCookie) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	cdev, _ := (*C.fz_device)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dev)).Data)), cgoAllocsUnknown
	cctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ctm)).Data)), cgoAllocsUnknown
	ccookie, _ := (*C.fz_cookie)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cookie)).Data)), cgoAllocsUnknown
	C.pdf_run_annot(cctx, cannot, cdev, cctm, ccookie)
}

// PDFParseFileSpec function as declared in pdf/annot.h:113
func PDFParseFileSpec(ctx *FzContext, doc *PDFDocument, fileSpec []PDFObj, dest []PDFObj) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cfileSpec, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&fileSpec)).Data)), cgoAllocsUnknown
	cdest, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dest)).Data)), cgoAllocsUnknown
	__ret := C.pdf_parse_file_spec(cctx, cdoc, cfileSpec, cdest)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// PDFParseLinkDest function as declared in pdf/annot.h:114
func PDFParseLinkDest(ctx *FzContext, doc *PDFDocument, obj []PDFObj) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	__ret := C.pdf_parse_link_dest(cctx, cdoc, cobj)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// PDFParseLinkAction function as declared in pdf/annot.h:115
func PDFParseLinkAction(ctx *FzContext, doc *PDFDocument, obj []PDFObj, pagenum int32) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	cpagenum, _ := (C.int)(pagenum), cgoAllocsUnknown
	__ret := C.pdf_parse_link_action(cctx, cdoc, cobj, cpagenum)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLookupDest function as declared in pdf/annot.h:116
func PDFLookupDest(ctx *FzContext, doc *PDFDocument, needle []PDFObj) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cneedle, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&needle)).Data)), cgoAllocsUnknown
	__ret := C.pdf_lookup_dest(cctx, cdoc, cneedle)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLookupName function as declared in pdf/annot.h:117
func PDFLookupName(ctx *FzContext, doc *PDFDocument, which []PDFObj, needle []PDFObj) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cwhich, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&which)).Data)), cgoAllocsUnknown
	cneedle, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&needle)).Data)), cgoAllocsUnknown
	__ret := C.pdf_lookup_name(cctx, cdoc, cwhich, cneedle)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLoadNameTree function as declared in pdf/annot.h:118
func PDFLoadNameTree(ctx *FzContext, doc *PDFDocument, which []PDFObj) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cwhich, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&which)).Data)), cgoAllocsUnknown
	__ret := C.pdf_load_name_tree(cctx, cdoc, cwhich)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFResolveLink function as declared in pdf/annot.h:120
func PDFResolveLink(ctx *FzContext, doc *PDFDocument, uri string, xp []float32, yp []float32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	uri = safeString(uri)
	curi, _ := unpackPCharString(uri)
	cxp, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&xp)).Data)), cgoAllocsUnknown
	cyp, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&yp)).Data)), cgoAllocsUnknown
	__ret := C.pdf_resolve_link(cctx, cdoc, curi, cxp, cyp)
	runtime.KeepAlive(uri)
	__v := (int32)(__ret)
	return __v
}

// PDFLoadLinkAnnots function as declared in pdf/annot.h:121
func PDFLoadLinkAnnots(ctx *FzContext, arg1 *PDFDocument, annots []PDFObj, pagenum int32, pageCtm []FzMatrix) *FzLink {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carg1, _ := (*C.pdf_document)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	cannots, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&annots)).Data)), cgoAllocsUnknown
	cpagenum, _ := (C.int)(pagenum), cgoAllocsUnknown
	cpageCtm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&pageCtm)).Data)), cgoAllocsUnknown
	__ret := C.pdf_load_link_annots(cctx, carg1, cannots, cpagenum, cpageCtm)
	__v := *(**FzLink)(unsafe.Pointer(&__ret))
	return __v
}

// PDFAnnotTransform function as declared in pdf/annot.h:123
func PDFAnnotTransform(ctx *FzContext, annot *PDFAnnot, annotCtm []FzMatrix) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	cannotCtm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&annotCtm)).Data)), cgoAllocsUnknown
	C.pdf_annot_transform(cctx, cannot, cannotCtm)
}

// PDFLoadAnnots function as declared in pdf/annot.h:124
func PDFLoadAnnots(ctx *FzContext, page *PDFPage, annots []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	cannots, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&annots)).Data)), cgoAllocsUnknown
	C.pdf_load_annots(cctx, cpage, cannots)
}

// PDFUpdateAnnot function as declared in pdf/annot.h:125
func PDFUpdateAnnot(ctx *FzContext, annot *PDFAnnot) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	C.pdf_update_annot(cctx, cannot)
}

// PDFDropAnnots function as declared in pdf/annot.h:126
func PDFDropAnnots(ctx *FzContext, annotList *PDFAnnot) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannotList, _ := (*C.pdf_annot)(unsafe.Pointer(annotList)), cgoAllocsUnknown
	C.pdf_drop_annots(cctx, cannotList)
}

// PDFCreateAnnot function as declared in pdf/annot.h:133
func PDFCreateAnnot(ctx *FzContext, page *PDFPage, kind FzAnnotType) *PDFAnnot {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	ckind, _ := (C.fz_annot_type)(kind), cgoAllocsUnknown
	__ret := C.pdf_create_annot(cctx, cpage, ckind)
	__v := *(**PDFAnnot)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDeleteAnnot function as declared in pdf/annot.h:138
func PDFDeleteAnnot(ctx *FzContext, page *PDFPage, annot []PDFAnnot) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&annot)).Data)), cgoAllocsUnknown
	C.pdf_delete_annot(cctx, cpage, cannot)
}

// PDFAnnotHasInkList function as declared in pdf/annot.h:140
func PDFAnnotHasInkList(ctx *FzContext, annot *PDFAnnot) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.pdf_annot_has_ink_list(cctx, cannot)
	__v := (int32)(__ret)
	return __v
}

// PDFAnnotHasQuadPoints function as declared in pdf/annot.h:141
func PDFAnnotHasQuadPoints(ctx *FzContext, annot *PDFAnnot) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.pdf_annot_has_quad_points(cctx, cannot)
	__v := (int32)(__ret)
	return __v
}

// PDFAnnotHasVertices function as declared in pdf/annot.h:142
func PDFAnnotHasVertices(ctx *FzContext, annot *PDFAnnot) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.pdf_annot_has_vertices(cctx, cannot)
	__v := (int32)(__ret)
	return __v
}

// PDFAnnotHasInteriorColor function as declared in pdf/annot.h:143
func PDFAnnotHasInteriorColor(ctx *FzContext, annot *PDFAnnot) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.pdf_annot_has_interior_color(cctx, cannot)
	__v := (int32)(__ret)
	return __v
}

// PDFAnnotHasLineEndingStyles function as declared in pdf/annot.h:144
func PDFAnnotHasLineEndingStyles(ctx *FzContext, annot *PDFAnnot) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.pdf_annot_has_line_ending_styles(cctx, cannot)
	__v := (int32)(__ret)
	return __v
}

// PDFAnnotHasIconName function as declared in pdf/annot.h:145
func PDFAnnotHasIconName(ctx *FzContext, annot *PDFAnnot) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.pdf_annot_has_icon_name(cctx, cannot)
	__v := (int32)(__ret)
	return __v
}

// PDFAnnotHasOpen function as declared in pdf/annot.h:146
func PDFAnnotHasOpen(ctx *FzContext, annot *PDFAnnot) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.pdf_annot_has_open(cctx, cannot)
	__v := (int32)(__ret)
	return __v
}

// PDFAnnotHasAuthor function as declared in pdf/annot.h:147
func PDFAnnotHasAuthor(ctx *FzContext, annot *PDFAnnot) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.pdf_annot_has_author(cctx, cannot)
	__v := (int32)(__ret)
	return __v
}

// PDFAnnotFlags function as declared in pdf/annot.h:149
func PDFAnnotFlags(ctx *FzContext, annot *PDFAnnot) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.pdf_annot_flags(cctx, cannot)
	__v := (int32)(__ret)
	return __v
}

// PDFAnnotRect function as declared in pdf/annot.h:150
func PDFAnnotRect(ctx *FzContext, annot *PDFAnnot, rect []FzRect) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	crect, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rect)).Data)), cgoAllocsUnknown
	C.pdf_annot_rect(cctx, cannot, crect)
}

// PDFAnnotBorder function as declared in pdf/annot.h:151
func PDFAnnotBorder(ctx *FzContext, annot *PDFAnnot) float32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.pdf_annot_border(cctx, cannot)
	__v := (float32)(__ret)
	return __v
}

// PDFAnnotColor function as declared in pdf/annot.h:152
func PDFAnnotColor(ctx *FzContext, annot *PDFAnnot, n []int32, color *[4]float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	cn, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&n)).Data)), cgoAllocsUnknown
	ccolor, _ := *(**C.float)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.pdf_annot_color(cctx, cannot, cn, ccolor)
}

// PDFAnnotInteriorColor function as declared in pdf/annot.h:153
func PDFAnnotInteriorColor(ctx *FzContext, annot *PDFAnnot, n []int32, color *[4]float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	cn, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&n)).Data)), cgoAllocsUnknown
	ccolor, _ := *(**C.float)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.pdf_annot_interior_color(cctx, cannot, cn, ccolor)
}

// PDFAnnotQuadPointCount function as declared in pdf/annot.h:155
func PDFAnnotQuadPointCount(ctx *FzContext, annot *PDFAnnot) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.pdf_annot_quad_point_count(cctx, cannot)
	__v := (int32)(__ret)
	return __v
}

// PDFAnnotQuadPoint function as declared in pdf/annot.h:156
func PDFAnnotQuadPoint(ctx *FzContext, annot *PDFAnnot, i int32, qp *[8]float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	ci, _ := (C.int)(i), cgoAllocsUnknown
	cqp, _ := *(**C.float)(unsafe.Pointer(&qp)), cgoAllocsUnknown
	C.pdf_annot_quad_point(cctx, cannot, ci, cqp)
}

// PDFAnnotInkListCount function as declared in pdf/annot.h:158
func PDFAnnotInkListCount(ctx *FzContext, annot *PDFAnnot) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.pdf_annot_ink_list_count(cctx, cannot)
	__v := (int32)(__ret)
	return __v
}

// PDFAnnotInkListStrokeCount function as declared in pdf/annot.h:159
func PDFAnnotInkListStrokeCount(ctx *FzContext, annot *PDFAnnot, i int32) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	ci, _ := (C.int)(i), cgoAllocsUnknown
	__ret := C.pdf_annot_ink_list_stroke_count(cctx, cannot, ci)
	__v := (int32)(__ret)
	return __v
}

// PDFAnnotInkListStrokeVertex function as declared in pdf/annot.h:160
func PDFAnnotInkListStrokeVertex(ctx *FzContext, annot *PDFAnnot, i int32, k int32, v *[2]float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	ci, _ := (C.int)(i), cgoAllocsUnknown
	ck, _ := (C.int)(k), cgoAllocsUnknown
	cv, _ := *(**C.float)(unsafe.Pointer(&v)), cgoAllocsUnknown
	C.pdf_annot_ink_list_stroke_vertex(cctx, cannot, ci, ck, cv)
}

// PDFSetAnnotFlags function as declared in pdf/annot.h:162
func PDFSetAnnotFlags(ctx *FzContext, annot *PDFAnnot, flags int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	cflags, _ := (C.int)(flags), cgoAllocsUnknown
	C.pdf_set_annot_flags(cctx, cannot, cflags)
}

// PDFSetAnnotRect function as declared in pdf/annot.h:163
func PDFSetAnnotRect(ctx *FzContext, annot *PDFAnnot, rect []FzRect) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	crect, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rect)).Data)), cgoAllocsUnknown
	C.pdf_set_annot_rect(cctx, cannot, crect)
}

// PDFSetAnnotBorder function as declared in pdf/annot.h:164
func PDFSetAnnotBorder(ctx *FzContext, annot *PDFAnnot, width float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	cwidth, _ := (C.float)(width), cgoAllocsUnknown
	C.pdf_set_annot_border(cctx, cannot, cwidth)
}

// PDFSetAnnotColor function as declared in pdf/annot.h:165
func PDFSetAnnotColor(ctx *FzContext, annot *PDFAnnot, n int32, color *[4]float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	cn, _ := (C.int)(n), cgoAllocsUnknown
	ccolor, _ := *(**C.float)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.pdf_set_annot_color(cctx, cannot, cn, ccolor)
}

// PDFSetAnnotInteriorColor function as declared in pdf/annot.h:166
func PDFSetAnnotInteriorColor(ctx *FzContext, annot *PDFAnnot, n int32, color *[4]float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	cn, _ := (C.int)(n), cgoAllocsUnknown
	ccolor, _ := *(**C.float)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.pdf_set_annot_interior_color(cctx, cannot, cn, ccolor)
}

// PDFSetAnnotQuadPoints function as declared in pdf/annot.h:167
func PDFSetAnnotQuadPoints(ctx *FzContext, annot *PDFAnnot, n int32, v []float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	cn, _ := (C.int)(n), cgoAllocsUnknown
	cv, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&v)).Data)), cgoAllocsUnknown
	C.pdf_set_annot_quad_points(cctx, cannot, cn, cv)
}

// PDFSetAnnotInkList function as declared in pdf/annot.h:168
func PDFSetAnnotInkList(ctx *FzContext, annot *PDFAnnot, n int32, count []int32, v []float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	cn, _ := (C.int)(n), cgoAllocsUnknown
	ccount, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&count)).Data)), cgoAllocsUnknown
	cv, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&v)).Data)), cgoAllocsUnknown
	C.pdf_set_annot_ink_list(cctx, cannot, cn, ccount, cv)
}

// PDFSetAnnotLineEndingStyles function as declared in pdf/annot.h:170
func PDFSetAnnotLineEndingStyles(ctx *FzContext, annot *PDFAnnot, startStyle int32, endStyle int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	cstartStyle, _ := (C.int)(startStyle), cgoAllocsUnknown
	cendStyle, _ := (C.int)(endStyle), cgoAllocsUnknown
	C.pdf_set_annot_line_ending_styles(cctx, cannot, cstartStyle, cendStyle)
}

// PDFSetAnnotVertices function as declared in pdf/annot.h:171
func PDFSetAnnotVertices(ctx *FzContext, annot *PDFAnnot, n int32, v []float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	cn, _ := (C.int)(n), cgoAllocsUnknown
	cv, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&v)).Data)), cgoAllocsUnknown
	C.pdf_set_annot_vertices(cctx, cannot, cn, cv)
}

// PDFSetAnnotIconName function as declared in pdf/annot.h:172
func PDFSetAnnotIconName(ctx *FzContext, annot *PDFAnnot, name string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	C.pdf_set_annot_icon_name(cctx, cannot, cname)
	runtime.KeepAlive(name)
}

// PDFSetAnnotIsOpen function as declared in pdf/annot.h:173
func PDFSetAnnotIsOpen(ctx *FzContext, annot *PDFAnnot, isOpen int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	cisOpen, _ := (C.int)(isOpen), cgoAllocsUnknown
	C.pdf_set_annot_is_open(cctx, cannot, cisOpen)
}

// PDFAnnotLineEndingStyles function as declared in pdf/annot.h:175
func PDFAnnotLineEndingStyles(ctx *FzContext, annot *PDFAnnot, startStyle []int32, endStyle []int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	cstartStyle, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&startStyle)).Data)), cgoAllocsUnknown
	cendStyle, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&endStyle)).Data)), cgoAllocsUnknown
	C.pdf_annot_line_ending_styles(cctx, cannot, cstartStyle, cendStyle)
}

// PDFAnnotIconName function as declared in pdf/annot.h:176
func PDFAnnotIconName(ctx *FzContext, annot *PDFAnnot) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.pdf_annot_icon_name(cctx, cannot)
	__v := packPCharString(__ret)
	return __v
}

// PDFAnnotIsOpen function as declared in pdf/annot.h:177
func PDFAnnotIsOpen(ctx *FzContext, annot *PDFAnnot) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.pdf_annot_is_open(cctx, cannot)
	__v := (int32)(__ret)
	return __v
}

// PDFAnnotVertexCount function as declared in pdf/annot.h:179
func PDFAnnotVertexCount(ctx *FzContext, annot *PDFAnnot) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.pdf_annot_vertex_count(cctx, cannot)
	__v := (int32)(__ret)
	return __v
}

// PDFAnnotVertex function as declared in pdf/annot.h:180
func PDFAnnotVertex(ctx *FzContext, annot *PDFAnnot, i int32, v *[2]float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	ci, _ := (C.int)(i), cgoAllocsUnknown
	cv, _ := *(**C.float)(unsafe.Pointer(&v)), cgoAllocsUnknown
	C.pdf_annot_vertex(cctx, cannot, ci, cv)
}

// PDFSetTextAnnotPosition function as declared in pdf/annot.h:185
func PDFSetTextAnnotPosition(ctx *FzContext, annot *PDFAnnot, pt FzPoint) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	cpt, _ := *(*C.fz_point)(unsafe.Pointer(&pt)), cgoAllocsUnknown
	C.pdf_set_text_annot_position(cctx, cannot, cpt)
}

// PDFCopyAnnotContents function as declared in pdf/annot.h:190
func PDFCopyAnnotContents(ctx *FzContext, annot *PDFAnnot) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.pdf_copy_annot_contents(cctx, cannot)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// PDFSetAnnotContents function as declared in pdf/annot.h:195
func PDFSetAnnotContents(ctx *FzContext, annot *PDFAnnot, text string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	C.pdf_set_annot_contents(cctx, cannot, ctext)
	runtime.KeepAlive(text)
}

// PDFCopyAnnotAuthor function as declared in pdf/annot.h:200
func PDFCopyAnnotAuthor(ctx *FzContext, annot *PDFAnnot) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.pdf_copy_annot_author(cctx, cannot)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// PDFSetAnnotAuthor function as declared in pdf/annot.h:205
func PDFSetAnnotAuthor(ctx *FzContext, annot *PDFAnnot, author string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	author = safeString(author)
	cauthor, _ := unpackPCharString(author)
	C.pdf_set_annot_author(cctx, cannot, cauthor)
	runtime.KeepAlive(author)
}

// PDFAnnotModificationDate function as declared in pdf/annot.h:210
func PDFAnnotModificationDate(ctx *FzContext, annot *PDFAnnot) int {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.pdf_annot_modification_date(cctx, cannot)
	__v := (int)(__ret)
	return __v
}

// PDFSetAnnotModificationDate function as declared in pdf/annot.h:215
func PDFSetAnnotModificationDate(ctx *FzContext, annot *PDFAnnot, time int) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	ctime, _ := (C.int64_t)(time), cgoAllocsUnknown
	C.pdf_set_annot_modification_date(cctx, cannot, ctime)
}

// PDFSetFreeTextDetails function as declared in pdf/annot.h:221
func PDFSetFreeTextDetails(ctx *FzContext, annot *PDFAnnot, pos []FzPoint, text []byte, fontName []byte, fontSize float32, color *[3]float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	cpos, _ := (*C.fz_point)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&pos)).Data)), cgoAllocsUnknown
	ctext, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&text)).Data)), cgoAllocsUnknown
	cfontName, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&fontName)).Data)), cgoAllocsUnknown
	cfontSize, _ := (C.float)(fontSize), cgoAllocsUnknown
	ccolor, _ := *(**C.float)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.pdf_set_free_text_details(cctx, cannot, cpos, ctext, cfontName, cfontSize, ccolor)
}

// PDFNewAnnot function as declared in pdf/annot.h:226
func PDFNewAnnot(ctx *FzContext, page *PDFPage) *PDFAnnot {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer(page)), cgoAllocsUnknown
	__ret := C.pdf_new_annot(cctx, cpage)
	__v := *(**PDFAnnot)(unsafe.Pointer(&__ret))
	return __v
}

// PDFDirtyAnnot function as declared in pdf/annot.h:228
func PDFDirtyAnnot(ctx *FzContext, annot *PDFAnnot) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	C.pdf_dirty_annot(cctx, cannot)
}

// PDFCleanAnnot function as declared in pdf/annot.h:229
func PDFCleanAnnot(ctx *FzContext, annot *PDFAnnot) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	C.pdf_clean_annot(cctx, cannot)
}

// PDFAnnotIsDirty function as declared in pdf/annot.h:230
func PDFAnnotIsDirty(ctx *FzContext, annot *PDFAnnot) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer(annot)), cgoAllocsUnknown
	__ret := C.pdf_annot_is_dirty(cctx, cannot)
	__v := (int32)(__ret)
	return __v
}

// PDFGetStringOrStream function as declared in pdf/field.h:36
func PDFGetStringOrStream(ctx *FzContext, doc *PDFDocument, obj []PDFObj) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	__ret := C.pdf_get_string_or_stream(cctx, cdoc, cobj)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// PDFGetInheritable function as declared in pdf/field.h:37
func PDFGetInheritable(ctx *FzContext, doc *PDFDocument, obj []PDFObj, key []PDFObj) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	ckey, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&key)).Data)), cgoAllocsUnknown
	__ret := C.pdf_get_inheritable(cctx, cdoc, cobj, ckey)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFGetFieldFlags function as declared in pdf/field.h:38
func PDFGetFieldFlags(ctx *FzContext, doc *PDFDocument, obj []PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	__ret := C.pdf_get_field_flags(cctx, cdoc, cobj)
	__v := (int32)(__ret)
	return __v
}

// PDFFieldType function as declared in pdf/field.h:39
func PDFFieldType(ctx *FzContext, doc *PDFDocument, field []PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cfield, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&field)).Data)), cgoAllocsUnknown
	__ret := C.pdf_field_type(cctx, cdoc, cfield)
	__v := (int32)(__ret)
	return __v
}

// PDFSetFieldType function as declared in pdf/field.h:40
func PDFSetFieldType(ctx *FzContext, doc *PDFDocument, obj []PDFObj, kind int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	ckind, _ := (C.int)(kind), cgoAllocsUnknown
	C.pdf_set_field_type(cctx, cdoc, cobj, ckind)
}

// PDFFieldValue function as declared in pdf/field.h:41
func PDFFieldValue(ctx *FzContext, doc *PDFDocument, field []PDFObj) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cfield, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&field)).Data)), cgoAllocsUnknown
	__ret := C.pdf_field_value(cctx, cdoc, cfield)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// PDFFieldSetValue function as declared in pdf/field.h:42
func PDFFieldSetValue(ctx *FzContext, doc *PDFDocument, field []PDFObj, text string) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cfield, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&field)).Data)), cgoAllocsUnknown
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	__ret := C.pdf_field_set_value(cctx, cdoc, cfield, ctext)
	runtime.KeepAlive(text)
	__v := (int32)(__ret)
	return __v
}

// PDFFieldBorderStyle function as declared in pdf/field.h:43
func PDFFieldBorderStyle(ctx *FzContext, doc *PDFDocument, field []PDFObj) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cfield, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&field)).Data)), cgoAllocsUnknown
	__ret := C.pdf_field_border_style(cctx, cdoc, cfield)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// PDFFieldSetBorderStyle function as declared in pdf/field.h:44
func PDFFieldSetBorderStyle(ctx *FzContext, doc *PDFDocument, field []PDFObj, text string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cfield, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&field)).Data)), cgoAllocsUnknown
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	C.pdf_field_set_border_style(cctx, cdoc, cfield, ctext)
	runtime.KeepAlive(text)
}

// PDFFieldSetButtonCaption function as declared in pdf/field.h:45
func PDFFieldSetButtonCaption(ctx *FzContext, doc *PDFDocument, field []PDFObj, text string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cfield, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&field)).Data)), cgoAllocsUnknown
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	C.pdf_field_set_button_caption(cctx, cdoc, cfield, ctext)
	runtime.KeepAlive(text)
}

// PDFFieldSetFillColor function as declared in pdf/field.h:46
func PDFFieldSetFillColor(ctx *FzContext, doc *PDFDocument, field []PDFObj, col []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cfield, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&field)).Data)), cgoAllocsUnknown
	ccol, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&col)).Data)), cgoAllocsUnknown
	C.pdf_field_set_fill_color(cctx, cdoc, cfield, ccol)
}

// PDFFieldSetTextColor function as declared in pdf/field.h:47
func PDFFieldSetTextColor(ctx *FzContext, doc *PDFDocument, field []PDFObj, col []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cfield, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&field)).Data)), cgoAllocsUnknown
	ccol, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&col)).Data)), cgoAllocsUnknown
	C.pdf_field_set_text_color(cctx, cdoc, cfield, ccol)
}

// PDFSignatureSetValue function as declared in pdf/field.h:48
func PDFSignatureSetValue(ctx *FzContext, doc *PDFDocument, field []PDFObj, signer []PDFSigner) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cfield, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&field)).Data)), cgoAllocsUnknown
	csigner, _ := (*C.pdf_signer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&signer)).Data)), cgoAllocsUnknown
	C.pdf_signature_set_value(cctx, cdoc, cfield, csigner)
}

// PDFFieldDisplay function as declared in pdf/field.h:49
func PDFFieldDisplay(ctx *FzContext, doc *PDFDocument, field []PDFObj) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cfield, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&field)).Data)), cgoAllocsUnknown
	__ret := C.pdf_field_display(cctx, cdoc, cfield)
	__v := (int32)(__ret)
	return __v
}

// PDFFieldName function as declared in pdf/field.h:50
func PDFFieldName(ctx *FzContext, doc *PDFDocument, field []PDFObj) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cfield, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&field)).Data)), cgoAllocsUnknown
	__ret := C.pdf_field_name(cctx, cdoc, cfield)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// PDFFieldSetDisplay function as declared in pdf/field.h:51
func PDFFieldSetDisplay(ctx *FzContext, doc *PDFDocument, field []PDFObj, d int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cfield, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&field)).Data)), cgoAllocsUnknown
	cd, _ := (C.int)(d), cgoAllocsUnknown
	C.pdf_field_set_display(cctx, cdoc, cfield, cd)
}

// PDFLookupField function as declared in pdf/field.h:52
func PDFLookupField(ctx *FzContext, form *PDFObj, name []byte) *PDFObj {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cform, _ := (*C.pdf_obj)(unsafe.Pointer(form)), cgoAllocsUnknown
	cname, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&name)).Data)), cgoAllocsUnknown
	__ret := C.pdf_lookup_field(cctx, cform, cname)
	__v := *(**PDFObj)(unsafe.Pointer(&__ret))
	return __v
}

// PDFFieldReset function as declared in pdf/field.h:53
func PDFFieldReset(ctx *FzContext, doc *PDFDocument, field []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cfield, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&field)).Data)), cgoAllocsUnknown
	C.pdf_field_reset(cctx, cdoc, cfield)
}

// PDFSignaturesSupported function as declared in pdf/field.h:54
func PDFSignaturesSupported(ctx *FzContext) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.pdf_signatures_supported(cctx)
	__v := (int32)(__ret)
	return __v
}

// PDFFocusedWidget function as declared in pdf/widget.h:40
func PDFFocusedWidget(ctx *FzContext, doc *PDFDocument) *PDFWidget {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_focused_widget(cctx, cdoc)
	__v := *(**PDFWidget)(unsafe.Pointer(&__ret))
	return __v
}

// PDFFirstWidget function as declared in pdf/widget.h:45
func PDFFirstWidget(ctx *FzContext, doc *PDFDocument, page []PDFPage) *PDFWidget {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&page)).Data)), cgoAllocsUnknown
	__ret := C.pdf_first_widget(cctx, cdoc, cpage)
	__v := *(**PDFWidget)(unsafe.Pointer(&__ret))
	return __v
}

// PDFNextWidget function as declared in pdf/widget.h:50
func PDFNextWidget(ctx *FzContext, previous *PDFWidget) *PDFWidget {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cprevious, _ := (*C.pdf_widget)(unsafe.Pointer(previous)), cgoAllocsUnknown
	__ret := C.pdf_next_widget(cctx, cprevious)
	__v := *(**PDFWidget)(unsafe.Pointer(&__ret))
	return __v
}

// PDFCreateWidget function as declared in pdf/widget.h:55
func PDFCreateWidget(ctx *FzContext, doc *PDFDocument, page []PDFPage, kind int32, fieldname []byte) *PDFWidget {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&page)).Data)), cgoAllocsUnknown
	ckind, _ := (C.int)(kind), cgoAllocsUnknown
	cfieldname, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&fieldname)).Data)), cgoAllocsUnknown
	__ret := C.pdf_create_widget(cctx, cdoc, cpage, ckind, cfieldname)
	__v := *(**PDFWidget)(unsafe.Pointer(&__ret))
	return __v
}

// PDFWidgetType function as declared in pdf/widget.h:63
func PDFWidgetType(ctx *FzContext, widget *PDFWidget) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cwidget, _ := (*C.pdf_widget)(unsafe.Pointer(widget)), cgoAllocsUnknown
	__ret := C.pdf_widget_type(cctx, cwidget)
	__v := (int32)(__ret)
	return __v
}

// PDFBoundWidget function as declared in pdf/widget.h:68
func PDFBoundWidget(ctx *FzContext, widget *PDFWidget, arg2 []FzRect) *FzRect {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cwidget, _ := (*C.pdf_widget)(unsafe.Pointer(widget)), cgoAllocsUnknown
	carg2, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&arg2)).Data)), cgoAllocsUnknown
	__ret := C.pdf_bound_widget(cctx, cwidget, carg2)
	__v := *(**FzRect)(unsafe.Pointer(&__ret))
	return __v
}

// PDFTextWidgetText function as declared in pdf/widget.h:74
func PDFTextWidgetText(ctx *FzContext, doc *PDFDocument, tw []PDFWidget) *byte {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	ctw, _ := (*C.pdf_widget)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&tw)).Data)), cgoAllocsUnknown
	__ret := C.pdf_text_widget_text(cctx, cdoc, ctw)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// PDFTextWidgetMaxLen function as declared in pdf/widget.h:80
func PDFTextWidgetMaxLen(ctx *FzContext, doc *PDFDocument, tw []PDFWidget) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	ctw, _ := (*C.pdf_widget)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&tw)).Data)), cgoAllocsUnknown
	__ret := C.pdf_text_widget_max_len(cctx, cdoc, ctw)
	__v := (int32)(__ret)
	return __v
}

// PDFTextWidgetContentType function as declared in pdf/widget.h:86
func PDFTextWidgetContentType(ctx *FzContext, doc *PDFDocument, tw []PDFWidget) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	ctw, _ := (*C.pdf_widget)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&tw)).Data)), cgoAllocsUnknown
	__ret := C.pdf_text_widget_content_type(cctx, cdoc, ctw)
	__v := (int32)(__ret)
	return __v
}

// PDFTextWidgetSetText function as declared in pdf/widget.h:93
func PDFTextWidgetSetText(ctx *FzContext, doc *PDFDocument, tw []PDFWidget, text []byte) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	ctw, _ := (*C.pdf_widget)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&tw)).Data)), cgoAllocsUnknown
	ctext, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&text)).Data)), cgoAllocsUnknown
	__ret := C.pdf_text_widget_set_text(cctx, cdoc, ctw, ctext)
	__v := (int32)(__ret)
	return __v
}

// PDFChoiceWidgetOptions function as declared in pdf/widget.h:103
//func PDFChoiceWidgetOptions(ctx *FzContext, doc *PDFDocument, tw []PDFWidget, exportval int32, opts [][]byte) int32 {
//	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
//	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
//	ctw, _ := (*C.pdf_widget)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&tw)).Data)), cgoAllocsUnknown
//	cexportval, _ := (C.int)(exportval), cgoAllocsUnknown
//	copts, _ := unpackArgSSByte(opts)
//	__ret := C.pdf_choice_widget_options(cctx, cdoc, ctw, cexportval, copts)
//	packSSByte(opts, copts)
//	__v := (int32)(__ret)
//	return __v
//}

// PDFChoiceWidgetIsMultiselect function as declared in pdf/widget.h:109
func PDFChoiceWidgetIsMultiselect(ctx *FzContext, doc *PDFDocument, tw []PDFWidget) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	ctw, _ := (*C.pdf_widget)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&tw)).Data)), cgoAllocsUnknown
	__ret := C.pdf_choice_widget_is_multiselect(cctx, cdoc, ctw)
	__v := (int32)(__ret)
	return __v
}

// PDFChoiceWidgetValue function as declared in pdf/widget.h:118
//func PDFChoiceWidgetValue(ctx *FzContext, doc *PDFDocument, tw []PDFWidget, opts [][]byte) int32 {
//	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
//	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
//	ctw, _ := (*C.pdf_widget)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&tw)).Data)), cgoAllocsUnknown
//	copts, _ := unpackArgSSByte(opts)
//	__ret := C.pdf_choice_widget_value(cctx, cdoc, ctw, copts)
//	packSSByte(opts, copts)
//	__v := (int32)(__ret)
//	return __v
//}

// PDFChoiceWidgetSetValue function as declared in pdf/widget.h:125
//func PDFChoiceWidgetSetValue(ctx *FzContext, doc *PDFDocument, tw []PDFWidget, n int32, opts [][]byte) {
//	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
//	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
//	ctw, _ := (*C.pdf_widget)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&tw)).Data)), cgoAllocsUnknown
//	cn, _ := (C.int)(n), cgoAllocsUnknown
//	copts, _ := unpackArgSSByte(opts)
//	C.pdf_choice_widget_set_value(cctx, cdoc, ctw, cn, copts)
//	packSSByte(opts, copts)
//}

// PDFDaInfoFin function as declared in pdf/appearance.h:12
func PDFDaInfoFin(ctx *FzContext, di *PDFDaInfo) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdi, _ := (*C.pdf_da_info)(unsafe.Pointer(di)), cgoAllocsUnknown
	C.pdf_da_info_fin(cctx, cdi)
}

// PDFParseDa function as declared in pdf/appearance.h:13
func PDFParseDa(ctx *FzContext, da *byte, di []PDFDaInfo) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cda, _ := (*C.char)(unsafe.Pointer(da)), cgoAllocsUnknown
	cdi, _ := (*C.pdf_da_info)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&di)).Data)), cgoAllocsUnknown
	C.pdf_parse_da(cctx, cda, cdi)
}

// PDFFzbufPrintDa function as declared in pdf/appearance.h:14
func PDFFzbufPrintDa(ctx *FzContext, fzbuf *FzBuffer, di []PDFDaInfo) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfzbuf, _ := (*C.fz_buffer)(unsafe.Pointer(fzbuf)), cgoAllocsUnknown
	cdi, _ := (*C.pdf_da_info)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&di)).Data)), cgoAllocsUnknown
	C.pdf_fzbuf_print_da(cctx, cfzbuf, cdi)
}

// PDFUpdateTextAppearance function as declared in pdf/appearance.h:16
func PDFUpdateTextAppearance(ctx *FzContext, doc *PDFDocument, obj []PDFObj, eventvalue []byte) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	ceventvalue, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&eventvalue)).Data)), cgoAllocsUnknown
	C.pdf_update_text_appearance(cctx, cdoc, cobj, ceventvalue)
}

// PDFUpdateComboboxAppearance function as declared in pdf/appearance.h:17
func PDFUpdateComboboxAppearance(ctx *FzContext, doc *PDFDocument, obj []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	C.pdf_update_combobox_appearance(cctx, cdoc, cobj)
}

// PDFUpdateListboxAppearance function as declared in pdf/appearance.h:18
func PDFUpdateListboxAppearance(ctx *FzContext, doc *PDFDocument, obj []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	C.pdf_update_listbox_appearance(cctx, cdoc, cobj)
}

// PDFUpdatePushbuttonAppearance function as declared in pdf/appearance.h:19
func PDFUpdatePushbuttonAppearance(ctx *FzContext, doc *PDFDocument, obj []PDFObj) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cobj, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&obj)).Data)), cgoAllocsUnknown
	C.pdf_update_pushbutton_appearance(cctx, cdoc, cobj)
}

// PDFUpdateTextMarkupAppearance function as declared in pdf/appearance.h:20
func PDFUpdateTextMarkupAppearance(ctx *FzContext, doc *PDFDocument, annot []PDFAnnot, kind FzAnnotType) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&annot)).Data)), cgoAllocsUnknown
	ckind, _ := (C.fz_annot_type)(kind), cgoAllocsUnknown
	C.pdf_update_text_markup_appearance(cctx, cdoc, cannot, ckind)
}

// PDFUpdateInkAppearance function as declared in pdf/appearance.h:21
func PDFUpdateInkAppearance(ctx *FzContext, doc *PDFDocument, annot []PDFAnnot) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&annot)).Data)), cgoAllocsUnknown
	C.pdf_update_ink_appearance(cctx, cdoc, cannot)
}

// PDFUpdateTextAnnotAppearance function as declared in pdf/appearance.h:22
func PDFUpdateTextAnnotAppearance(ctx *FzContext, doc *PDFDocument, annot []PDFAnnot) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&annot)).Data)), cgoAllocsUnknown
	C.pdf_update_text_annot_appearance(cctx, cdoc, cannot)
}

// PDFUpdateFreeTextAnnotAppearance function as declared in pdf/appearance.h:27
func PDFUpdateFreeTextAnnotAppearance(ctx *FzContext, doc *PDFDocument, annot []PDFAnnot) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&annot)).Data)), cgoAllocsUnknown
	C.pdf_update_free_text_annot_appearance(cctx, cdoc, cannot)
}

// PDFSetAnnotAppearance function as declared in pdf/appearance.h:33
func PDFSetAnnotAppearance(ctx *FzContext, doc *PDFDocument, annot []PDFAnnot, rect []FzRect, dispList []FzDisplayList) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&annot)).Data)), cgoAllocsUnknown
	crect, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rect)).Data)), cgoAllocsUnknown
	cdispList, _ := (*C.fz_display_list)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dispList)).Data)), cgoAllocsUnknown
	C.pdf_set_annot_appearance(cctx, cdoc, cannot, crect, cdispList)
}

// PDFSetMarkupAppearance function as declared in pdf/appearance.h:39
func PDFSetMarkupAppearance(ctx *FzContext, doc *PDFDocument, annot []PDFAnnot, color *[3]float32, alpha float32, lineThickness float32, lineHeight float32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&annot)).Data)), cgoAllocsUnknown
	ccolor, _ := *(**C.float)(unsafe.Pointer(&color)), cgoAllocsUnknown
	calpha, _ := (C.float)(alpha), cgoAllocsUnknown
	clineThickness, _ := (C.float)(lineThickness), cgoAllocsUnknown
	clineHeight, _ := (C.float)(lineHeight), cgoAllocsUnknown
	C.pdf_set_markup_appearance(cctx, cdoc, cannot, ccolor, calpha, clineThickness, clineHeight)
}

// PDFSetSignatureAppearance function as declared in pdf/appearance.h:41
func PDFSetSignatureAppearance(ctx *FzContext, doc *PDFDocument, annot []PDFAnnot, name []byte, dn string, date []byte) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cannot, _ := (*C.pdf_annot)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&annot)).Data)), cgoAllocsUnknown
	cname, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&name)).Data)), cgoAllocsUnknown
	dn = safeString(dn)
	cdn, _ := unpackPCharString(dn)
	cdate, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&date)).Data)), cgoAllocsUnknown
	C.pdf_set_signature_appearance(cctx, cdoc, cannot, cname, cdn, cdate)
	runtime.KeepAlive(dn)
}

// PDFPassEvent function as declared in pdf/event.h:60
func PDFPassEvent(ctx *FzContext, doc *PDFDocument, page []PDFPage, uiEvent []PDFUiEvent) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cpage, _ := (*C.pdf_page)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&page)).Data)), cgoAllocsUnknown
	cuiEvent, _ := (*C.pdf_ui_event)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&uiEvent)).Data)), cgoAllocsUnknown
	__ret := C.pdf_pass_event(cctx, cdoc, cpage, cuiEvent)
	__v := (int32)(__ret)
	return __v
}

// PDFAccessAlertEvent function as declared in pdf/event.h:144
func PDFAccessAlertEvent(ctx *FzContext, event *PDFDocEvent) *PDFAlertEvent {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cevent, _ := (*C.pdf_doc_event)(unsafe.Pointer(event)), cgoAllocsUnknown
	__ret := C.pdf_access_alert_event(cctx, cevent)
	__v := *(**PDFAlertEvent)(unsafe.Pointer(&__ret))
	return __v
}

// PDFAccessExecMenuItemEvent function as declared in pdf/event.h:150
func PDFAccessExecMenuItemEvent(ctx *FzContext, event *PDFDocEvent) string {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cevent, _ := (*C.pdf_doc_event)(unsafe.Pointer(event)), cgoAllocsUnknown
	__ret := C.pdf_access_exec_menu_item_event(cctx, cevent)
	__v := packPCharString(__ret)
	return __v
}

// PDFAccessLaunchUrlEvent function as declared in pdf/event.h:187
func PDFAccessLaunchUrlEvent(ctx *FzContext, event *PDFDocEvent) *PDFLaunchUrlEvent {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cevent, _ := (*C.pdf_doc_event)(unsafe.Pointer(event)), cgoAllocsUnknown
	__ret := C.pdf_access_launch_url_event(cctx, cevent)
	__v := *(**PDFLaunchUrlEvent)(unsafe.Pointer(&__ret))
	return __v
}

// PDFAccessMailDocEvent function as declared in pdf/event.h:207
func PDFAccessMailDocEvent(ctx *FzContext, event *PDFDocEvent) *PDFMailDocEvent {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cevent, _ := (*C.pdf_doc_event)(unsafe.Pointer(event)), cgoAllocsUnknown
	__ret := C.pdf_access_mail_doc_event(cctx, cevent)
	__v := *(**PDFMailDocEvent)(unsafe.Pointer(&__ret))
	return __v
}

// PDFEventIssueAlert function as declared in pdf/event.h:209
func PDFEventIssueAlert(ctx *FzContext, doc *PDFDocument, event []PDFAlertEvent) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cevent, _ := (*C.pdf_alert_event)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&event)).Data)), cgoAllocsUnknown
	C.pdf_event_issue_alert(cctx, cdoc, cevent)
}

// PDFEventIssuePrint function as declared in pdf/event.h:210
func PDFEventIssuePrint(ctx *FzContext, doc *PDFDocument) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	C.pdf_event_issue_print(cctx, cdoc)
}

// PDFEventIssueExecMenuItem function as declared in pdf/event.h:211
func PDFEventIssueExecMenuItem(ctx *FzContext, doc *PDFDocument, item string) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	item = safeString(item)
	citem, _ := unpackPCharString(item)
	C.pdf_event_issue_exec_menu_item(cctx, cdoc, citem)
	runtime.KeepAlive(item)
}

// PDFEventIssueExecDialog function as declared in pdf/event.h:212
func PDFEventIssueExecDialog(ctx *FzContext, doc *PDFDocument) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	C.pdf_event_issue_exec_dialog(cctx, cdoc)
}

// PDFEventIssueLaunchUrl function as declared in pdf/event.h:213
func PDFEventIssueLaunchUrl(ctx *FzContext, doc *PDFDocument, url string, newFrame int32) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	url = safeString(url)
	curl, _ := unpackPCharString(url)
	cnewFrame, _ := (C.int)(newFrame), cgoAllocsUnknown
	C.pdf_event_issue_launch_url(cctx, cdoc, curl, cnewFrame)
	runtime.KeepAlive(url)
}

// PDFEventIssueMailDoc function as declared in pdf/event.h:214
func PDFEventIssueMailDoc(ctx *FzContext, doc *PDFDocument, event []PDFMailDocEvent) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	cevent, _ := (*C.pdf_mail_doc_event)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&event)).Data)), cgoAllocsUnknown
	C.pdf_event_issue_mail_doc(cctx, cdoc, cevent)
}

// PDFEnableJs function as declared in pdf/javascript.h:11
func PDFEnableJs(ctx *FzContext, doc *PDFDocument) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	C.pdf_enable_js(cctx, cdoc)
}

// PDFDisableJs function as declared in pdf/javascript.h:12
func PDFDisableJs(ctx *FzContext, doc *PDFDocument) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	C.pdf_disable_js(cctx, cdoc)
}

// PDFJsSupported function as declared in pdf/javascript.h:13
func PDFJsSupported(ctx *FzContext, doc *PDFDocument) int32 {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	__ret := C.pdf_js_supported(cctx, cdoc)
	__v := (int32)(__ret)
	return __v
}

// PDFDropJs function as declared in pdf/javascript.h:14
func PDFDropJs(ctx *FzContext, js *PDFJs) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cjs, _ := (*C.pdf_js)(unsafe.Pointer(js)), cgoAllocsUnknown
	C.pdf_drop_js(cctx, cjs)
}

// PDFJsSetupEvent function as declared in pdf/javascript.h:16
func PDFJsSetupEvent(js *PDFJs, e *PDFJsEvent) {
	cjs, _ := (*C.pdf_js)(unsafe.Pointer(js)), cgoAllocsUnknown
	ce, _ := (*C.pdf_js_event)(unsafe.Pointer(e)), cgoAllocsUnknown
	C.pdf_js_setup_event(cjs, ce)
}

// PDFJsGetEvent function as declared in pdf/javascript.h:17
func PDFJsGetEvent(js *PDFJs) *PDFJsEvent {
	cjs, _ := (*C.pdf_js)(unsafe.Pointer(js)), cgoAllocsUnknown
	__ret := C.pdf_js_get_event(cjs)
	__v := *(**PDFJsEvent)(unsafe.Pointer(&__ret))
	return __v
}

// PDFJsExecute function as declared in pdf/javascript.h:18
func PDFJsExecute(js *PDFJs, code *byte) {
	cjs, _ := (*C.pdf_js)(unsafe.Pointer(js)), cgoAllocsUnknown
	ccode, _ := (*C.char)(unsafe.Pointer(code)), cgoAllocsUnknown
	C.pdf_js_execute(cjs, ccode)
}

// PDFNewPDFDevice function as declared in pdf/output-pdf.h:13
func PDFNewPDFDevice(ctx *FzContext, doc *PDFDocument, topctm []FzMatrix, mediabox []FzRect, resources []PDFObj, contents []FzBuffer) *FzDevice {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	ctopctm, _ := (*C.fz_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&topctm)).Data)), cgoAllocsUnknown
	cmediabox, _ := (*C.fz_rect)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&mediabox)).Data)), cgoAllocsUnknown
	cresources, _ := (*C.pdf_obj)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&resources)).Data)), cgoAllocsUnknown
	ccontents, _ := (*C.fz_buffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&contents)).Data)), cgoAllocsUnknown
	__ret := C.pdf_new_pdf_device(cctx, cdoc, ctopctm, cmediabox, cresources, ccontents)
	__v := *(**FzDevice)(unsafe.Pointer(&__ret))
	return __v
}

// PDFLocalisePageResources function as declared in pdf/output-pdf.h:16
func PDFLocalisePageResources(ctx *FzContext, doc *PDFDocument) {
	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdoc, _ := (*C.pdf_document)(unsafe.Pointer(doc)), cgoAllocsUnknown
	C.pdf_localise_page_resources(cctx, cdoc)
}

// PDFCleanFile function as declared in pdf/clean.h:5
//func PDFCleanFile(ctx *FzContext, infile *byte, outfile []byte, password []byte, opts []PDFWriteOptions, retainlist [][]byte, retainlen int32) {
//	cctx, _ := (*C.fz_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
//	cinfile, _ := (*C.char)(unsafe.Pointer(infile)), cgoAllocsUnknown
//	coutfile, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&outfile)).Data)), cgoAllocsUnknown
//	cpassword, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&password)).Data)), cgoAllocsUnknown
//	copts, _ := (*C.pdf_write_options)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&opts)).Data)), cgoAllocsUnknown
//	cretainlist, _ := unpackArgSSByte(retainlist)
//	cretainlen, _ := (C.int)(retainlen), cgoAllocsUnknown
//	C.pdf_clean_file(cctx, cinfile, coutfile, cpassword, copts, cretainlist, cretainlen)
//	packSSByte(retainlist, cretainlist)
//}
